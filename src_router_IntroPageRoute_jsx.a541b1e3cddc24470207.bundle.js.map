{"version":3,"file":"src_router_IntroPageRoute_jsx.a541b1e3cddc24470207.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAiBA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/router/IntroPageRoute.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nimport { node } from \"prop-types\";\n\nimport { useMallStateContext } from \"@shopby/react-components\";\nimport { INTRO_PAGE_TYPE_MAP, isAgeVerified, isSignedIn } from \"@shopby/shared\";\n\nconst platformType = isMobile ? \"mobile\" : \"pc\";\n\nconst exceptPaths = [\n  \"/adult-certification\",\n  \"/no-access\",\n  \"/member-only\",\n  \"/sign-up/form\",\n  \"/sign-up\",\n  \"/sign-in\",\n  \"/find-id\",\n  \"/find-password\",\n  \"/change-password\",\n  \"/callback\",\n  \"/not-found\",\n  \"/callback/auth-callback\",\n  \"/service-check\",\n  \"/expired-mall\",\n];\n\nconst INTRO_PAGE_ROUTING_MAP = {\n  [INTRO_PAGE_TYPE_MAP.ONLY_ADULT]: {\n    next: \"/adult-certification\",\n    shouldGoToOwnPage: () => isAgeVerified(),\n  },\n  [INTRO_PAGE_TYPE_MAP.NO_ACCESS]: {\n    next: \"/no-access\",\n    shouldGoToOwnPage: () => false,\n  },\n  [INTRO_PAGE_TYPE_MAP.ONLY_MEMBER]: {\n    next: \"/member-only\",\n    shouldGoToOwnPage: () => isSignedIn(),\n  },\n};\n\nconst IntroPageRoute = ({ children }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { mall } = useMallStateContext();\n\n  const condition = INTRO_PAGE_ROUTING_MAP[mall.introRedirection[platformType]];\n\n  useEffect(() => {\n    if (condition) {\n      if (\n        !condition?.shouldGoToOwnPage() &&\n        !exceptPaths.includes(location.pathname)\n      ) {\n        navigate(condition.next, {\n          replace: true,\n          state: {\n            from: `${location.pathname}${location.search}`,\n            isIntroPage: true,\n          },\n        });\n      }\n    }\n\n    setIsLoading(false);\n  }, [location, condition]);\n\n  if (isLoading) return <></>;\n\n  return children;\n};\n\nexport default IntroPageRoute;\n\nIntroPageRoute.propTypes = {\n  children: node,\n};\n"],"names":[],"sourceRoot":""}