{"version":3,"file":"default-src_components_Board_index_js-src_components_ListSkeleton_ListSkeleton_jsx.f3dbb4a6464ad17fc80a.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAcA;AAAA;AAXA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAKA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzQA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrFA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAoBA;AAjBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AACA;AAGA;AAIA;AACA;AAGA;AACA;AACA;AAGA;AAIA;AACA;AAGA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvKA;AAEA;AAEA;AAEA;AACA;AAEA;AAcA;AAbA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAcA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AC5JA;AACA;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;ACzCA;AAEA;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AADA;AAEA;AAEA;AAEA;AAEA;AAWA;AARA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AArBA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClEA;AAEA;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/Board/BoardForm.jsx","webpack://@shopby/react-skin/./src/components/Board/BoardFormCheckboxGroup.jsx","webpack://@shopby/react-skin/./src/components/Board/BoardFormImage.jsx","webpack://@shopby/react-skin/./src/components/Board/BoardFormModification.jsx","webpack://@shopby/react-skin/./src/components/Board/BoardFormRegistration.jsx","webpack://@shopby/react-skin/./src/components/Board/InquiryItem.jsx","webpack://@shopby/react-skin/./src/components/Board/index.js","webpack://@shopby/react-skin/./src/components/FoldingImagesByOnRow/FoldingImagesByOneRow.jsx","webpack://@shopby/react-skin/./src/components/FoldingImagesByOnRow/index.js","webpack://@shopby/react-skin/./src/components/ImageFileUpload/ImageFileUpload.jsx","webpack://@shopby/react-skin/./src/components/ImageFileUpload/index.js","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/constants/image.js","webpack://@shopby/react-skin/./src/constants/rate.js"],"sourcesContent":["import { forwardRef, useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { string, shape, arrayOf, number, bool, func } from 'prop-types';\n\nimport { VisibleComponent, SelectBox, CharacterCounter, RatingStar } from '@shopby/react-components';\nimport { calculateRatingScoreByCurrentWidth } from '@shopby/shared';\n\nimport BoardFormCheckboxGroup from './BoardFormCheckboxGroup';\nimport BoardFormImage from './BoardFormImage';\n\nconst BoardForm = forwardRef(\n  (\n    {\n      className = '',\n      titleOption = null,\n      textOption = null,\n      typeSelectorOption = null,\n      rateOption = null,\n      imageFileUploadOption = null,\n      checkboxOption = null,\n      ButtonGroup,\n      canAttach = true,\n    },\n    ref\n  ) => {\n    const titleRef = useRef();\n    const rateRef = useRef();\n    const textRef = useRef();\n    const imageFileUploadRef = useRef();\n\n    const [type, setType] = useState(typeSelectorOption?.value ?? typeSelectorOption?.options?.at(0)?.value);\n    const [title, setTitle] = useState(titleOption?.value);\n    const [content, setContent] = useState(textOption?.value);\n    const [score, setScore] = useState(rateOption?.value);\n    const [checkboxValues, setCheckBoxValues] = useState(checkboxOption?.options);\n    const [images, setImages] = useState(imageFileUploadOption?.images);\n\n    const handleTypeSelect = useCallback((event) => {\n      setType(event.currentTarget.value);\n\n      typeSelectorOption?.onSelect?.(event);\n    }, []);\n\n    const handleTitleChange = useCallback(({ character: { value, count } }) => {\n      setTitle(value);\n\n      titleOption?.onChange?.({ value, count });\n    }, []);\n\n    const handleContentChange = useCallback(({ character: { value, count } }) => {\n      setContent(value);\n\n      textOption?.onChange?.({ value, count });\n    }, []);\n\n    const handleCheckboxChange = useCallback((event) => {\n      const {\n        currentTarget: { value, checked },\n      } = event;\n\n      setCheckBoxValues((prev) =>\n        prev.map((checkboxOption) => {\n          if (value === checkboxOption.value) {\n            return {\n              ...checkboxOption,\n              checked,\n            };\n          }\n\n          return checkboxOption;\n        })\n      );\n\n      checkboxOption?.onChange?.(event);\n    }, []);\n\n    const handleImagesChange = useCallback((selectedImages) => {\n      setImages(selectedImages);\n\n      imageFileUploadOption?.onChange?.(selectedImages);\n    }, []);\n\n    const handleImageUploadButtonClick = useCallback(() => {\n      imageFileUploadRef.current.click();\n    }, [imageFileUploadRef?.current]);\n\n    const handleRatingStarClick = useCallback(({ target, nativeEvent: { offsetX } }) => {\n      const ratingStarElement = target.getBoundingClientRect();\n      const _score = calculateRatingScoreByCurrentWidth({ offsetX, width: ratingStarElement.width });\n\n      setScore(_score);\n    }, []);\n\n    const resetFormData = useCallback(() => {\n      setType(typeSelectorOption?.value);\n      setTitle(titleOption?.value);\n      setContent(textOption?.value);\n      setScore(rateOption?.value);\n      setCheckBoxValues(checkboxOption?.options);\n      setImages(imageFileUploadOption?.images);\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      /**\n       * @param {'type' | 'title' | 'rate' | 'text' | 'optionSelector' | 'secret' | 'attachment'} type\n       */\n      focus: (type) => {\n        `${type}Ref`?.current.focus();\n      },\n      get formData() {\n        return {\n          type,\n          title,\n          rate: score,\n          content,\n          checkboxValues,\n          images: images ?? [],\n        };\n      },\n      resetFormData,\n    }));\n\n    return (\n      <div className={`board-form l-panel ${className ?? ''}`}>\n        <VisibleComponent\n          shows={typeSelectorOption && typeSelectorOption?.options?.length > 0}\n          TruthyComponent={\n            <SelectBox\n              className={`board-form__type-selector ${\n                typeSelectorOption?.disabled ? 'board-form__type-selector--disabled' : ''\n              }`}\n              {...typeSelectorOption}\n              value={type}\n              onSelect={handleTypeSelect}\n            />\n          }\n        />\n        <div className=\"board-form__top\">\n          <VisibleComponent\n            shows={titleOption}\n            TruthyComponent={\n              <CharacterCounter\n                ref={titleRef}\n                className=\"board-form__title\"\n                limitCount={{\n                  character: 50,\n                }}\n                {...titleOption}\n                valid=\"NO_COMMON_SPECIAL\"\n                value={title}\n                onChange={handleTitleChange}\n              />\n            }\n          />\n          <VisibleComponent\n            shows={rateOption}\n            TruthyComponent={\n              <RatingStar\n                ref={rateRef}\n                className=\"board-form__rating-star\"\n                {...rateOption}\n                onClick={handleRatingStarClick}\n                score={score}\n              />\n            }\n          />\n        </div>\n        <CharacterCounter\n          ref={textRef}\n          className=\"board-form__text\"\n          limitCount={{\n            character: 1000,\n          }}\n          textType=\"TEXT_AREA\"\n          valid=\"NO_COMMON_SPECIAL\"\n          {...textOption}\n          value={content}\n          onChange={handleContentChange}\n        />\n        <VisibleComponent\n          shows={checkboxOption?.options.length > 0}\n          TruthyComponent={\n            <BoardFormCheckboxGroup {...checkboxOption} options={checkboxValues} onChange={handleCheckboxChange} />\n          }\n        />\n        <VisibleComponent\n          shows={imageFileUploadOption}\n          TruthyComponent={\n            <BoardFormImage\n              ref={imageFileUploadRef}\n              {...imageFileUploadOption}\n              images={images}\n              canAttach={canAttach}\n              onChange={handleImagesChange}\n              onClick={handleImageUploadButtonClick}\n            />\n          }\n        />\n        <div className=\"board-form__buttons\">\n          <ButtonGroup />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default BoardForm;\n\nBoardForm.displayName = 'BoardForm';\n\nBoardForm.propTypes = {\n  className: string,\n  titleOption: shape({\n    value: string,\n    onChange: func,\n    placeholder: string,\n  }),\n  textOption: shape({\n    value: string,\n    onChange: func,\n    usesCounter: bool,\n    placeholder: string,\n  }),\n  typeSelectorOption: shape({\n    value: string,\n    disabled: bool,\n    options: arrayOf(\n      shape({\n        label: string,\n        value: string,\n      })\n    ),\n    onSelect: func,\n  }),\n  checkboxOption: shape({\n    title: string,\n    options: arrayOf(\n      shape({\n        checked: bool,\n        label: string,\n        value: string,\n      })\n    ),\n    onChange: func,\n  }),\n  rateOption: shape({\n    value: number,\n    onChange: func,\n  }),\n  imageFileUploadOption: shape({\n    configuration: shape({\n      LIMIT_MEGA_BYTES: number,\n      LIMIT_COUNT: number,\n    }),\n    images: arrayOf(\n      shape({\n        imageUrl: string,\n        originName: string,\n      })\n    ),\n    onChange: func,\n    onUpload: func,\n  }),\n  ButtonGroup: func,\n  canAttach: bool,\n};\n","import { string, shape, arrayOf, bool, func } from 'prop-types';\n\nimport { Checkbox, VisibleComponent } from '@shopby/react-components';\n\nconst BoardFormCheckboxGroup = ({ options, title = '', onChange }) => (\n  <div className=\"board-form__checkbox-group\">\n    <VisibleComponent shows={title} TruthyComponent={<p className=\"board-form__checkbox-title\">{title}</p>} />\n    {options.map((option) => (\n      <Checkbox key={option.value} className=\"board-form__checkbox\" {...option} onChange={onChange} />\n    ))}\n  </div>\n);\n\nBoardFormCheckboxGroup.propTypes = {\n  title: string,\n  options: arrayOf(\n    shape({\n      checked: bool,\n      label: string,\n      value: string,\n    })\n  ),\n  onChange: func,\n};\n\nexport default BoardFormCheckboxGroup;\n","import { forwardRef } from 'react';\n\nimport { string, shape, arrayOf, number, func, bool } from 'prop-types';\n\nimport { Button, VisibleComponent } from '@shopby/react-components';\n\nimport { BOARD_IMAGE } from '../../constants/image';\nimport ImageFileUpload from '../ImageFileUpload';\n\nconst BoardFormImage = forwardRef(\n  ({ configuration, onClick, images = [], onChange, canAttach = true, ...props }, ref) => {\n    const updateImages = (images) => {\n      onChange?.(images);\n    };\n\n    const handleImagesChange = (selectedImages) => {\n      if (!selectedImages.length) return;\n\n      updateImages([...images, ...selectedImages]);\n    };\n\n    const handleImageDelete = (imageUrl) => {\n      if (!imageUrl) return;\n\n      updateImages(images.filter((image) => image.imageUrl !== imageUrl));\n    };\n\n    return (\n      <>\n        <ul className=\"board-form__image-files\">\n          {images.map((image, index) => (\n            <li key={index} id={`${index}_${image.originName}`} className=\"board-form__image\">\n              <img src={`${image.imageUrl}?${BOARD_IMAGE.THUMB_NAIL_SIZE}`} alt={image.originName} loading=\"lazy\" />\n              <button className=\"delete\" onClick={() => handleImageDelete(image.imageUrl)} />\n            </li>\n          ))}\n        </ul>\n        <VisibleComponent\n          shows={canAttach}\n          TruthyComponent={\n            <>\n              <ImageFileUpload\n                className=\"board-form__file-upload\"\n                ref={ref}\n                {...props}\n                images={images}\n                onChange={handleImagesChange}\n                limitFileSizeInMB={configuration.LIMIT_MEGA_BYTES}\n                limitCount={configuration.LIMIT_COUNT}\n              />\n              <Button className=\"board-form__upload-btn\" label=\"사진 첨부하기\" onClick={onClick} />\n              <p className=\"board-form__notice-text\">\n                업로드 용량은 {configuration.LIMIT_MEGA_BYTES}MB 이하로만 가능 합니다.\n              </p>\n            </>\n          }\n        />\n      </>\n    );\n  }\n);\n\nBoardFormImage.displayName = 'BoardFormImage';\n\nBoardFormImage.propTypes = {\n  configuration: shape({\n    LIMIT_MEGA_BYTES: number,\n    LIMIT_COUNT: number,\n  }),\n  images: arrayOf(\n    shape({\n      imageUrl: string,\n      originName: string,\n    })\n  ),\n  onClick: func,\n  onChange: func,\n  canAttach: bool,\n};\n\nexport default BoardFormImage;\n","import { forwardRef } from 'react';\n\nimport { string, shape, arrayOf, number, bool, func } from 'prop-types';\n\nimport { Button } from '@shopby/react-components';\n\nimport BoardForm from './BoardForm';\n\nconst BoardFormModification = forwardRef(\n  ({ className = '', modifyButtonLabel = '수정', cancelButtonLabel = '취소', onModify, onCancel, ...props }, ref) => (\n    <BoardForm\n      className={`board-form--modification ${className ?? ''}`}\n      ref={ref}\n      {...props}\n      ButtonGroup={() => (\n        <>\n          <Button theme=\"caution\" label={modifyButtonLabel} onClick={onModify} />\n          <Button theme=\"dark\" label={cancelButtonLabel} onClick={onCancel} />\n        </>\n      )}\n    />\n  )\n);\n\nexport default BoardFormModification;\n\nBoardFormModification.displayName = 'BoardFormModification';\n\nBoardFormModification.propTypes = {\n  onModify: func.isRequired,\n  onCancel: func.isRequired,\n  modifyButtonLabel: string,\n  cancelButtonLabel: string,\n  className: string,\n  titleOption: shape({\n    value: string,\n    onChange: func,\n    placeholder: string,\n  }),\n  textOption: shape({\n    value: string,\n    onChange: func,\n    usesCounter: bool,\n    placeholder: string,\n  }),\n  typeSelectorOption: shape({\n    value: string,\n    disabled: bool,\n    options: arrayOf(\n      shape({\n        label: string,\n        value: string,\n      })\n    ),\n    onSelect: func,\n  }),\n  checkboxOption: shape({\n    title: string,\n    options: arrayOf(\n      shape({\n        checked: bool,\n        label: string,\n        value: string,\n      })\n    ),\n    onChange: func,\n  }),\n  rateOption: shape({\n    value: number,\n    onChange: func,\n  }),\n  imageFileUploadOption: shape({\n    configuration: shape({\n      LIMIT_MEGA_BYTES: number,\n      LIMIT_COUNT: number,\n    }),\n    images: arrayOf(\n      shape({\n        imageUrl: string,\n        originName: string,\n      })\n    ),\n    onChange: func,\n    onUpload: func,\n  }),\n};\n","import { forwardRef, useMemo } from 'react';\n\nimport { string, shape, arrayOf, number, bool, func } from 'prop-types';\n\nimport { Button } from '@shopby/react-components';\n\nimport { RATING_STAR } from '../../constants/rate';\n\nimport BoardForm from './BoardForm';\n\nconst makeInitialState = (initialState, use, option) => {\n  if (option) {\n    return option;\n  }\n\n  if (use) {\n    return initialState;\n  }\n\n  return option;\n};\n\nconst BoardFormRegistration = forwardRef(\n  (\n    {\n      className = '',\n      usesTitle = false,\n      usesText = false,\n      usesTextCounter = false,\n      usesRate = false,\n      submitButtonLabel = '등록',\n      onSubmit,\n      onCancel,\n      titleOption = null,\n      textOption = null,\n      typeSelectorOption = null,\n      rateOption = null,\n      imageFileUploadOption = null,\n      checkboxOption = null,\n      canAttach = true,\n    },\n    ref\n  ) => {\n    const _titleOption = useMemo(\n      () =>\n        makeInitialState(\n          {\n            value: '',\n            placeholder: '제목을 입력하세요.',\n          },\n          usesTitle,\n          titleOption\n        ),\n      [titleOption]\n    );\n\n    const _textOption = useMemo(\n      () =>\n        makeInitialState(\n          {\n            value: '',\n            usesCounter: usesTextCounter,\n          },\n          usesText,\n          textOption\n        ),\n      [textOption]\n    );\n\n    const _rateOption = useMemo(\n      () =>\n        makeInitialState(\n          {\n            value: RATING_STAR.LIMIT_SCORE,\n          },\n          usesRate,\n          rateOption\n        ),\n      [rateOption]\n    );\n\n    return (\n      <BoardForm\n        className={`board-form--registration ${className ?? ''}`}\n        ref={ref}\n        ButtonGroup={() => (\n          <>\n            <Button theme=\"dark\" label=\"취소\" onClick={onCancel} />\n            <Button theme=\"caution\" label={submitButtonLabel} onClick={onSubmit} />\n          </>\n        )}\n        titleOption={_titleOption}\n        textOption={_textOption}\n        typeSelectorOption={typeSelectorOption}\n        checkboxOption={checkboxOption}\n        rateOption={_rateOption}\n        canAttach={canAttach}\n        imageFileUploadOption={imageFileUploadOption}\n      />\n    );\n  }\n);\n\nexport default BoardFormRegistration;\n\nBoardFormRegistration.displayName = 'BoardFormRegistration';\n\nBoardFormRegistration.propTypes = {\n  className: string,\n  onSubmit: func.isRequired,\n  onCancel: func.isRequired,\n  submitButtonLabel: string,\n  usesTitle: bool,\n  usesText: bool,\n  usesTextCounter: bool,\n  usesRate: bool,\n  titleOption: shape({\n    value: string,\n    onChange: func,\n    placeholder: string,\n  }),\n  textOption: shape({\n    value: string,\n    onChange: func,\n    usesCounter: bool,\n    placeholder: string,\n  }),\n  typeSelectorOption: shape({\n    value: string,\n    options: arrayOf(\n      shape({\n        label: string,\n        value: string,\n      }).isRequired\n    ),\n    onSelect: func,\n  }),\n  checkboxOption: shape({\n    title: string,\n    options: arrayOf(\n      shape({\n        checked: bool,\n        label: string,\n        value: string,\n      })\n    ),\n    onChange: func,\n  }),\n  rateOption: shape({\n    value: number,\n    onChange: func,\n  }),\n  imageFileUploadOption: shape({\n    configuration: shape({\n      LIMIT_MEGA_BYTES: number,\n      LIMIT_COUNT: number,\n    }),\n    images: arrayOf(\n      shape({\n        imageUrl: string,\n        originName: string,\n      })\n    ),\n    onChange: func,\n    onUpload: func,\n  }),\n  canAttach: bool,\n};\n","import { useMemo, useState } from 'react';\n\nimport { string, arrayOf, func, shape, bool, number } from 'prop-types';\n\nimport { Button, AngleTopDown, Icon, VisibleComponent } from '@shopby/react-components';\n\nimport FoldingImagesByOneRow from '../FoldingImagesByOnRow';\nimport Sanitized from '../Sanitized';\n\nconst InquiryItem = ({\n  inquiryTypeLabel = '',\n  memberId = '',\n  title = '',\n  content = '',\n  isReplied = false,\n  registerDate = '',\n  images = [],\n  answers = [],\n  canModify = true,\n  isMine = false,\n  isSecreted = false,\n  onModify,\n  onDelete,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const { modifier: inquiryStatusModifier, label: inquiryStatusLabel } = useMemo(() => {\n    if (isReplied) {\n      return {\n        modifier: 'answered',\n        label: '답변완료',\n      };\n    }\n\n    return {\n      modifier: 'ready',\n      label: '답변대기',\n    };\n  }, [isReplied]);\n\n  const _canModify = useMemo(() => {\n    if (canModify) return true;\n\n    if (isReplied) return false;\n\n    if (isMine) return true;\n\n    return false;\n  }, [isReplied, canModify, isMine]);\n\n  const handleModifyButtonClick = () => {\n    onModify();\n  };\n\n  const handleDeleteButtonClick = () => {\n    onDelete();\n  };\n\n  return (\n    <div className={`inquiry-item ${isActive ? 'is-active' : ''}`}>\n      <div className=\"inquiry-item__top\">\n        {inquiryTypeLabel && <p>{`문의유형 -  ${inquiryTypeLabel}`}</p>}\n        <p>{memberId}</p>\n        <p className=\"inquiry-item__date\">{registerDate}</p>\n      </div>\n      <div className=\"inquiry-item__bottom\">\n        <FoldingImagesByOneRow\n          isActive={isActive}\n          images={images.map(({ imageUrl, originFileName }) => ({\n            src: imageUrl,\n            name: originFileName,\n          }))}\n        />\n        <div className=\"inquiry-item__content\">\n          <div className=\"inquiry-item__info\">\n            <p className={`inquiry-item__status-label inquiry-item__status-label--${inquiryStatusModifier}`}>\n              {inquiryStatusLabel}\n            </p>\n            <VisibleComponent shows={isSecreted} TruthyComponent={<Icon name=\"lock\" />} />\n            <VisibleComponent\n              shows={isSecreted && !isMine}\n              TruthyComponent={'비밀글입니다.'}\n              FalsyComponent={<p className=\"inquiry-item__title\">{title}</p>}\n            />\n            <VisibleComponent\n              shows={!(isSecreted && !isMine)}\n              TruthyComponent={\n                <AngleTopDown className=\"inquiry-item__angle-top-down\" onToggle={() => setIsActive((prev) => !prev)} />\n              }\n            />\n          </div>\n          <div className=\"inquiry-item__text inquiry-item__text--question\">\n            <Icon name=\"q\" />\n\n            <div className=\"inquiry-item__qna-text editor\">\n              <Sanitized html={content} />\n            </div>\n          </div>\n\n          <VisibleComponent\n            shows={_canModify}\n            TruthyComponent={\n              <div className=\"board-form__buttons--small\">\n                <Button label=\"수정\" onClick={handleModifyButtonClick} />\n                <Button label=\"삭제\" onClick={handleDeleteButtonClick} />\n              </div>\n            }\n          />\n\n          <VisibleComponent\n            shows={answers.length > 0}\n            TruthyComponent={answers.map(({ no, content, registerYmdt }, index) => (\n              <div key={`${no}-${index}`} className={'inquiry-item__text inquiry-item__text--answer'}>\n                <Icon name=\"a\" />\n\n                <div className=\"inquiry-item__qna-text\">\n                  <Sanitized html={content} />\n                  <span className=\"inquiry-item__date\">답변일 : {registerYmdt}</span>\n                </div>\n              </div>\n            ))}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nInquiryItem.propTypes = {\n  onModify: func.isRequired,\n  onDelete: func.isRequired,\n  memberId: string,\n  inquiryTypeLabel: string,\n  isReplied: bool,\n  title: string,\n  content: string,\n  registerDate: string,\n  images: arrayOf(\n    shape({\n      imageUrl: string,\n      originFileName: string,\n    })\n  ),\n  isMine: bool,\n  isSecreted: bool,\n  canModify: bool,\n  answers: arrayOf(\n    shape({\n      no: number,\n      content: string,\n      registerYmdt: string,\n    })\n  ),\n  canAttach: bool,\n};\n\nexport default InquiryItem;\n","export { default as BoardFormRegistration } from './BoardFormRegistration';\nexport { default as BoardFormModification } from './BoardFormModification';\nexport { default as InquiryItem } from './InquiryItem';\n","import { useMemo } from 'react';\n\nimport { bool, string, arrayOf, shape } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\n\nconst FoldingImagesByOneRow = ({ className = '', isActive = false, images = [] }) => {\n  const imageCount = useMemo(() => images.length, [images]);\n\n  const displayImages = useMemo(() => (isActive ? images : [images?.at(0) ?? '']), [images, isActive]) ?? [];\n\n  return (\n    <VisibleComponent\n      shows={images.length > 0}\n      TruthyComponent={\n        <div className={`folding-images-by-one-row ${isActive ? 'is-active' : ''} ${className}`}>\n          <ul className=\"folding-images-by-one-row__image-list\">\n            {displayImages.map(({ src, name }, index) => (\n              <li key={`${name}_${index}`}>\n                <img src={src} alt={name} />\n              </li>\n            ))}\n          </ul>\n          <span className=\"folding-images-by-one-row__image-count\">{imageCount}</span>\n        </div>\n      }\n    />\n  );\n};\n\nFoldingImagesByOneRow.propTypes = {\n  className: string,\n  isActive: bool,\n  images: arrayOf(\n    shape({\n      src: string,\n      name: string,\n    })\n  ),\n};\n\nexport default FoldingImagesByOneRow;\n","import FoldingImagesByOneRow from './FoldingImagesByOneRow';\n\nexport default FoldingImagesByOneRow;\n","import { forwardRef } from 'react';\n\nimport { func, arrayOf, shape, number, string } from 'prop-types';\n\nimport { useImageFileActionContext } from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst ImageFileUpload = forwardRef(\n  (\n    {\n      images = [],\n      limitCount = Infinity,\n      limitFileSizeInMB = Infinity,\n      verifyImageFiles,\n      onChange,\n      accept = 'image/png,image/jpeg,image/gif,image/jpg,image/bmp',\n    },\n    ref\n  ) => {\n    const { postImages } = useImageFileActionContext();\n    const { catchError } = useErrorBoundaryActionContext();\n\n    const handleInputChange = async (event) => {\n      try {\n        const { files } = event.target;\n\n        verifyImageFiles?.(files);\n\n        const { data } = await postImages({\n          files,\n          images,\n          limitFileSizeInMegaBytes: limitFileSizeInMB,\n          limitCount,\n        });\n\n        const fulfilledImages = data.filter(({ status }) => status === 'fulfilled').map(({ value }) => value);\n\n        onChange?.(fulfilledImages);\n\n        ref.current.value = '';\n      } catch (e) {\n        catchError(e);\n      }\n    };\n\n    return <input hidden ref={ref} type=\"file\" multiple accept={accept} onChange={handleInputChange} />;\n  }\n);\n\nImageFileUpload.displayName = 'ImageFileUpload';\n\nexport default ImageFileUpload;\n\nImageFileUpload.propTypes = {\n  images: arrayOf(\n    shape({\n      imageUrl: string,\n      originName: string,\n    })\n  ),\n  onChange: func,\n  verifyImageFiles: func,\n  limitCount: number,\n  limitFileSizeInMB: number,\n  accept: string,\n};\n","import ImageFileUpload from './ImageFileUpload';\n\nexport default ImageFileUpload;\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","export const BOARD_IMAGE = {\n  THUMB_NAIL_SIZE: '100x100',\n};\n\nexport const REVIEW_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n\nexport const PERSONAL_INQUIRY_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n","export const RATING_STAR = {\n  LIMIT_SCORE: 5,\n};\n"],"names":[],"sourceRoot":""}