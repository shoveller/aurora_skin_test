{"version":3,"file":"src_pages_MemberModification_index_js.e67a029245bbd073867c.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;AAEA;AAEA;AAQA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AADA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AATA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC3GA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAYA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrDA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAUA;AAEA;AAEA;;;;;;;;;;;;;;;;ACrDA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AADA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AAEA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLA;AAAA;AAAA;AADA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAjBA;AAAA;AAAA;AAmBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAMA;AAEA;AAEA;;;;;;;;;;;;;;;;AC1FA;AAEA;AACA;AAAA;AAEA;AAGA;AAFA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;;AAEA;AAEA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACzMA;AAEA;AAQA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;ACrFA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/CheckMemberPassword/CheckMemberPassword.jsx","webpack://@shopby/react-skin/./src/components/CheckMemberPassword/index.js","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/components/Timer/Timer.jsx","webpack://@shopby/react-skin/./src/components/Timer/index.js","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModification.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationAddressForm.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationEmailForm.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationForm.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationReceiveAgreement.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationSmsForm.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/MemberModificationTermsForm.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/ValidationStatus.jsx","webpack://@shopby/react-skin/./src/pages/MemberModification/index.js"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { func } from 'prop-types';\n\nimport {\n  Button,\n  useCheckMemberPasswordStateContext,\n  useCheckMemberPasswordActionContext,\n  useAuthStateContext,\n  TextField,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst CheckMemberPassword = ({ onAuthenticationBtnClick }) => {\n  const { updateCheckPasswordMemberInfo, checkPassword } = useCheckMemberPasswordActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const {\n    checkPasswordMemberInfo: { memberId, password },\n  } = useCheckMemberPasswordStateContext();\n\n  const { profile } = useAuthStateContext();\n\n  const handlePasswordChange = ({ currentTarget: { value } }) => {\n    updateCheckPasswordMemberInfo({ password: value });\n  };\n\n  const handlePasswordKeyDown = async (e) => {\n    try {\n      if (e.key === 'Enter') {\n        await checkPassword(password);\n        onAuthenticationBtnClick();\n      }\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const checkPasswordBtnClick = async (password) => {\n    try {\n      await checkPassword(password);\n      onAuthenticationBtnClick();\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    updateCheckPasswordMemberInfo({ memberId: profile?.memberId });\n  }, [profile]);\n\n  return (\n    <div className=\"password-authentication\">\n      <p className=\"password-authentication__info-text\">\n        회원님의 정보를 안전하게 보호하기 위해 <br />\n        다시 한 번 입력해 주세요.\n      </p>\n      <div className=\"password-authentication-form\">\n        <div className=\"password-authentication-form__item\">\n          <label htmlFor=\"mobileNo\" className=\"password-authentication-form__tit\">\n            아이디\n          </label>\n          <div className=\"password-authentication-form__input-wrap\">\n            <TextField name=\"memberId\" placeholder=\"아이디\" value={memberId} disabled={true} />\n          </div>\n        </div>\n        <div className=\"password-authentication-form__item\">\n          <label htmlFor=\"mobileNo\" className=\"password-authentication-form__tit\">\n            비밀번호\n          </label>\n          <div className=\"password-authentication-form__input-wrap\">\n            <TextField\n              name=\"password\"\n              placeholder=\"비밀번호\"\n              onChange={handlePasswordChange}\n              value={password}\n              type=\"password\"\n              valid=\"NO_SPACE\"\n              onKeyDown={handlePasswordKeyDown}\n            />\n          </div>\n        </div>\n\n        <div className=\"password-authentication__button-wrap\">\n          <Button\n            label=\"취소\"\n            onClick={() => {\n              location.href = `/my-page`;\n            }}\n          />\n          <Button\n            label=\"인증하기\"\n            onClick={() => {\n              checkPasswordBtnClick(password);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckMemberPassword;\n\nCheckMemberPassword.propTypes = {\n  onAuthenticationBtnClick: func,\n};\n","import CheckMemberPassword from './CheckMemberPassword';\n\nexport default CheckMemberPassword;\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","import { useState, useEffect } from 'react';\n\nimport { number, func } from 'prop-types';\n\nconst Timer = ({ seconds, onTimeOutAction }) => {\n  const [time, setTime] = useState({ minutes: Math.floor(seconds / 60), seconds: seconds % 60 });\n  const [isTimeOut, setIsTimeOut] = useState(false);\n\n  useEffect(() => {\n    setIsTimeOut(false);\n    const intervalId = setInterval(() => {\n      setTime((prevTime) => {\n        const newSeconds = prevTime.seconds - 1;\n        const newMinutes = prevTime.minutes + Math.floor(newSeconds / 60);\n        if (newSeconds < 0 && newMinutes < 0) {\n          clearInterval(intervalId);\n          setIsTimeOut(true);\n          onTimeOutAction();\n\n          return { minutes: 0, seconds: 0 };\n        }\n\n        return {\n          minutes: newMinutes,\n          seconds: newSeconds < 0 ? 59 : newSeconds,\n        };\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [seconds]);\n\n  return (\n    <div className=\"timer\">\n      <span className=\"count-down\">\n        유효시간{' '}\n        {!isTimeOut ? (\n          <span>\n            {time.minutes.toString().padStart(2, '0')}:{time.seconds.toString().padStart(2, '0')}\n          </span>\n        ) : (\n          <span>시간초과</span>\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default Timer;\n\nTimer.propTypes = {\n  seconds: number,\n  onTimeOutAction: func,\n};\n","import Timer from './Timer';\n\nexport default Timer;\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  MemberModificationProvider,\n  IdentificationVerificationProvider,\n  AgeVerificationProvider,\n  CheckMemberPasswordProvider,\n} from '@shopby/react-components';\n\nimport CheckMemberPassword from '../../components/CheckMemberPassword';\nimport FullModal from '../../components/FullModal';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport MemberModificationForm from './MemberModificationForm';\n\nconst MemberModification = () => {\n  const { t } = useTranslation('title');\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    title: t('memberModification'),\n  });\n  const [isPasswordCheckModalOpen, setIsPasswordCheckModalOpen] = useState(true);\n\n  return (\n    <MemberModificationProvider>\n      <IdentificationVerificationProvider>\n        <AgeVerificationProvider>\n          <CheckMemberPasswordProvider>\n            {isPasswordCheckModalOpen && (\n              <FullModal\n                title={t('memberModification')}\n                onClose={() => {\n                  location.href = 'my-page';\n                }}\n              >\n                <CheckMemberPassword\n                  onAuthenticationBtnClick={() => {\n                    setIsPasswordCheckModalOpen(false);\n                  }}\n                />\n              </FullModal>\n            )}\n            <MemberModificationForm />\n          </CheckMemberPasswordProvider>\n        </AgeVerificationProvider>\n      </IdentificationVerificationProvider>\n    </MemberModificationProvider>\n  );\n};\n\nexport default MemberModification;\n\nMemberModification.propTypes = {};\n","import { useMemberModificationStateContext, useMemberModificationActionContext } from '@shopby/react-components';\n\nimport AddressForm from '../../components/AddressForm';\n\nconst MemberModificationAddressForm = () => {\n  const { updateMemberModificationInfo } = useMemberModificationActionContext();\n\n  const {\n    memberModificationInfo: { zipCd: zipCode, address: roadAddress, detailAddress: addressDetail },\n  } = useMemberModificationStateContext();\n\n  const handleAddressItemClick = ({ zipCode, roadAddress, jibunAddress }) => {\n    updateMemberModificationInfo({\n      zipCd: zipCode,\n      address: roadAddress,\n      jibunAddress,\n    });\n  };\n\n  const handleAddressDetailChange = ({ addressDetail }) => {\n    updateMemberModificationInfo({ detailAddress: addressDetail });\n  };\n\n  return (\n    <div className=\"member-modification-form__item\">\n      <label htmlFor=\"address\" className=\"member-modification-form__tit\">\n        주소찾기\n      </label>\n      <AddressForm\n        zipCode={zipCode}\n        address={roadAddress}\n        addressDetail={addressDetail}\n        onAddressItemClick={handleAddressItemClick}\n        onAddressDetailChange={handleAddressDetailChange}\n      />\n    </div>\n  );\n};\n\nexport default MemberModificationAddressForm;\n\nMemberModificationAddressForm.propTypes = {};\n","/* eslint-disable complexity */\nimport { useMemo, useRef, useState } from 'react';\n\nimport {\n  Button,\n  useMemberModificationStateContext,\n  useMemberModificationActionContext,\n  EmailInput,\n  SelectBox,\n  useMallStateContext,\n  TextField,\n} from '@shopby/react-components';\n\nimport Timer from '../../components/Timer/Timer';\nimport { EMAIL_DOMAIN_OPTIONS } from '../../constants/form';\n\nimport ValidationStatus from './ValidationStatus';\n\nconst MemberModificationEmailForm = () => {\n  const {\n    updateNewEmail,\n    updateCertificatedNumber,\n    verifyExistEmail,\n    confirmAuthenticationEmail,\n    updateIsAuthenticationReSend,\n    updateValidationStatus,\n    validateEmail,\n  } = useMemberModificationActionContext();\n  const {\n    newEmail,\n    certificatedNumber,\n    authenticationsRemainTimeBySeconds,\n    isAuthenticationReSend,\n    authenticateEmail,\n  } = useMemberModificationStateContext();\n  const { mallJoinConfig } = useMallStateContext();\n\n  const emailSeparation = useMemo(() => newEmail.split('@'), [newEmail]);\n  const emailId = [emailSeparation[0]];\n  const emailDomain = [emailSeparation[1]];\n  const emailRef = useRef(null);\n  const [domainSelectorValue, setDomainSelectorValue] = useState('');\n\n  const handleEmailIdInputChange = ({ currentTarget: { value } }) => {\n    updateNewEmail(`${value}@${emailDomain}`);\n  };\n  const handleEmailDomainInputChange = ({ currentTarget: { value } }) => {\n    updateNewEmail(`${emailId}@${value}`);\n    setDomainSelectorValue('');\n  };\n  const handleEmailDomainSelect = ({ currentTarget: { value } }) => {\n    updateNewEmail(`${emailId}@${value}`);\n    setDomainSelectorValue(value);\n\n    if (!validateEmail()) {\n      return;\n    }\n\n    verifyExistEmail(newEmail);\n  };\n\n  const handleCertificatedNumber = ({ currentTarget: { value } }) => {\n    updateCertificatedNumber(value);\n  };\n\n  const handleDomainBlur = () => {\n    if (!validateEmail()) {\n      return;\n    }\n\n    verifyExistEmail(newEmail);\n  };\n\n  const handleAuthenticateEmail = () => {\n    if (!validateEmail()) {\n      return;\n    }\n    if (!ValidationStatus.email.result) {\n      return;\n    }\n    authenticateEmail(newEmail);\n  };\n\n  const isEmailAuthentication = useMemo(() => {\n    if (mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_EMAIL' && authenticationsRemainTimeBySeconds) {\n      return true;\n    }\n\n    return false;\n  }, [mallJoinConfig, authenticationsRemainTimeBySeconds]);\n\n  const isEmailType = useMemo(() => {\n    if (mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_EMAIL') {\n      return true;\n    }\n\n    return false;\n  }, [mallJoinConfig]);\n\n  return (\n    <>\n      <div className=\"member-modification-form__item\">\n        <label htmlFor=\"emailId\" className=\"member-modification-form__tit\">\n          이메일\n        </label>\n        <div className=\"member-modification-form__input-wrap\">\n          <EmailInput\n            ref={emailRef}\n            id={emailId}\n            domain={emailDomain}\n            onIdChange={handleEmailIdInputChange}\n            onDomainChange={handleEmailDomainInputChange}\n            onDomainBlur={handleDomainBlur}\n            idDisabled={isEmailType && isAuthenticationReSend}\n            domainDisabled={isEmailType && isAuthenticationReSend}\n          />\n          <SelectBox\n            hasEmptyOption={true}\n            emptyOptionLabel=\"직접 입력\"\n            value={domainSelectorValue}\n            onSelect={handleEmailDomainSelect}\n            options={EMAIL_DOMAIN_OPTIONS}\n            disabled={isEmailType && isAuthenticationReSend}\n          />\n        </div>\n        {mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_EMAIL' && (\n          <Button\n            className=\"member-modification-form__btn--certificate\"\n            label={isAuthenticationReSend ? `재인증` : `인증번호 발송`}\n            onClick={() => {\n              isAuthenticationReSend ? updateIsAuthenticationReSend(false) : handleAuthenticateEmail();\n            }}\n          />\n        )}\n        <ValidationStatus name=\"email\" />\n      </div>\n      {isEmailAuthentication && (\n        <div className=\"member-modification-form__item\">\n          <label htmlFor=\"certificatedNumber\" className=\"member-modification-form__tit\">\n            인증번호\n          </label>\n          <div className=\"member-modification-form__input-wrap\">\n            <TextField\n              name=\"certificatedNumber\"\n              id=\"certificatedNumber\"\n              value={certificatedNumber}\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleCertificatedNumber}\n              maxLength={6}\n              valid=\"NO_SPACE\"\n            />\n          </div>\n          <Button\n            className=\"member-modification-form__btn--certificate\"\n            label={'확인'}\n            onClick={() => {\n              confirmAuthenticationEmail(certificatedNumber);\n            }}\n          />\n          <Timer\n            seconds={authenticationsRemainTimeBySeconds}\n            onTimeOutAction={() => {\n              updateValidationStatus((prev) => ({\n                ...prev,\n                certificatedNumber: {\n                  result: false,\n                  message: '유효시간이 초과되었습니다. 다시 [인증번호 발송] 클릭하여 발급된 인증번호를 입력해주세요.',\n                },\n              }));\n            }}\n          />\n          <ValidationStatus name=\"certificatedNumber\" />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MemberModificationEmailForm;\n","import { useEffect } from 'react';\n\nimport {\n  Button,\n  useMemberModificationStateContext,\n  useMemberModificationActionContext,\n  useMallStateContext,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../components/ErrorBoundary';\n\nimport MemberModificationAddressForm from './MemberModificationAddressForm';\nimport MemberModificationEmailForm from './MemberModificationEmailForm';\nimport MemberModificationReceiveAgreement from './MemberModificationReceiveAgreement';\nimport MemberModificationSmsForm from './MemberModificationSmsForm';\nimport MemberModificationTermsForm from './MemberModificationTermsForm';\n\nconst MemberModificationForm = () => {\n  const { fetchProfile, modifyProfile, validateTerms, validateKey, updateIsAuthenticationReSend } =\n    useMemberModificationActionContext();\n\n  const { memberModificationInfo } = useMemberModificationStateContext();\n  const { mallJoinConfig } = useMallStateContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const handleModifyBtnClick = async () => {\n    if (!validateKey()) {\n      return;\n    }\n    if (!validateTerms()) {\n      return;\n    }\n\n    try {\n      const modifyResult = await modifyProfile();\n\n      if (modifyResult) {\n        location.href = '/my-page';\n      }\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  useEffect(() => {\n    if (mallJoinConfig.authenticationType !== 'NOT_USED') {\n      updateIsAuthenticationReSend(true);\n    }\n  }, [mallJoinConfig]);\n\n  return (\n    <div className=\"member-modification\">\n      <div className=\"member-modification-name\">\n        <p>\n          {memberModificationInfo.memberName}\n          <span>\n            ({memberModificationInfo.providerType ? memberModificationInfo.providerType : '쇼핑몰'} 아이디 회원)\n          </span>\n        </p>\n      </div>\n      <section className=\"l-panel\">\n        <div className=\"member-modification-form\">\n          <MemberModificationEmailForm />\n          <MemberModificationSmsForm />\n          <MemberModificationAddressForm />\n        </div>\n      </section>\n      <section className=\"l-panel\">\n        <div className=\"member-modification-form\">\n          <MemberModificationReceiveAgreement />\n        </div>\n      </section>\n      <section className=\"l-panel\">\n        <div className=\"member-modification-form\">\n          <MemberModificationTermsForm />\n          <div className=\"member-modification-form__button-wrap\">\n            <Button label=\"정보 수정\" onClick={handleModifyBtnClick} />\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default MemberModificationForm;\n\nMemberModificationForm.propTypes = {};\n","import { useMemberModificationStateContext, useMemberModificationActionContext, Radio } from '@shopby/react-components';\n\nconst MemberModificationReceiveAgreement = () => {\n  const { updateMemberModificationInfo } = useMemberModificationActionContext();\n\n  const {\n    memberModificationInfo: { smsAgreed, directMailAgreed },\n    receiveAgreementInfo: { smsAgreeYmdt, directMailAgreeYmdt, directMailDisagreeYmdt, smsDisagreeYmdt },\n  } = useMemberModificationStateContext();\n\n  const handleSmsAgreedChange = (boolean) => {\n    updateMemberModificationInfo({ smsAgreed: boolean });\n  };\n  const handleDirectMailAgreedChange = (boolean) => {\n    updateMemberModificationInfo({ directMailAgreed: boolean });\n  };\n\n  return (\n    <>\n      <div className=\"member-modification-form__item member-modification-form__radio-field\">\n        <div className=\"radio-field__content\">\n          <label htmlFor=\"email\" className=\"member-modification-form__tit\">\n            SMS 수신\n          </label>\n          <div className=\"member-modification-form__input-wrap\">\n            <Radio\n              label=\"수신동의\"\n              checked={smsAgreed}\n              onChange={() => {\n                handleSmsAgreedChange(true);\n              }}\n            />\n            <Radio\n              label=\"동의안함\"\n              checked={!smsAgreed}\n              onChange={() => {\n                handleSmsAgreedChange(false);\n              }}\n            />\n          </div>\n        </div>\n\n        {smsAgreeYmdt && <p className=\"receive-agreement-time\">수신동의하신 시간 : {smsAgreeYmdt}</p>}\n        {smsDisagreeYmdt && <p className=\"receive-agreement-time\">수신거부하신 시간 : {smsDisagreeYmdt}</p>}\n        <span className=\"member-modification-form__description\">* 상품/이벤트 정보 수신동의</span>\n      </div>\n      <div className=\"member-modification-form__item member-modification-form__radio-field\">\n        <div className=\"radio-field__content\">\n          <label htmlFor=\"email\" className=\"member-modification-form__tit\">\n            E-Mail 수신\n          </label>\n          <div className=\"member-modification-form__input-wrap\">\n            <Radio\n              label=\"수신동의\"\n              checked={directMailAgreed}\n              onChange={() => {\n                handleDirectMailAgreedChange(true);\n              }}\n            />\n            <Radio\n              label=\"동의안함\"\n              checked={!directMailAgreed}\n              onChange={() => {\n                handleDirectMailAgreedChange(false);\n              }}\n            />\n          </div>\n        </div>\n        {directMailAgreeYmdt && <p className=\"receive-agreement-time\">수신동의하신 시간 : {directMailAgreeYmdt}</p>}\n        {directMailDisagreeYmdt && (\n          <p className=\"receive-agreement-time\">수신거부하신 시간 : {directMailDisagreeYmdt}</p>\n        )}\n        <span className=\"member-modification-form__description\">* 상품/이벤트 정보 수신동의</span>\n      </div>\n    </>\n  );\n};\n\nexport default MemberModificationReceiveAgreement;\n","/* eslint-disable complexity */\n\nimport { useEffect, useMemo } from 'react';\n\nimport {\n  TextField,\n  Button,\n  useMemberModificationStateContext,\n  useMemberModificationActionContext,\n  useIdentificationVerificationStateContext,\n  PhoneNumberInput,\n  useMallStateContext,\n} from '@shopby/react-components';\n\nimport IdentificationVerificationBtn from '../../components/IdentificationVerificationBtn/IdentificationVerificationBtn';\nimport Timer from '../../components/Timer';\n\nimport ValidationStatus from './ValidationStatus';\n\nconst MemberModificationSmsForm = () => {\n  const {\n    updateNewMobileNo,\n    updateCertificatedNumber,\n    authenticateMobile,\n    confirmAuthenticationMobileNo,\n    updateIsAuthenticationReSend,\n    updateValidationStatus,\n    updateCarrierNumber,\n    updateFirstSerial,\n    updateSecondSerial,\n    validateMobile,\n  } = useMemberModificationActionContext();\n\n  const {\n    newMobileNo,\n    carrierNumber,\n    firstSerial,\n    secondSerial,\n    certificatedNumber,\n    authenticationsRemainTimeBySeconds,\n    isAuthenticationReSend,\n  } = useMemberModificationStateContext();\n  const { isIdentificationVerificationReSend, isCiExist } = useIdentificationVerificationStateContext();\n  const { mallJoinConfig } = useMallStateContext();\n\n  const identificationBtnLabel = isIdentificationVerificationReSend ? '재인증' : '휴대폰 본인인증';\n  const authenticationBtnLabel = isAuthenticationReSend ? `재인증` : `인증번호 발송`;\n\n  const handlePhoneCarrierNumberSelect = ({ currentTarget: { value } }) => {\n    updateCarrierNumber(value);\n    updateNewMobileNo(`${value}${firstSerial}${secondSerial}`);\n  };\n\n  const handlePhoneFirstSerialNumberChange = ({ currentTarget: { value } }) => {\n    updateFirstSerial(value);\n    updateNewMobileNo(`${carrierNumber}${value}${secondSerial}`);\n  };\n\n  const handlePhoneSecondSerialNumberChange = ({ currentTarget: { value } }) => {\n    updateSecondSerial(value);\n    updateNewMobileNo(`${carrierNumber}${firstSerial}${value}`);\n  };\n\n  const handleCertificatedNumber = ({ currentTarget: { value } }) => {\n    updateCertificatedNumber(value);\n  };\n\n  const handleOnSecondSerialBlur = () => {\n    validateMobile();\n  };\n\n  const handleSetNewPhoneNumber = (newNumber) => {\n    updateNewMobileNo(newNumber);\n    updateCarrierNumber(newNumber.slice(0, 3));\n    updateFirstSerial(newNumber.slice(3, 7));\n    updateSecondSerial(newNumber.slice(7));\n  };\n\n  const handleAuthenticateMobile = (newMobileNo) => {\n    // 회원 정보 수정에서 사용 안됨\n    if (!validateMobile()) {\n      return;\n    }\n    authenticateMobile(newMobileNo);\n  };\n\n  useEffect(() => {\n    updateValidationStatus((prev) => ({\n      ...prev,\n      mobileNo: isCiExist\n        ? { result: false, message: '휴대폰 번호가 이미 사용중입니다.' }\n        : { result: true, message: '' },\n    }));\n  }, [isCiExist]);\n\n  const isSmsAuthentication = useMemo(() => {\n    if (mallJoinConfig.authenticationType === 'SMS_AUTHENTICATION' && authenticationsRemainTimeBySeconds) {\n      return true;\n    }\n\n    return false;\n  }, [mallJoinConfig, authenticationsRemainTimeBySeconds]);\n\n  const isMobileType = useMemo(() => {\n    if (\n      mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_PHONE' ||\n      mallJoinConfig.authenticationType === 'SMS_AUTHENTICATION'\n    ) {\n      return true;\n    }\n\n    return false;\n  }, [mallJoinConfig]);\n\n  return (\n    <>\n      <div className=\"member-modification-form__item\">\n        <label htmlFor=\"mobileNo\" className=\"member-modification-form__tit\">\n          휴대폰번호\n        </label>\n        <div className=\"member-modification-form__input-wrap\">\n          <PhoneNumberInput\n            name=\"mobileNo\"\n            id=\"mobileNo\"\n            carrierNumber={carrierNumber}\n            firstSerial={firstSerial}\n            secondSerial={secondSerial}\n            onCarrierNumberSelect={handlePhoneCarrierNumberSelect}\n            onFirstSerialChange={handlePhoneFirstSerialNumberChange}\n            onSecondSerialChange={handlePhoneSecondSerialNumberChange}\n            onSecondSerialBlur={handleOnSecondSerialBlur}\n            carrierNumberDisabled={isMobileType && isAuthenticationReSend}\n            firstSerialDisabled={isMobileType && isAuthenticationReSend}\n            secondSerialDisabled={isMobileType && isAuthenticationReSend}\n          />\n        </div>\n        {mallJoinConfig.authenticationType === 'SMS_AUTHENTICATION' && (\n          <Button\n            className=\"member-modification-form__btn--certificate\"\n            label={authenticationBtnLabel}\n            onClick={() => {\n              isAuthenticationReSend ? updateIsAuthenticationReSend(false) : handleAuthenticateMobile(newMobileNo);\n            }}\n          />\n        )}\n        {mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_PHONE' && (\n          <>\n            <IdentificationVerificationBtn\n              className=\"member-modification-form__btn--certificate\"\n              label={identificationBtnLabel}\n              type=\"memberModify\"\n              onSetNewPhoneNumber={handleSetNewPhoneNumber}\n            />\n            <ValidationStatus name=\"certificatedNumber\" />\n          </>\n        )}\n        <ValidationStatus name=\"mobileNo\" />\n      </div>\n\n      {isSmsAuthentication && (\n        <div className=\"member-modification-form__item\">\n          <label htmlFor=\"certificatedNumber\" className=\"member-modification-form__tit\">\n            인증번호\n          </label>\n          <div className=\"member-modification-form__input-wrap\">\n            <TextField\n              name=\"certificatedNumber\"\n              id=\"certificatedNumber\"\n              value={certificatedNumber}\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleCertificatedNumber}\n              maxLength={6}\n              valid=\"NO_SPACE\"\n            />\n          </div>\n          <Button\n            className=\"member-modification-form__btn--certificate\"\n            label={'확인'}\n            onClick={() => {\n              confirmAuthenticationMobileNo(certificatedNumber);\n            }}\n          />\n          <Timer\n            seconds={authenticationsRemainTimeBySeconds}\n            onTimeOutAction={() => {\n              updateValidationStatus((prev) => ({\n                ...prev,\n                certificatedNumber: {\n                  result: false,\n                  message: '유효시간이 초과되었습니다. 다시 [인증번호 발송] 클릭하여 발급된 인증번호를 입력해주세요.',\n                },\n              }));\n            }}\n          />\n          <ValidationStatus name=\"certificatedNumber\" />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MemberModificationSmsForm;\n","import { useEffect } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  useMemberModificationActionContext,\n  useMemberModificationStateContext,\n  useAuthStateContext,\n} from '@shopby/react-components';\n\nimport FullModal from '../../components/FullModal';\nimport Sanitized from '../../components/Sanitized';\n\nconst MemberModificationTermsForm = () => {\n  const { profile } = useAuthStateContext();\n  const { getTerms, checkSingle, updateTermsInfo, updateIsTermsContentFullModalOpen, updateTermStatus } =\n    useMemberModificationActionContext();\n  const { termStatus, termsInfo, isTermsContentFullModalOpen } = useMemberModificationStateContext();\n\n  const initialTermStatus = [\n    { id: 'use', label: '[필수] 이용약관', checked: true, require: true, termsType: 'USE' },\n    {\n      id: 'pi',\n      label: '[필수] 개인정보 수집 / 이용동의',\n      checked: true,\n      require: true,\n      termsType: 'PI_COLLECTION_AND_USE_REQUIRED',\n    },\n    { id: 'age', label: '[필수] 만 14세 이상입니다', checked: true, require: true },\n  ];\n\n  const handleCheckSingle = (isChecked, label) => {\n    checkSingle({ isChecked, label });\n  };\n\n  const handleGetTerms = ({ termsTypes, title }) => {\n    getTerms({ termsTypes });\n    updateTermsInfo({ title });\n  };\n\n  useEffect(() => {\n    updateTermStatus(initialTermStatus);\n  }, [profile]);\n\n  return (\n    <div className=\"member-modification-form__item\">\n      <p className=\"member-modification-form__tit\">약관동의 현황</p>\n\n      <div className=\"member-modification-form__agree-wrap\">\n        <ul className=\"member-modification-form__agree-list\">\n          {termStatus?.map((item, idx) => (\n            <li key={idx}>\n              <div className=\"member-modification-form__checkbox--check-single\">\n                <Checkbox\n                  label={item.label}\n                  checked={item.checked}\n                  onChange={() => handleCheckSingle(item.checked, item.label)}\n                />\n                {item.termsType && (\n                  <Button\n                    label=\"보기\"\n                    onClick={() => {\n                      handleGetTerms({ termsTypes: item.termsType, title: item.label });\n                    }}\n                  />\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n\n        {isTermsContentFullModalOpen && (\n          <FullModal\n            className=\"agreement\"\n            title={termsInfo.title}\n            onClose={() => updateIsTermsContentFullModalOpen(false)}\n          >\n            <Sanitized html={termsInfo.contents} />\n          </FullModal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MemberModificationTermsForm;\n","import { string } from 'prop-types';\n\nimport { useMemberModificationStateContext } from '@shopby/react-components';\n\nconst ValidationStatus = ({ name }) => {\n  const { validationStatus } = useMemberModificationStateContext();\n\n  return (\n    <p className={`description ${validationStatus[name]?.message && validationStatus[name]?.result ? '' : 'alert'}`}>\n      {validationStatus[name]?.message}\n    </p>\n  );\n};\n\nexport default ValidationStatus;\nValidationStatus.propTypes = {\n  name: string,\n};\n","import MemberModification from './MemberModification';\n\nexport default MemberModification;\n"],"names":[],"sourceRoot":""}