{"version":3,"file":"src_pages_Notice_index_js.e98fe4f0bdcd35601a65.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;ACFA;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;ACAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAEA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AAAA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AAEA;AAEA;AAQA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACnHA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/GoToList/GoToList.jsx","webpack://@shopby/react-skin/./src/components/GoToList/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/constants/board.js","webpack://@shopby/react-skin/./src/constants/common.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/Notice/Notice.jsx","webpack://@shopby/react-skin/./src/pages/Notice/NoticeDetailModal.jsx","webpack://@shopby/react-skin/./src/pages/Notice/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { string, func, bool } from 'prop-types';\n\nimport { Button, IconSVG } from '@shopby/react-components';\n\nconst GoToList = ({ title, onClick, disabled }) => {\n  const handleButtonClick = () => {\n    if (disabled) return;\n\n    onClick?.();\n  };\n\n  return (\n    <Button\n      className={`go-to-list ${disabled && 'go-to-list--disabled'}`}\n      onClick={handleButtonClick}\n      disabled={disabled}\n    >\n      <p className=\"go-to-list__title\">{title}</p>\n      <span className=\"go-to-list__angle-r\">\n        <IconSVG name=\"angle-r\" fill=\"transparent\" stroke=\"#3f434c\" strokeWidth={8} />\n      </span>\n    </Button>\n  );\n};\n\nexport default GoToList;\n\nGoToList.propTypes = {\n  title: string,\n  onClick: func,\n  disabled: bool,\n};\n","import GoToList from './GoToList';\n\nexport default GoToList;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","export const NOTICE_BOARD_ID = 'notice';\n","export const INFINITY_SCROLL_PAGE_SIZE = 6;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useEffect, useState } from 'react';\n\nimport { number } from 'prop-types';\n\nimport {\n  ArticleProvider,\n  useArticleStateContext,\n  useArticleActionContext,\n  useMallStateContext,\n  VisibleComponent,\n  useInfiniteScroll,\n  InfiniteScrollLoader,\n  Icon,\n} from '@shopby/react-components';\n\nimport ListSkeleton from '../../components/ListSkeleton/ListSkeleton';\nimport { NOTICE_BOARD_ID } from '../../constants/board';\nimport { INFINITY_SCROLL_PAGE_SIZE } from '../../constants/common';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport NoticeDetailModal from './NoticeDetailModal';\n\nconst EmptyNoticeContent = () => (\n  <div className=\"empty-list\">\n    <p>등록된 공지사항이 없습니다.</p>\n  </div>\n);\n\nconst LockedNotice = ({ articleNo }) => (\n  <li className=\"notice__list-item--locked\" key={articleNo}>\n    <Icon className=\"ico ico--lock\" name=\"lock\" />\n    <p>비밀글입니다.</p>\n  </li>\n);\n\nLockedNotice.propTypes = {\n  articleNo: number,\n};\n\nconst NoticeContent = () => {\n  const { fetchArticles } = useArticleActionContext();\n  const {\n    article: { totalCount },\n  } = useArticleStateContext();\n  const { mallName, boardsCategories } = useMallStateContext();\n  const notice = boardsCategories.find(({ boardId }) => boardId === NOTICE_BOARD_ID);\n\n  const [noticeNo, setNoticeNo] = useState(null);\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (requestOption) => {\n      const { data } = await fetchArticles(requestOption);\n\n      return data.items;\n    },\n    requestOption: {\n      pageNumber: 1,\n      pageSize: INFINITY_SCROLL_PAGE_SIZE,\n      boardNo: 'notice',\n    },\n  });\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  useEffect(() => {\n    fetchInitialItems({\n      requestOption: {\n        boardNo: 'notice',\n      },\n    });\n  }, []);\n\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    hasCartBtnOnHeader: true,\n    hasHomeBtnOnHeader: true,\n    title: notice?.boardName,\n  });\n\n  return (\n    <div className=\"notice\">\n      <div className=\"notice__title\">\n        <p>{mallName} 에서 알려드립니다.</p>\n      </div>\n      <VisibleComponent\n        shows={totalCount > 0}\n        TruthyComponent={\n          <>\n            <ul className=\"notice__list\">\n              {accumulativeItems.map((item) => (\n                <VisibleComponent\n                  key={item.articleNo}\n                  shows={item.secreted}\n                  TruthyComponent={<LockedNotice key={item.articleNo} articleNo={item.articleNo} />}\n                  FalsyComponent={\n                    <li key={item.articleNo}>\n                      <button\n                        className=\"notice__list-button\"\n                        onClick={() => {\n                          setNoticeNo(() => item.articleNo);\n                        }}\n                      >\n                        <div>\n                          <p className=\"notice__category-label\">{item.notice ? '[공지]' : ''}</p>\n                          <p className=\"notice__date\">{item.registerYmdt.split(' ').at(0)}</p>\n                        </div>\n                        <p className=\"notice__tit\">{item.title}</p>\n                      </button>\n                    </li>\n                  }\n                />\n              ))}\n            </ul>\n            <VisibleComponent\n              shows={accumulativeItems.length > 0}\n              TruthyComponent={\n                <InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />\n              }\n            />\n            <ListSkeleton isLoading={isLoading} />\n          </>\n        }\n        FalsyComponent={<EmptyNoticeContent />}\n      />\n\n      {noticeNo && (\n        <NoticeDetailModal\n          noticeNo={noticeNo}\n          onClose={() => {\n            setNoticeNo(null);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst Notice = () => (\n  <ArticleProvider>\n    <NoticeContent />\n  </ArticleProvider>\n);\n\nexport default Notice;\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { number, func } from 'prop-types';\n\nimport {\n  useArticleActionContext,\n  useArticleStateContext,\n  IconSVG,\n  VisibleComponent,\n  useMallStateContext,\n} from '@shopby/react-components';\n\nimport FullModal from '../../components/FullModal';\nimport GoToList from '../../components/GoToList';\nimport Sanitized from '../../components/Sanitized';\nimport { NOTICE_BOARD_ID } from '../../constants/board';\n\nconst NoticeDetailModal = ({ noticeNo: initialNoticeNo, onClose }) => {\n  const { fetchArticleDetailBy } = useArticleActionContext();\n  const {\n    articleDetail,\n    article: { items, totalCount },\n  } = useArticleStateContext();\n  const { boardsCategories } = useMallStateContext();\n\n  const [noticeNo, setNoticeNo] = useState(initialNoticeNo);\n  const [previousNotice, setPreviousNotice] = useState(null);\n  const [nextNotice, setNextNotice] = useState(null);\n\n  const notice = boardsCategories.find(({ boardId }) => boardId === NOTICE_BOARD_ID);\n  const noticesWithoutSecretArticles = useMemo(() => items.filter(({ secreted }) => !secreted), [items]);\n\n  useEffect(() => {\n    if (noticeNo > 0) {\n      fetchArticleDetailBy({ articleNo: noticeNo, boardNo: 'notice' });\n\n      const currentIndex = noticesWithoutSecretArticles.findIndex((item) => item.articleNo === noticeNo);\n\n      setPreviousNotice(() => {\n        if (currentIndex < totalCount - 1) {\n          return items[currentIndex + 1];\n        }\n\n        return null;\n      });\n\n      setNextNotice(() => {\n        if (currentIndex > 0) {\n          return items[currentIndex - 1];\n        }\n\n        return null;\n      });\n    }\n  }, [noticeNo]);\n\n  return (\n    <FullModal title={notice.boardName} onClose={onClose}>\n      <div className=\"notice-detail__title-box\">\n        <p className=\"notice-detail__title\">\n          <span>[공지]</span>\n          {articleDetail.title}\n        </p>\n        <p className=\"notice-detail__date\">{articleDetail.registerYmdt.split(' ').at(0)}</p>\n      </div>\n      <div className=\"notice-detail__content editor\">\n        <Sanitized html={articleDetail.content} />\n      </div>\n      <div>\n        <VisibleComponent\n          shows={nextNotice}\n          TruthyComponent={\n            <button\n              className=\"notice-detail__index notice-detail__index--next\"\n              onClick={() => {\n                nextNotice?.articleNo > 0 && setNoticeNo(nextNotice?.articleNo);\n              }}\n            >\n              <span className=\"notice-detail__index-angle\">\n                <IconSVG name=\"angle-r\" fill=\"transparent\" stroke=\"#3f434c\" strokeWidth={6} />\n              </span>\n              <p className=\"notice-detail__index-text-flag\">다음글</p>\n              <p className=\"notice-detail__index-title\">{nextNotice?.title}</p>\n            </button>\n          }\n        />\n        <VisibleComponent\n          shows={previousNotice}\n          TruthyComponent={\n            <button\n              className=\"notice-detail__index notice-detail__index--previous\"\n              onClick={() => {\n                previousNotice?.articleNo > 0 && setNoticeNo(previousNotice?.articleNo);\n              }}\n            >\n              <span className=\"notice-detail__index-angle\">\n                <IconSVG name=\"angle-r\" fill=\"transparent\" stroke=\"#3f434c\" strokeWidth={6} />\n              </span>\n              <p className=\"notice-detail__index-text-flag\">이전글</p>\n              <p className=\"notice-detail__index-title\">{previousNotice?.title}</p>\n            </button>\n          }\n        />\n        <GoToList onClick={onClose} title=\"목록보기\" />\n      </div>\n    </FullModal>\n  );\n};\n\nNoticeDetailModal.propTypes = {\n  noticeNo: number,\n  currentIndex: number,\n  onClose: func,\n};\n\nexport default NoticeDetailModal;\n","import Notice from './Notice';\n\nexport default Notice;\n"],"names":[],"sourceRoot":""}