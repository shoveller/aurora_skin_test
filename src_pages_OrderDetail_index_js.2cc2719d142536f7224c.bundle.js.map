{"version":3,"file":"src_pages_OrderDetail_index_js.2cc2719d142536f7224c.bundle.js","mappings":"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AA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzQA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAQA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAAA;AAIA;AAEA;AAAA;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;AC3NA;AAKA;AAEA;AAEA;;AAEA;AACA;;AAUA;AACA;AACA;AAWA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAOA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AAMA;AAEA;;;;;;;;;;;;;;;AC7IA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/OrderDetailAddressInfo/OrderDetailAddressInfo.jsx","webpack://@shopby/react-skin/./src/components/OrderDetailAddressInfo/index.js","webpack://@shopby/react-skin/./src/components/OrderDetailOrdererInfo/OrderDetailOrdererInfo.jsx","webpack://@shopby/react-skin/./src/components/OrderDetailOrdererInfo/index.js","webpack://@shopby/react-skin/./src/components/OrderDetailPaymentInfo/OrderDetailPaymentInfo.jsx","webpack://@shopby/react-skin/./src/components/OrderDetailPaymentInfo/index.js","webpack://@shopby/react-skin/./src/components/OrderNoLabel/OrderNoLabel.jsx","webpack://@shopby/react-skin/./src/components/OrderNoLabel/index.js","webpack://@shopby/react-skin/./src/components/PriceTag/PriceTag.jsx","webpack://@shopby/react-skin/./src/components/PriceTag/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/OrderDetail/ClaimDetailAdditionalPayInfo.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/ClaimDetailCollectionInfo.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/ClaimDetailExchangeDeliveryInfo.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/ClaimDetailRefundInfo.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/ClaimOrderOptionLabel.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/NextActionButton.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/OrderDetail.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/OrderDetailProductTable.jsx","webpack://@shopby/react-skin/./src/pages/OrderDetail/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { string } from 'prop-types';\n\nimport { Accordion } from '@shopby/react-components';\n\nconst OrderDetailAddressInfo = ({\n  receiverName = '',\n  receiverZipCd = '',\n  receiverAddress = '',\n  receiverDetailAddress = '',\n  receiverMobilePhoneNumber = '',\n  receiverPhoneNumber,\n  deliveryMemo,\n}) => (\n  <section className=\"l-panel order-detail-info\">\n    <Accordion title=\"배송지\" isOpen={true}>\n      <dl>\n        <dt>받는 사람</dt>\n        <dd>{receiverName}</dd>\n        <dt>주소</dt>\n        <dd>{`(${receiverZipCd}) ${receiverAddress} ${receiverDetailAddress}`}</dd>\n        <dt>휴대폰 번호</dt>\n        <dd>{receiverMobilePhoneNumber}</dd>\n        {receiverPhoneNumber && (\n          <>\n            <dt>전화 번호</dt>\n            <dd>{receiverPhoneNumber}</dd>\n          </>\n        )}\n        {deliveryMemo && (\n          <>\n            <dt>배송 메모</dt>\n            <dd>{deliveryMemo}</dd>\n          </>\n        )}\n      </dl>\n    </Accordion>\n  </section>\n);\n\nexport default OrderDetailAddressInfo;\n\nOrderDetailAddressInfo.propTypes = {\n  receiverName: string,\n  receiverZipCd: string,\n  receiverAddress: string,\n  receiverDetailAddress: string,\n  receiverMobilePhoneNumber: string,\n  receiverPhoneNumber: string,\n  deliveryMemo: string,\n};\n","import OrderDetailAddressInfo from './OrderDetailAddressInfo';\n\nexport default OrderDetailAddressInfo;\n","import { string } from 'prop-types';\n\nimport { Accordion } from '@shopby/react-components';\n\nconst OrderDetailOrdererInfo = ({ ordererName, ordererEmail, ordererMobilePhoneNumber }) => (\n  <section className=\"l-panel order-detail-info\">\n    <Accordion title=\"주문자 정보\" isOpen={true}>\n      <dl>\n        <dt>주문자 명</dt>\n        <dd>{ordererName}</dd>\n        <dt>이메일</dt>\n        <dd>{ordererEmail}</dd>\n        <dt>휴대폰 번호</dt>\n        <dd>{ordererMobilePhoneNumber}</dd>\n      </dl>\n    </Accordion>\n  </section>\n);\n\nexport default OrderDetailOrdererInfo;\n\nOrderDetailOrdererInfo.propTypes = {\n  ordererName: string,\n  ordererEmail: string,\n  ordererMobilePhoneNumber: string,\n};\n","import OrderDetailOrdererInfo from './OrderDetailOrdererInfo';\n\nexport default OrderDetailOrdererInfo;\n","import { useMemo } from 'react';\n\nimport { string, number } from 'prop-types';\n\nimport { Button, useModalActionContext, useMallStateContext } from '@shopby/react-components';\nimport { convertToKoreanCurrency, copyToClipboard, PAY_TYPES_THAT_SHOULD_SHOW_BANK_INFO } from '@shopby/shared';\n\nimport PriceTag from '../PriceTag';\n\nconst OrderDetailPaymentInfo = ({\n  payType = 'ACCOUNT',\n  payTypeLabel = '무통장입금',\n  bankName = '',\n  bankAccount = '',\n  bankDepositorName = '',\n  bankAmt = 0,\n  remitterName = '',\n  paymentExpirationYmdt = '',\n  totalStandardAmt = 0,\n  totalDeliveryAmt = 0,\n  totalDiscountAmt = 0,\n  subPayAmt = 0,\n  chargeAmt = 0,\n  accumulationAmtWhenBuyConfirm = 0,\n}) => {\n  const { openAlert } = useModalActionContext();\n  const needsToShowBankInfo = useMemo(() => PAY_TYPES_THAT_SHOULD_SHOW_BANK_INFO.includes(payType), [payType]);\n\n  const {\n    accumulationConfig: { accumulationName },\n  } = useMallStateContext();\n\n  const priceTagDetails = useMemo(\n    () => [\n      {\n        name: '상품금액 합계',\n        amountLabel: convertToKoreanCurrency(totalStandardAmt),\n      },\n      {\n        name: '배송비 합계',\n        amountLabel: `+ ${convertToKoreanCurrency(totalDeliveryAmt)}`,\n      },\n      {\n        name: '할인금액 합계',\n        amountLabel: `- ${convertToKoreanCurrency(totalDiscountAmt)}`,\n      },\n      {\n        name: `${accumulationName} 사용`,\n        amountLabel: `- ${convertToKoreanCurrency(subPayAmt)}`,\n      },\n    ],\n    [totalStandardAmt, totalDeliveryAmt, totalDiscountAmt, subPayAmt, accumulationName]\n  );\n\n  const handleCopyAccountBtnClick = () => {\n    copyToClipboard(bankAccount, () => openAlert({ message: '계좌번호가 복사되었습니다.' }));\n  };\n\n  return (\n    <section className=\"l-panel order-detail-info\">\n      <p className=\"order-detail-info__item-title\">결제정보</p>\n      <div className=\"order-detail-info__pay-method\">\n        <p>{payTypeLabel}</p>\n        {needsToShowBankInfo && (\n          <>\n            <dl>\n              <dt>입금 은행</dt>\n              <dd>{bankName}</dd>\n              <dt>입금 계좌</dt>\n              <dd>{bankAccount}</dd>\n              <dt>예금주명</dt>\n              <dd>{bankDepositorName}</dd>\n              <dt>입금 금액</dt>\n              <dd>{convertToKoreanCurrency(bankAmt)}원</dd>\n              <dt>입금자명</dt>\n              <dd>{remitterName}</dd>\n              <dt>입금 기한</dt>\n              <dd>{paymentExpirationYmdt} 까지</dd>\n            </dl>\n            <Button\n              className=\"order-detail-info__copy-btn\"\n              label={'계좌번호 복사'}\n              onClick={handleCopyAccountBtnClick}\n            />\n          </>\n        )}\n      </div>\n      <PriceTag\n        finalAmount={{ amountLabel: convertToKoreanCurrency(chargeAmt) }}\n        details={priceTagDetails}\n        showsBorder={false}\n      >\n        <span className=\"order-detail-info__mileage\">\n          구매확정 시&nbsp;\n          <em>\n            {convertToKoreanCurrency(accumulationAmtWhenBuyConfirm)} {accumulationName}\n          </em>\n          &nbsp;적립\n        </span>\n      </PriceTag>\n    </section>\n  );\n};\n\nexport default OrderDetailPaymentInfo;\n\nOrderDetailPaymentInfo.propTypes = {\n  payType: string,\n  payTypeLabel: string,\n  bankName: string,\n  bankAccount: string,\n  bankDepositorName: string,\n  bankAmt: number,\n  remitterName: string,\n  paymentExpirationYmdt: string,\n  totalStandardAmt: number,\n  totalDeliveryAmt: number,\n  totalDiscountAmt: number,\n  subPayAmt: number,\n  chargeAmt: number,\n  accumulationAmtWhenBuyConfirm: number,\n};\n","import OrderDetailPaymentInfo from './OrderDetailPaymentInfo';\n\nexport default OrderDetailPaymentInfo;\n","import { string, oneOfType, node, element } from 'prop-types';\n\nconst OrderNoLabel = ({ dateLabel, orderNo, children }) => (\n  <div className=\"order-no-label\">\n    <span className=\"order-no-label__order-no-wrap\">\n      {dateLabel}\n      <span className=\"order-no-label__no\">{orderNo}</span>\n    </span>\n    {children}\n  </div>\n);\n\nexport default OrderNoLabel;\n\nOrderNoLabel.propTypes = {\n  dateLabel: string,\n  orderNo: string,\n  children: oneOfType([node, element]),\n};\n","import OrderNoLabel from './OrderNoLabel';\n\nexport default OrderNoLabel;\n","import { Fragment } from 'react';\n\nimport { shape, string, arrayOf, bool, node, element, oneOfType } from 'prop-types';\n\n// import('./_price-tag.scss');\n\n// TODO: i18n\n\n/* eslint-disable react/prop-types */\nconst FinalAmount = ({ name, amountLabel, currencyLabel }) => (\n  <dl className=\"price-tag__final-amount\">\n    <dt>{name}</dt>\n    <dd>\n      <em>{amountLabel}</em>\n      {currencyLabel}\n    </dd>\n  </dl>\n);\n\nconst PriceDetails = ({ details, currencyLabel }) => (\n  <dl className=\"price-tag__details\">\n    {details.map(({ name, amountLabel }) => (\n      <Fragment key={name}>\n        <dt>{name}</dt>\n        <dd>\n          <em>{amountLabel}</em>\n          {currencyLabel}\n        </dd>\n      </Fragment>\n    ))}\n  </dl>\n);\n/* eslint-enable react/prop-types */\n\nconst PriceTag = ({\n  finalAmount: { name = '최종 결제 금액', amountLabel },\n  details = [],\n  currencyLabel = '원',\n  isUpsideDown = false,\n  showsBorder = true,\n  children,\n}) => {\n  if (isUpsideDown)\n    return (\n      <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n        <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n        <div className=\"price-tag__division\" />\n        <PriceDetails details={details} currencyLabel={currencyLabel} />\n        {children}\n      </div>\n    );\n\n  return (\n    <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n      <PriceDetails details={details} currencyLabel={currencyLabel} />\n      <div className=\"price-tag__division\" />\n      <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n      {children}\n    </div>\n  );\n};\n\nexport default PriceTag;\n\nPriceTag.propTypes = {\n  finalAmount: shape({\n    name: string,\n    amountLabel: string.isRequired,\n  }).isRequired,\n  details: arrayOf(\n    shape({\n      name: string.isRequired,\n      amountLabel: string.isRequired,\n    })\n  ).isRequired,\n  currencyLabel: string,\n  isUpsideDown: bool,\n  showsBorder: bool,\n  children: oneOfType([node, element]),\n};\n","import PriceTag from './PriceTag';\n\nexport default PriceTag;\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { number, string, object } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport ClaimOrderOptionLabel from './ClaimOrderOptionLabel';\n\nconst ClaimDetailAdditionalPayInfo = ({\n  exchangeOrderOption,\n  exchangeProductTotalAmt,\n  exchangeDeliveryAmt,\n  exchangePayAmt,\n  subtractionTotalAmt,\n  payTypeLabel,\n}) => (\n  <section className=\"l-panel\">\n    <p className=\"order-detail__section-title\">추가 결제 정보</p>\n    <dl className=\"order-detail__section-content\">\n      <dt>교환 출고 상품</dt>\n      <dd>\n        <ClaimOrderOptionLabel claimOrderOption={exchangeOrderOption} />\n      </dd>\n      <dt>교환 상품 금액</dt>\n      <dd>{convertToKoreanCurrency(exchangeProductTotalAmt)}원</dd>\n      <dt>반품/교환 배송비</dt>\n      <dd>{convertToKoreanCurrency(exchangeDeliveryAmt)}원</dd>\n      <dt>차감 금액</dt>\n      <dd>{convertToKoreanCurrency(subtractionTotalAmt)}원</dd>\n      <dt>추가 결제 금액</dt>\n      <dd>{convertToKoreanCurrency(exchangePayAmt)}원</dd>\n      <dt>결제 수단</dt>\n      <dd>{payTypeLabel}</dd>\n    </dl>\n  </section>\n);\n\nexport default ClaimDetailAdditionalPayInfo;\n\nClaimDetailAdditionalPayInfo.propTypes = {\n  exchangeOrderOption: object,\n  exchangeProductTotalAmt: number,\n  exchangeDeliveryAmt: number,\n  exchangePayAmt: number,\n  subtractionTotalAmt: number,\n  payTypeLabel: string,\n};\n","import { string, oneOfType } from 'prop-types';\n\nimport { RETURN_WAY_TYPE_MAP } from '@shopby/shared';\n\nconst ClaimDetailCollectionInfo = ({\n  returnWay,\n  returnerName,\n  returnerMobilePhoneNumber,\n  returnerPhoneNumber,\n  returnNote,\n  returnAddress,\n}) => {\n  if (returnWay === 'BUYER_DIRECT_RETURN')\n    return (\n      <section className=\"l-panel\">\n        <p className=\"order-detail__section-title\">반품 수거 정보</p>\n        <dl className=\"order-detail__section-content\">\n          <dt>반품 수거 방법</dt>\n          <dd>{RETURN_WAY_TYPE_MAP[returnWay]}</dd>\n          <dt>반품 접수 정보</dt>\n          <dd>{returnNote}</dd>\n        </dl>\n      </section>\n    );\n\n  return (\n    <section className=\"l-panel\">\n      <p className=\"order-detail__section-title\">반품 수거 정보</p>\n      <dl className=\"order-detail__section-content\">\n        <dt>반품 수거 방법</dt>\n        <dd>{RETURN_WAY_TYPE_MAP[returnWay]}</dd>\n        <dt>반품자명</dt>\n        <dd>{returnerName}</dd>\n        <dt>수거지 주소</dt>\n        <dd>{returnAddress}</dd>\n        <dt>휴대폰 번호</dt>\n        <dd>{returnerMobilePhoneNumber}</dd>\n        <dt>전화 번호</dt>\n        <dd>{returnerPhoneNumber}</dd>\n        <dt>수거 시 참고사항</dt>\n        <dd>{returnNote}</dd>\n      </dl>\n    </section>\n  );\n};\n\nexport default ClaimDetailCollectionInfo;\n\nClaimDetailCollectionInfo.propTypes = {\n  returnWay: oneOfType(['BUYER_DIRECT_RETURN', 'SELLER_COLLECT']),\n  returnerName: string,\n  returnerMobilePhoneNumber: string,\n  returnerPhoneNumber: string,\n  returnNote: string,\n  returnAddress: string,\n};\n","import { string, object } from 'prop-types';\n\nimport ClaimOrderOptionLabel from './ClaimOrderOptionLabel';\n\nconst ClaimDetailExchangeDeliveryInfo = ({\n  exchangeOrderOption,\n  receiverName,\n  receiverAddress,\n  receiverMobilePhoneNumber,\n  deliveryMemo,\n  customsId,\n}) => (\n  <section className=\"l-panel\">\n    <p className=\"order-detail__section-title\">교환 출고 정보</p>\n    <dl className=\"order-detail__section-content\">\n      <dt>교환 출고 상품</dt>\n      <dd>\n        <ClaimOrderOptionLabel claimOrderOption={exchangeOrderOption} />\n      </dd>\n      <dt>수령자명</dt>\n      <dd>{receiverName}</dd>\n      <dt>배송지 주소</dt>\n      <dd>{receiverAddress}</dd>\n      <dt>휴대폰 번호</dt>\n      <dd>{receiverMobilePhoneNumber}</dd>\n      <dt>배송 메시지</dt>\n      <dd>{deliveryMemo}</dd>\n      {customsId && (\n        <>\n          <dt>개인통관고유부호</dt>\n          <dd>{customsId}</dd>\n        </>\n      )}\n    </dl>\n  </section>\n);\n\nexport default ClaimDetailExchangeDeliveryInfo;\n\nClaimDetailExchangeDeliveryInfo.propTypes = {\n  exchangeOrderOption: object,\n  receiverName: string,\n  receiverAddress: string,\n  receiverMobilePhoneNumber: string,\n  deliveryMemo: string,\n  customsId: string,\n};\n","import { number, string, array } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport ClaimOrderOptionLabel from './ClaimOrderOptionLabel';\n\nconst ClaimDetailRefundInfo = ({\n  claimClassType,\n  refundOrderOptions,\n  refundProductTotalAmt,\n  refundDeliveryAmt,\n  subtractionTotalAmt,\n  refundSubPayAmt,\n  refundMainPayAmt,\n  refundTypeLabel,\n}) => (\n  <section className=\"l-panel\">\n    <p className=\"order-detail__section-title\">환불 정보</p>\n    <dl className=\"order-detail__section-content\">\n      {claimClassType !== 'ORDER_CANCEL' && (\n        <>\n          <dt>환불 상품</dt>\n          <dd>\n            {refundOrderOptions.map((refundOrderOption, idx) => (\n              <ClaimOrderOptionLabel key={idx} claimOrderOption={refundOrderOption} />\n            ))}\n          </dd>\n        </>\n      )}\n      <dt>환불 상품 금액</dt>\n      <dd>{convertToKoreanCurrency(refundProductTotalAmt)}원</dd>\n      <dt>환불 배송비</dt>\n      <dd>{convertToKoreanCurrency(refundDeliveryAmt)}원</dd>\n      <dt>환불 차감 금액</dt>\n      <dd>{convertToKoreanCurrency(subtractionTotalAmt)}원</dd>\n      <dt>환불 적립금</dt>\n      <dd>{convertToKoreanCurrency(refundSubPayAmt)}원</dd>\n      <dt>환불 금액</dt>\n      <dd>{convertToKoreanCurrency(refundMainPayAmt)}원</dd>\n      <dt>환불 수단</dt>\n      <dd>{refundTypeLabel}</dd>\n    </dl>\n  </section>\n);\n\nexport default ClaimDetailRefundInfo;\n\nClaimDetailRefundInfo.propTypes = {\n  claimClassType: string,\n  refundOrderOptions: array,\n  refundProductTotalAmt: number,\n  refundDeliveryAmt: number,\n  subtractionTotalAmt: number,\n  refundSubPayAmt: number,\n  refundMainPayAmt: number,\n  refundTypeLabel: string,\n};\n","import { useMemo } from 'react';\n\nimport { shape, string } from 'prop-types';\n\nimport OptionLabel from '../../components/OptionLabel';\n\nconst ClaimOrderOptionLabel = ({ claimOrderOption }) => {\n  const optionInputs = useMemo(() => {\n    if (!claimOrderOption.userInputTextStr) return [];\n\n    return claimOrderOption.userInputTextStr.split('|').map((token) => {\n      const [inputLabel, inputValue] = token.split(' : ');\n\n      return { inputLabel, inputValue };\n    });\n  }, [claimOrderOption.userInputTextStr]);\n\n  return (\n    <div>\n      <p>\n        (수량: {claimOrderOption.orderCnt}개) {claimOrderOption.productName}\n      </p>\n      <OptionLabel\n        optionName={claimOrderOption.optionName}\n        optionValue={claimOrderOption.optionValue}\n        optionInputs={optionInputs}\n      />\n    </div>\n  );\n};\n\nexport default ClaimOrderOptionLabel;\n\nClaimOrderOptionLabel.propTypes = {\n  claimOrderOption: shape({\n    productName: string,\n    optionName: string,\n    optionValue: string,\n    orderCnt: string,\n    useInputTextStr: string,\n  }).isRequired,\n};\n","import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { oneOfType, string, number, func, bool } from \"prop-types\";\n\nimport {\n  Button,\n  useClaimActionContext,\n  useModalActionContext,\n  useMyOrderActionContext,\n  VisibleComponent,\n  ProductReviewFormProvider,\n  ProductReviewProvider,\n} from \"@shopby/react-components\";\n\nimport FullModal from \"../../components/FullModal/FullModal\";\nimport ReviewForm from \"../../components/ReviewForm\";\n\nconst ReviewFormModal = ({ isOpen, onClose, ...props }) => {\n  const handleSubmit = () => {\n    onClose();\n  };\n\n  return (\n    <VisibleComponent\n      shows={isOpen}\n      TruthyComponent={\n        <FullModal title=\"상품후기\">\n          <ReviewForm\n            isRegisterMode={true}\n            onSubmit={handleSubmit}\n            onCancel={onClose}\n            {...props}\n          />\n        </FullModal>\n      }\n    />\n  );\n};\n\nReviewFormModal.propTypes = {\n  isOpen: bool,\n  onClose: func,\n};\n\nconst NextActionButton = ({\n  orderStatusType,\n  nextActionType,\n  trackingDeliveryUri,\n  productNo,\n  optionNo,\n  orderOptionNo,\n  orderNo,\n  className,\n  productName,\n  productImageUrl,\n  optionName,\n  optionValue,\n}) => {\n  const navigate = useNavigate();\n  const { openAlert, openConfirm } = useModalActionContext();\n\n  const { withdrawClaimByOrderOptionNo, cancelOrder } = useClaimActionContext();\n  const { confirmOrder, fetchOrderDetail } = useMyOrderActionContext();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const nextAction = {\n    CANCEL_ALL: {\n      label: \"전체 주문 취소\",\n      execute: () => {\n        openConfirm({\n          message: \"전체 주문을 취소하시겠습니까?\",\n          onConfirm: async () => {\n            await cancelOrder(orderNo);\n            openAlert({\n              message: \"전체 주문 취소가 완료되었습니다.\",\n              onClose: () => fetchOrderDetail(orderNo),\n            });\n          },\n        });\n      },\n    },\n    CANCEL: {\n      label: \"취소 신청\",\n      execute: () => {\n        navigate(`/claim/${orderOptionNo}?claimType=CANCEL`);\n      },\n    },\n    EXCHANGE: {\n      label: \"교환 신청\",\n      execute: () => {\n        navigate(`/claim/${orderOptionNo}?claimType=EXCHANGE`);\n      },\n    },\n    RETURN: {\n      label: \"반품 신청\",\n      execute: () => {\n        navigate(`/claim/${orderOptionNo}?claimType=RETURN`);\n      },\n    },\n    WITHDRAW_CANCEL: {\n      label: \"취소신청 철회\",\n      execute: () => {\n        openConfirm({\n          message: \"취소 신청을 철회하시겠습니까?\",\n          onConfirm: async () => {\n            await withdrawClaimByOrderOptionNo(orderOptionNo.toString());\n            openAlert({\n              message: \"취소신청 철회가 완료되었습니다.\",\n              onClose: () => fetchOrderDetail(orderNo),\n            });\n          },\n        });\n      },\n    },\n    WITHDRAW_EXCHANGE: {\n      label: \"교환 취소\",\n      execute: () => {\n        openConfirm({\n          message: \"교환 신청을 철회하시겠습니까?\",\n          onConfirm: async () => {\n            await withdrawClaimByOrderOptionNo(orderOptionNo.toString());\n            openAlert({\n              message: \"교환 신청 철회가 완료되었습니다.\",\n              onClose: () => fetchOrderDetail(orderNo),\n            });\n          },\n        });\n      },\n    },\n    WITHDRAW_RETURN: {\n      label: \"반품 취소\",\n      execute: () => {\n        openConfirm({\n          message: \"반품 신청을 철회하시겠습니까?\",\n          onConfirm: async () => {\n            await withdrawClaimByOrderOptionNo(orderOptionNo.toString());\n            openAlert({\n              message: \"반품 신청 철회가 완료되었습니다.\",\n              onClose: () => fetchOrderDetail(orderNo),\n            });\n          },\n        });\n      },\n    },\n    VIEW_DELIVERY: {\n      label: \"배송 조회\",\n      execute: () => {\n        window.open(trackingDeliveryUri, \"_blank\");\n      },\n    },\n    CONFIRM_ORDER: {\n      label: \"구매 확정\",\n      execute: async () => {\n        await confirmOrder(orderOptionNo.toString());\n        openAlert({\n          message: \"구매확정 처리되었습니다.\",\n          onClose: () => fetchOrderDetail(orderNo),\n        });\n      },\n    },\n    WRITE_REVIEW: {\n      label: \"후기 작성\",\n      execute: () => {\n        setIsOpen(true);\n      },\n    },\n    // 현 스펙 제외\n    // CHANGE_ADDRESS: {\n    //   label: '',\n    //   execute: () => {\n\n    //   }\n    // VIEW_CLAIM: {\n    //   label: '',\n    //   execute: () => {\n\n    //   }\n    // },\n    // },\n    // ISSUE_CASH_RECEIPT: {\n    //   label: '',\n    //   execute: () => {\n\n    //   }\n    // },\n    // VIEW_RECEIPT: {\n    //   label: '',\n    //   execute: () => {\n\n    //   }\n    // },\n    // DELIVERY_DONE: {\n    //   label: '',\n    //   execute: () => {\n\n    //   }\n    // },\n  };\n\n  return (\n    <>\n      <Button\n        className={className}\n        onClick={() => nextAction[nextActionType]?.execute()}\n      >\n        {nextAction[nextActionType].label}\n      </Button>\n      <ProductReviewFormProvider>\n        <ProductReviewProvider productNo={productNo}>\n          <ReviewFormModal\n            isOpen={isOpen}\n            productNo={productNo}\n            productName={productName}\n            productImageUrl={productImageUrl}\n            optionNo={optionNo}\n            orderOptionNo={orderOptionNo}\n            orderProductOptionNo={optionNo}\n            optionName={optionName}\n            optionValue={optionValue}\n            orderStatusType={orderStatusType}\n            onClose={() => {\n              setIsOpen(false);\n              fetchOrderDetail(orderNo);\n            }}\n          />\n        </ProductReviewProvider>\n      </ProductReviewFormProvider>\n    </>\n  );\n};\n\nexport default NextActionButton;\n\nNextActionButton.propTypes = {\n  nextActionType: oneOfType([\n    \"CANCEL_ALL\",\n    \"CANCEL\",\n    \"EXCHANGE\",\n    \"RETURN\",\n    \"WITHDRAW_CANCEL\",\n    \"WITHDRAW_EXCHANGE\",\n    \"WITHDRAW_RETURN\",\n    \"VIEW_DELIVERY\",\n    \"CONFIRM_ORDER\",\n    \"WRITE_REVIEW\",\n    // 현 스펙 제외\n    // 'VIEW_CLAIM',\n    // 'DELIVERY_DONE',\n    // 'CHANGE_ADDRESS',\n    // 'ISSUE_CASH_RECEIPT',\n    // 'VIEW_RECEIPT'\n  ]),\n  orderStatusType: string,\n  trackingDeliveryUri: string,\n  productNo: number,\n  orderOptionNo: number,\n  orderNo: string,\n  className: string,\n  productName: string,\n  productImageUrl: string,\n  optionNo: number,\n  optionName: string,\n  optionValue: string,\n};\n","import { Fragment, useEffect, useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport {\n  MyOrderProvider,\n  useMyOrderStateContext,\n  useMyOrderActionContext,\n  ClaimProvider,\n  Button,\n  usePageScriptsActionContext,\n} from '@shopby/react-components';\nimport { PAY_TYPE_MAP } from '@shopby/shared';\n\nimport OrderDetailAddressInfo from '../../components/OrderDetailAddressInfo';\nimport OrderDetailOrdererInfo from '../../components/OrderDetailOrdererInfo';\nimport OrderDetailPaymentInfo from '../../components/OrderDetailPaymentInfo';\nimport OrderNoLabel from '../../components/OrderNoLabel';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport ClaimDetailAdditionalPayInfo from './ClaimDetailAdditionalPayInfo';\nimport ClaimDetailCollectionInfo from './ClaimDetailCollectionInfo';\nimport ClaimDetailExchangeDeliveryInfo from './ClaimDetailExchangeDeliveryInfo';\nimport ClaimDetailRefundInfo from './ClaimDetailRefundInfo';\nimport NextActionButton from './NextActionButton';\nimport OrderDetailProductTable from './OrderDetailProductTable';\n\nconst OrderDetailContent = () => {\n  const navigate = useNavigate();\n  const { orderDetail, flattenedOrderOptions } = useMyOrderStateContext();\n  const { fetchOrderDetail } = useMyOrderActionContext();\n  const { applyPageScripts } = usePageScriptsActionContext();\n  const { orderNo } = useParams();\n\n  const {\n    deliveryAmt,\n    remoteDeliveryAmt,\n    cartCouponDiscountAmt,\n    productCouponDiscountAmt,\n    additionalDiscountAmt,\n    immediateDiscountAmt,\n    standardAmt,\n  } = useMemo(() => orderDetail?.lastOrderAmount ?? {}, [orderDetail?.lastOrderAmount]);\n  const totalDeliveryAmt = useMemo(() => deliveryAmt + remoteDeliveryAmt, [deliveryAmt, remoteDeliveryAmt]);\n  const totalDiscountAmt = useMemo(\n    () => cartCouponDiscountAmt + productCouponDiscountAmt + additionalDiscountAmt + immediateDiscountAmt,\n    [cartCouponDiscountAmt, productCouponDiscountAmt, additionalDiscountAmt, immediateDiscountAmt]\n  );\n\n  useLayoutChanger({\n    title: '주문/배송 상세',\n    hasBackBtnOnHeader: true,\n  });\n\n  useEffect(() => {\n    fetchOrderDetail(orderNo);\n  }, []);\n\n  useEffect(() => {\n    if (!orderDetail) return;\n\n    applyPageScripts('ORDER_DETAIL', { order: orderDetail });\n  }, [orderDetail]);\n\n  const handleListBtnClick = () => {\n    navigate('/orders');\n  };\n\n  const canCancelAll = useMemo(\n    () =>\n      orderDetail?.nextActions.find(({ nextActionType }) => nextActionType === 'CANCEL_ALL') &&\n      flattenedOrderOptions.every(({ orderStatusType }) => orderStatusType === 'DEPOSIT_WAIT'),\n    [orderDetail]\n  );\n\n  return (\n    <div className=\"order-detail\">\n      <OrderNoLabel dateLabel={orderDetail?.orderYmdt.slice(0, 10) ?? ''} orderNo={orderNo}>\n        {canCancelAll && (\n          <NextActionButton className=\"order-detail__cancel-all-btn\" orderNo={orderNo} nextActionType={'CANCEL_ALL'} />\n        )}\n      </OrderNoLabel>\n      <OrderDetailProductTable />\n      <OrderDetailOrdererInfo\n        ordererName={orderDetail?.orderer.ordererName ?? ''}\n        ordererEmail={orderDetail?.orderer.ordererEmail ?? ''}\n        ordererMobilePhoneNumber={orderDetail?.orderer.ordererContact1 ?? ''}\n      />\n      <OrderDetailAddressInfo\n        receiverName={orderDetail?.shippingAddress.receiverName ?? ''}\n        receiverZipCd={orderDetail?.shippingAddress.receiverZipCd ?? ''}\n        receiverAddress={orderDetail?.shippingAddress.receiverAddress ?? ''}\n        receiverDetailAddress={orderDetail?.shippingAddress.receiverDetailAddress ?? ''}\n        receiverMobilePhoneNumber={orderDetail?.shippingAddress.receiverContact1 ?? ''}\n        receiverPhoneNumber={orderDetail?.shippingAddress.receiverContact2 ?? ''}\n        deliveryMemo={orderDetail?.deliveryMemo ?? ''}\n      />\n      <OrderDetailPaymentInfo\n        payType={orderDetail?.payType}\n        payTypeLabel={orderDetail?.payTypeLabel}\n        bankName={orderDetail?.payInfo.bankInfo?.bankName}\n        bankAccount={orderDetail?.payInfo.bankInfo?.account}\n        bankDepositorName={orderDetail?.payInfo.bankInfo?.depositorName}\n        bankAmt={orderDetail?.payInfo.bankInfo?.bankAmt}\n        remitterName={orderDetail?.payInfo.bankInfo?.remitterName}\n        paymentExpirationYmdt={orderDetail?.payInfo.bankInfo?.paymentExpirationYmdt}\n        totalStandardAmt={standardAmt}\n        totalDeliveryAmt={totalDeliveryAmt}\n        totalDiscountAmt={totalDiscountAmt}\n        subPayAmt={orderDetail?.lastOrderAmount.subPayAmt}\n        chargeAmt={orderDetail?.lastOrderAmount.chargeAmt}\n        accumulationAmtWhenBuyConfirm={orderDetail?.accumulationAmtWhenBuyConfirm}\n      />\n      {orderDetail?.additionalPayInfos?.map(\n        ({\n          claimNo,\n          exchangeOrderOption,\n          productAmtInfo: { totalAmt: productTotalAmt },\n          deliveryAmtInfo: { totalAmt: deliveryTotalAmt },\n          exchangePayAmt,\n          subtractionAmtInfo: { totalAmt: subtractionTotalAmt },\n          payType,\n          returnWayType,\n          returnAddress,\n          exchangeAddress,\n        }) => (\n          <Fragment key={claimNo}>\n            <ClaimDetailAdditionalPayInfo\n              exchangeOrderOption={exchangeOrderOption}\n              exchangeProductTotalAmt={productTotalAmt}\n              exchangeDeliveryAmt={deliveryTotalAmt}\n              exchangePayAmt={exchangePayAmt}\n              subtractionTotalAmt={subtractionTotalAmt}\n              payTypeLabel={PAY_TYPE_MAP[payType]}\n            />\n            <ClaimDetailCollectionInfo\n              returnWay={returnWayType}\n              returnerName={returnAddress.name}\n              returnerMobilePhoneNumber={returnAddress.contact1}\n              returnerPhoneNumber={returnAddress.contact2}\n              returnNote={returnAddress.note}\n              returnAddress={returnAddress.addressStr}\n            />\n            <ClaimDetailExchangeDeliveryInfo\n              exchangeOrderOption={exchangeOrderOption}\n              receiverName={exchangeAddress.name}\n              receiverAddress={exchangeAddress.addressStr}\n              receiverMobilePhoneNumber={exchangeAddress.contact1}\n              deliveryMemo={exchangeAddress.note}\n              customsId={exchangeAddress.customsIdNumber}\n            />\n          </Fragment>\n        )\n      )}\n      {orderDetail?.refundInfos?.map(\n        ({\n          claimNo,\n          refundType,\n          returnWayType,\n          returnAddress,\n          exchangeAddress,\n          refundOrderOptions,\n          productAmtInfo: { totalAmt: productTotalAmt },\n          deliveryAmtInfo: { totalAmt: deliveryTotalAmt },\n          subtractionAmtInfo: { totalAmt: subtractionTotalAmt },\n          refundSubPayAmt,\n          refundMainPayAmt,\n          refundTypeLabel,\n          exchangeOrderOption,\n        }) => (\n          <Fragment key={claimNo}>\n            {refundType !== 'ZERO_REFUND' && (\n              <ClaimDetailRefundInfo\n                refundOrderOptions={refundOrderOptions}\n                refundProductTotalAmt={productTotalAmt}\n                refundDeliveryAmt={deliveryTotalAmt}\n                subtractionTotalAmt={subtractionTotalAmt}\n                refundSubPayAmt={refundSubPayAmt}\n                refundMainPayAmt={refundMainPayAmt}\n                refundTypeLabel={refundTypeLabel}\n              />\n            )}\n            {returnAddress && (\n              <ClaimDetailCollectionInfo\n                returnWay={returnWayType}\n                returnerName={returnAddress.name}\n                returnerMobilePhoneNumber={returnAddress.contact1}\n                returnerPhoneNumber={returnAddress.contact2}\n                returnNote={returnAddress.note}\n                returnAddress={returnAddress.addressStr}\n              />\n            )}\n            {exchangeAddress && (\n              <ClaimDetailExchangeDeliveryInfo\n                exchangeOrderOption={exchangeOrderOption}\n                receiverName={exchangeAddress.name}\n                receiverAddress={exchangeAddress.addressStr}\n                receiverMobilePhoneNumber={exchangeAddress.contact1}\n                deliveryMemo={exchangeAddress.note}\n                customsId={exchangeAddress.customsIdNumber}\n              />\n            )}\n          </Fragment>\n        )\n      )}\n      <section className=\"order-detail__list-btn-wrap\">\n        <Button onClick={handleListBtnClick}>목록 보기</Button>\n      </section>\n    </div>\n  );\n};\n\nconst OrderDetail = () => (\n  <ClaimProvider>\n    <MyOrderProvider>\n      <OrderDetailContent />\n    </MyOrderProvider>\n  </ClaimProvider>\n);\n\nexport default OrderDetail;\n","import {\n  ThumbList,\n  VisibleComponent,\n  useMyOrderStateContext,\n} from \"@shopby/react-components\";\nimport { sortWithPriority } from \"@shopby/shared\";\n\nimport ProductThumbItem from \"../../components/ProductThumbItem\";\n\nimport NextActionButton from \"./NextActionButton\";\n\n// 노출하지 않을 nextActions\nconst NEXT_ACTIONS_TO_BE_NOT_RENDERED_IN_BUTTON_GROUP = [\n  \"CANCEL_ALL\",\n  \"VIEW_DELIVERY\",\n  \"VIEW_CLAIM\",\n  \"DELIVERY_DONE\",\n  \"CHANGE_ADDRESS\",\n  \"ISSUE_CASH_RECEIPT\",\n  \"VIEW_RECEIPT\",\n];\n\n// 하기 array의 순서대로 우선 노출됩니다.\n// array에 넣지 않은 값은 우선 노출된 버튼 뒤에 임의 순서로 노출됩니다.\nconst NEXT_ACTIONS_WITH_PRIORITY = [\n  \"CANCEL\",\n  \"RETURN\",\n  \"EXCHANGE\",\n  \"WITHDRAW_CANCEL\",\n  \"WITHDRAW_EXCHANGE\",\n  \"WITHDRAW_RETURN\",\n  \"CONFIRM_ORDER\",\n  \"WRITE_REVIEW\",\n];\n\nconst OrderDetailProductTable = () => {\n  const { flattenedOrderOptions } = useMyOrderStateContext();\n\n  return (\n    <section className=\"order-detail__product-table l-panel\">\n      <ThumbList>\n        {flattenedOrderOptions.map(\n          ({\n            imageUrl,\n            brandName,\n            productName,\n            orderCnt,\n            price: { buyAmt },\n            optionName,\n            optionValue,\n            inputs,\n            optionNo,\n            productNo,\n            nextActions,\n            claimStatusTypeLabel,\n            orderStatusType,\n            orderStatusTypeLabel,\n            orderNo,\n            orderOptionNo,\n            deliveryCompanyTypeLabel,\n            invoiceNo,\n          }) => (\n            <div key={optionNo} className=\"order-detail__product\">\n              <p className=\"order-detail__product-top-label\">\n                <span className=\"order-detail__status-label\">\n                  {claimStatusTypeLabel || orderStatusTypeLabel}\n                </span>\n                {(() => {\n                  const actionOfViewDelivery = nextActions.find(\n                    ({ nextActionType }) => nextActionType === \"VIEW_DELIVERY\"\n                  );\n                  if (actionOfViewDelivery) {\n                    return (\n                      <span className=\"order-detail__delivery-info\">\n                        <span>{`${deliveryCompanyTypeLabel} ${invoiceNo}`}</span>\n                        <NextActionButton\n                          productNo={productNo}\n                          optionNo={optionNo}\n                          orderOptionNo={orderOptionNo}\n                          nextActionType={\"VIEW_DELIVERY\"}\n                          trackingDeliveryUri={actionOfViewDelivery.uri}\n                        />\n                      </span>\n                    );\n                  }\n\n                  return <></>;\n                })()}\n              </p>\n              <ProductThumbItem\n                productNo={productNo}\n                imageUrl={imageUrl}\n                brandName={brandName ?? \"\"}\n                productName={productName}\n                orderCnt={orderCnt}\n                buyAmt={buyAmt}\n                optionName={optionName}\n                optionValue={optionValue}\n                optionInputs={inputs}\n              />\n              <VisibleComponent\n                shows={nextActions.length}\n                TruthyComponent={\n                  <div className=\"order-detail__next-action-btns\">\n                    {sortWithPriority(\n                      nextActions,\n                      NEXT_ACTIONS_WITH_PRIORITY,\n                      \"nextActionType\"\n                    )\n                      .filter(\n                        ({ nextActionType }) =>\n                          !NEXT_ACTIONS_TO_BE_NOT_RENDERED_IN_BUTTON_GROUP.includes(\n                            nextActionType\n                          )\n                      )\n                      .map(({ nextActionType }) => (\n                        <NextActionButton\n                          key={nextActionType}\n                          orderStatusType={orderStatusType}\n                          nextActionType={nextActionType}\n                          productNo={productNo}\n                          productName={productName}\n                          optionName={optionName}\n                          optionValue={optionValue}\n                          orderOptionNo={orderOptionNo}\n                          orderNo={orderNo}\n                          optionNo={optionNo}\n                          productImageUrl={imageUrl}\n                        />\n                      ))}\n                  </div>\n                }\n              />\n            </div>\n          )\n        )}\n      </ThumbList>\n    </section>\n  );\n};\n\nexport default OrderDetailProductTable;\n","import OrderDetail from './OrderDetail';\n\nexport default OrderDetail;\n"],"names":[],"sourceRoot":""}