{"version":3,"file":"default-src_components_ProductReviewList_ProductReviewList_jsx.12c9520efe21e3d198a8.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAEA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAAA;AAfA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjBA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAMA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChMA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AC/KA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/ProductReviewList/ProductReviewItem.jsx","webpack://@shopby/react-skin/./src/components/ProductReviewList/ProductReviewList.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js"],"sourcesContent":["import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { memo, useMemo, useState } from 'react';\n\nimport { number, string, arrayOf, func, bool } from 'prop-types';\n\nimport {\n  Button,\n  IconBtn,\n  RatingStar,\n  VisibleComponent,\n  useModalActionContext,\n  useProductReviewFormActionContext,\n  useProductReviewStateContext,\n} from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport { RATING_STAR } from '../../constants/rate';\n// import { useErrorBoundaryActionContext } from '../ErrorBoundary';\nimport FullModal from '../FullModal/FullModal';\nimport ReviewForm from '../ReviewForm';\nimport Sanitized from '../Sanitized';\n\nconst ProductReviewItem = memo(\n  ({\n    productName,\n    productNo,\n    showsProductName = false,\n    brandName = '',\n    price,\n    mainImageUrl,\n    reviewNo,\n    memberId,\n    updatedDate,\n    content,\n    images,\n    rate,\n    optionDisplayLabel = '',\n    isMine = false,\n    onModify,\n    onDelete,\n  }) => {\n    const { reviewConfig } = useProductReviewStateContext();\n    const { deleteReviewBy } = useProductReviewFormActionContext();\n    const { openConfirm } = useModalActionContext();\n    // const { catchError } = useErrorBoundaryActionContext();\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [isModificationModalOpen, setIsModificationModalOpen] = useState(false);\n\n    const imageCount = useMemo(() => images.length, [images]);\n\n    const displayImages = useMemo(() => (isOpen ? images : [images.at(0)]), [images, isOpen]) ?? [];\n\n    const handleEditBtnClick = () => {\n      setIsModificationModalOpen(true);\n    };\n\n    const handleDeleteBtnClick = async () => {\n      await openConfirm({\n        message: (\n          <>\n            삭제 시 복구가 불가능합니다. <br />\n            정말 삭제하시겠습니까?\n          </>\n        ),\n        onConfirm: async () => {\n          await deleteReviewBy({\n            productNo,\n            reviewNo,\n          });\n          await onDelete();\n        },\n        confirmLabel: '삭제',\n      });\n    };\n\n    const handleFormModify = async () => {\n      await onModify();\n\n      setIsModificationModalOpen(false);\n    };\n\n    return (\n      <>\n        <li className={`product-review-item ${isOpen ? 'is-open' : ''}`}>\n          <div className={`product-review-item__top`}>\n            <div className={`product-review-item__rating`}>\n              <RatingStar score={rate} isSmall={true} limit={RATING_STAR.LIMIT_SCORE} />\n              <strong className={`${`product-review-item__score`}`}>{rate}</strong>\n            </div>\n            <span className={`product-review-item__date`}>{updatedDate}</span>\n          </div>\n          <div className={`product-review-item__content`}>\n            <VisibleComponent\n              shows={imageCount > 0}\n              TruthyComponent={\n                <div className={`product-review-item__image`}>\n                  <ul>\n                    {displayImages.map((image, index) => (\n                      <li key={`${index}_product-review-item-image`}>\n                        <img src={image} alt=\"상품 후기 이미지\" />\n                      </li>\n                    ))}\n                  </ul>\n                  <span className={`product-review-item__image-count`}>{imageCount}</span>\n                </div>\n              }\n            />\n            <div className={`product-review-item__bottom`}>\n              <div className={`product-review-item__order-info`}>\n                <VisibleComponent\n                  shows={showsProductName}\n                  TruthyComponent={<p className=\"product-review-item__product-name\">{productName}</p>}\n                />\n                <p className={`product-review-item__member-id`}>{memberId}</p>\n                <p className=\"product-review-item__brand-name\">{brandName}</p>\n                <p className={`product-review-item__option-value`}>{optionDisplayLabel}</p>\n                {price >= 0 && <p className=\"product-review-item__price\">{convertToKoreanCurrency(price)}원</p>}\n              </div>\n              <div className={`product-review-item__text`}>\n                <div className=\"product-review-item__text-detail\">\n                  <Sanitized html={content.replaceAll('\\n', '<br />')} />\n                </div>\n                <IconBtn\n                  className=\"arrow\"\n                  iconType=\"angle-down\"\n                  onClick={() => setIsOpen((prev) => !prev)}\n                  size=\"sm\"\n                  hiddenLabel={true}\n                  label={isOpen ? '리뷰 가리기' : '리뷰 보기'}\n                />\n              </div>\n              <VisibleComponent\n                shows={isMine}\n                TruthyComponent={\n                  <div className={`product-review-item__btns`}>\n                    <Button label=\"수정\" onClick={handleEditBtnClick} />\n                    <Button label=\"삭제\" onClick={handleDeleteBtnClick} />\n                  </div>\n                }\n              />\n            </div>\n          </div>\n        </li>\n        <VisibleComponent\n          shows={isModificationModalOpen}\n          TruthyComponent={\n            <FullModal title={reviewConfig.name} onClose={() => setIsModificationModalOpen(false)}>\n              <ReviewForm\n                isRegisterMode={false}\n                reviewNo={reviewNo}\n                productName={productName}\n                productImageUrl={mainImageUrl}\n                optionDisplayLabel={optionDisplayLabel}\n                content={content}\n                reviewImages={images.map((image) => ({\n                  originName: image,\n                  imageUrl: image,\n                }))}\n                rate={rate}\n                onCancel={() => {\n                  setIsModificationModalOpen(false);\n                }}\n                onModify={() => {\n                  handleFormModify();\n                }}\n              />\n            </FullModal>\n          }\n        />\n      </>\n    );\n  }\n);\nProductReviewItem.displayName = 'ProductReviewItem';\nProductReviewItem.propTypes = {\n  productNo: number.isRequired,\n  reviewNo: number.isRequired,\n  memberId: string,\n  onModify: func.isRequired,\n  onDelete: func.isRequired,\n  content: string.isRequired,\n  images: arrayOf(string).isRequired,\n  rate: number.isRequired,\n  mainImageUrl: string,\n  productName: string,\n  brandName: string,\n  price: number,\n  optionDisplayLabel: string,\n  updatedDate: string,\n  isMine: bool,\n  showsProductName: bool,\n};\nexport default ProductReviewItem;\n","import { memo } from 'react';\n\nimport { oneOf, func, arrayOf, shape, bool, number, string } from 'prop-types';\n\nimport { SelectBox, ThumbList, VisibleComponent, useBoardConfigurationContextState } from '@shopby/react-components';\n\nimport ListSkeleton from '../ListSkeleton/ListSkeleton';\nimport ProductThumbItem from '../ProductThumbItem';\nimport ReviewAccumulation from '../ReviewAccumulation/ReviewAccumulation';\n\nimport ProductReviewItem from './ProductReviewItem';\n\nconst EmptyReviewList = memo(() => (\n  <div className=\"product-board-list__empty\">\n    <span className=\"ico ico--exclamation-white-bg\"></span>\n    <span className=\"product-board-list__empty-notes\">아직 작성 된 상품후기가 없어요.</span>\n    <p className=\"product-board-list__accumulation-notes\">\n      구매 후 상품후기를 남겨주세요!\n      <br />\n      <ReviewAccumulation className=\"product-board-list__accumulation\" showsIcon={false} />\n    </p>\n  </div>\n));\n\nEmptyReviewList.displayName = 'EmptyReviewList';\n\nconst REVIEW_SORT_TYPE_MAP = {\n  BEST_REVIEW: '베스트순',\n  REGISTER_YMDT: '등록일순',\n  RATING_DESC: '평점높은순',\n  RATING_ASC: '평점낮은순',\n};\n\nconst getOptionDisplayLabel = ({ optionUsed = true, optionName = '', optionValue = '' } = {}) =>\n  optionUsed && optionName && optionValue ? `${optionName} : ${optionValue}` : '';\n\nexport const ReviewList = ({ reviews = [], onModify, onDelete, showsProductInfo = false }) => (\n  <div className=\"product-board-list__items\">\n    <ul>\n      {reviews.map(({ fileUrls, ...review }) => {\n        const { orderedOption } = review;\n        const optionDisplayLabel = getOptionDisplayLabel(orderedOption);\n        return (\n          <ThumbList key={review.reviewNo}>\n            {showsProductInfo && (\n              <ProductThumbItem\n                {...review}\n                optionName={orderedOption.optionName}\n                optionValue={orderedOption.optionValue}\n              />\n            )}\n            <ProductReviewItem\n              {...review}\n              productName={review.productName}\n              updatedDate={review.registerYmdt.slice(0, 10)}\n              mainImageUrl={review.imageUrl}\n              brandName={showsProductInfo ? '' : review.brandName}\n              optionDisplayLabel={showsProductInfo ? '' : optionDisplayLabel}\n              showsProductName={!showsProductInfo}\n              isMine={review.myReview}\n              images={fileUrls}\n              onModify={onModify}\n              onDelete={onDelete}\n            />\n          </ThumbList>\n        );\n      })}\n    </ul>\n  </div>\n);\n\nReviewList.propTypes = {\n  onModify: func.isRequired,\n  onDelete: func.isRequired,\n  reviews: arrayOf(\n    shape({\n      reviewNo: number.isRequired,\n      memberId: string.isRequired,\n      updatedDate: string,\n      content: string,\n      fileUrls: arrayOf(string),\n      rate: number,\n      orderedOption: shape({\n        optionName: string,\n        optionValue: string,\n      }),\n      myReview: bool,\n    })\n  ),\n  showsProductInfo: bool,\n};\n\nconst ProductReviewList = ({ productNo, totalCount, sortType, onSelect, reviews, onModify, onDelete, isLoading }) => {\n  const {\n    boardConfig: { productReviewConfig },\n  } = useBoardConfigurationContextState();\n\n  const handleSortTypeSelect = (event) => {\n    onSelect(event);\n  };\n\n  const handleReviewFormModify = () => {\n    onModify();\n  };\n\n  const handleReviewFormDelete = () => {\n    onDelete();\n  };\n\n  return (\n    <div className=\"product-board-list\">\n      <div className=\"product-board-list__search\">\n        <p>\n          {productReviewConfig?.name ?? '상품후기'}{' '}\n          <span className=\"product-board-list__total-count\">\n            <em>{totalCount}</em>건\n          </span>\n        </p>\n        <SelectBox\n          value={sortType}\n          className=\"product-board-list__sort-type\"\n          options={Object.entries(REVIEW_SORT_TYPE_MAP).map(([value, label]) => ({\n            value,\n            label,\n          }))}\n          onSelect={handleSortTypeSelect}\n        />\n      </div>\n      <VisibleComponent\n        shows={totalCount > 0}\n        TruthyComponent={\n          <ReviewList\n            productNo={productNo}\n            reviews={reviews}\n            sortType={sortType}\n            onModify={handleReviewFormModify}\n            onDelete={handleReviewFormDelete}\n          />\n        }\n        FalsyComponent={<EmptyReviewList />}\n      />\n      <ListSkeleton isLoading={isLoading} />\n    </div>\n  );\n};\n\nexport default ProductReviewList;\n\nProductReviewList.displayName = 'ProductReviewList';\n\nProductReviewList.propTypes = {\n  productNo: number.isRequired,\n  totalCount: number.isRequired,\n  sortType: oneOf(['BEST_REVIEW', 'REGISTER_YMDT', 'RATING_DESC', 'RATING_ASC']).isRequired,\n  onSelect: func.isRequired,\n  onModify: func.isRequired,\n  onDelete: func.isRequired,\n  reviews: arrayOf(\n    shape({\n      reviewNo: number.isRequired,\n      memberId: string.isRequired,\n      updatedDate: string,\n      content: string,\n      fileUrls: arrayOf(string),\n      rate: number,\n      orderedOption: shape({\n        optionName: string,\n        optionValue: string,\n      }),\n      myReview: bool,\n      onEditBtnClick: func,\n      onDeleteBtnClick: func,\n    })\n  ).isRequired,\n  isLoading: bool,\n};\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n"],"names":[],"sourceRoot":""}