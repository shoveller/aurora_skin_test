{"version":3,"file":"src_components_FullModal_FullModal_jsx-src_pages_MyPage_ProductReview_ReviewedProduct_jsx.f3b6c1ffba519e99a1d4.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AASA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;AAEA;AACA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;AC1FA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AClBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/ProductReview/ReviewedProduct.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/TotalCount.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useEffect } from 'react';\n\nimport {\n  InfiniteScrollLoader,\n  VisibleComponent,\n  useInfiniteScroll,\n  useProductReviewStateContext,\n  useProfileProductReviewActionContext,\n  useProfileProductReviewStateContext,\n} from '@shopby/react-components';\n\nimport ListSkeleton from '../../../components/ListSkeleton/ListSkeleton';\nimport { ReviewList } from '../../../components/ProductReviewList/ProductReviewList';\nimport TotalCount from '../TotalCount';\n\nconst ReviewedProductTotalCount = () => {\n  const {\n    reviewedProduct: { totalCount },\n  } = useProfileProductReviewStateContext();\n\n  return <TotalCount title=\"작성 완료 후기\" count={totalCount} />;\n};\n\nconst EmptyReviewedProduct = () => (\n  <div className=\"empty-list\">\n    <p>작성완료 리뷰가 없습니다.</p>\n  </div>\n);\n\nconst ProductReviewedList = () => {\n  // state\n  const {\n    reviewedProduct: { totalCount },\n  } = useProfileProductReviewStateContext();\n  const { reviewConfig } = useProductReviewStateContext();\n\n  // action\n  const { fetchProfileReviewedProducts } = useProfileProductReviewActionContext();\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (param) => {\n      const { data } = await fetchProfileReviewedProducts(param);\n\n      return data.items.map((item) => ({\n        ...item,\n        memberId: '',\n        myReview: true,\n      }));\n    },\n  });\n\n  const resetReviewedProducts = () => {\n    fetchInitialItems();\n  };\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  useEffect(() => {\n    reviewConfig?.expandedReviewConfig && resetReviewedProducts();\n  }, [reviewConfig?.expandedReviewConfig?.allReviewCntPerPage]);\n\n  return (\n    <div className=\"profile-list\">\n      <ReviewedProductTotalCount />\n      <VisibleComponent\n        shows={totalCount > 0}\n        TruthyComponent={\n          <ReviewList\n            reviews={accumulativeItems}\n            onModify={resetReviewedProducts}\n            onDelete={resetReviewedProducts}\n            showsProductInfo={true}\n          />\n        }\n        FalsyComponent={<EmptyReviewedProduct />}\n      />\n      <VisibleComponent\n        shows={accumulativeItems.length > 0}\n        TruthyComponent={<InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />}\n      />\n      <ListSkeleton isLoading={isLoading} className=\"product-board-list__items\" />\n    </div>\n  );\n};\n\nexport default ProductReviewedList;\n","import { string, number } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCount = ({ title, count }) => (\n  <p className=\"my-page__total-count\">\n    {title}\n    <span className=\"my-page__count\">\n      <span>{convertToKoreanCurrency(count)}</span> 건\n    </span>\n  </p>\n);\n\nTotalCount.propTypes = {\n  title: string,\n  count: number,\n};\n\nexport default TotalCount;\n","import TotalCount from './TotalCount';\n\nexport default TotalCount;\n"],"names":[],"sourceRoot":""}