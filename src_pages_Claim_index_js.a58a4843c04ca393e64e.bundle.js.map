{"version":3,"file":"src_pages_Claim_index_js.a58a4843c04ca393e64e.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7BA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClBA;AAEA;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AAEA;AAiBA;AAhBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChFA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAEA;AAAA;AAKA;AAKA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;AC7JA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AADA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AADA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAdA;AAAA;AAAA;AAgBA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;ACzCA;AAEA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1DA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AAEA;AASA;AAEA;AACA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAKA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;ACpSA;AACA;AASA;AAKA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/claim/ClaimProvider/ClaimProvider.js","webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/common/QuantityChanger/QuantityChanger.js","webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/common/Radio/Radio.js","webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/common/Thumbs/ThumbItem.js","webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/common/VisibleComponent/VisibleComponent.js","webpack://@shopby/react-skin/./node_modules/@shopby/react-components/dist/esm/utils/provider.js","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/OrderNoLabel/OrderNoLabel.jsx","webpack://@shopby/react-skin/./src/components/OrderNoLabel/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbItem/ProductThumbItem.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/pages/Claim/Claim.jsx","webpack://@shopby/react-skin/./src/pages/Claim/ClaimAccountForm.jsx","webpack://@shopby/react-skin/./src/pages/Claim/ClaimButtons.jsx","webpack://@shopby/react-skin/./src/pages/Claim/ClaimProductTable.jsx","webpack://@shopby/react-skin/./src/pages/Claim/ClaimReasonForm.jsx","webpack://@shopby/react-skin/./src/pages/Claim/CollectionComment.jsx","webpack://@shopby/react-skin/./src/pages/Claim/CollectionInfoForm.jsx","webpack://@shopby/react-skin/./src/pages/Claim/index.js","webpack://@shopby/react-skin/./src/pages/Claim/useValidateClaimFormMaker.jsx","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js","webpack://@shopby/react-skin/./node_modules/lodash-es/_basePick.js","webpack://@shopby/react-skin/./node_modules/lodash-es/pick.js"],"sourcesContent":["var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(e){for(var t,r=1,a=arguments.length;r<a;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},__assign.apply(this,arguments)},__read=this&&this.__read||function(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var a,n,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=o.next()).done;)i.push(a.value)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return i};import{jsx as _jsx}from\"react/jsx-runtime\";import{createContext,useCallback,useContext,useMemo,useState}from\"react\";import{cloneDeep,merge,omit}from\"lodash-es\";import{executeHelper,claimHelper,parsePhoneNumber}from\"@shopby/shared\";import{makeStateUpdater}from\"../../utils\";var ClaimActionContext=createContext(null),ClaimStateContext=createContext(null),_a=claimHelper.claim,Helper=_a.Helper,QUERY_KEY=_a.QUERY_KEY,MUTATION_KEY=_a.MUTATION_KEY;export var DEFAULT_CLAIM_PROVIDER_STATE={claimInfo:null,allClaimableOptions:[],claimSelectStatus:{},returnWay:\"SELLER_COLLECT\",claimReason:\"\",claimReasonDetail:\"\",returnAddress:{addressNo:0,addressName:\"\",receiverAddress:\"\",receiverName:\"\",countryCd:\"KR\",receiverZipCd:\"\",receiverDetailAddress:\"\",deliveryMemo:\"\",receiverContact1:{carrierNumber:\"\",firstSerial:\"\",secondSerial:\"\"},receiverContact2:{carrierNumber:\"\",firstSerial:\"\",secondSerial:\"\"},receiverJibunAddress:\"\",customsIdNumber:\"\"},buyerReturnInfo:{deliveryCompany:\"\",invoiceNo:\"\"},accountForRefund:{bank:\"\",bankAccount:\"\",bankDepositorName:\"\"},isAccountFormNecessary:!1,isCollectionInfoFormNecessary:!1};var ClaimProvider=function(e){var t=e.claimType,r=e.children,a=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.claimInfo),2),n=a[0],o=a[1],i=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.allClaimableOptions),2),c=i[0],u=i[1],s=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.claimSelectStatus),2),l=s[0],_=s[1],d=useMemo((function(){return Object.values(l).reduce((function(e,t){return t.isChecked?e+1:e}),0)}),[l]),E=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.returnWay),2),A=E[0],C=E[1],m=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.claimReason),2),R=m[0],T=m[1],I=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.claimReasonDetail),2),O=I[0],f=I[1],p=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.returnAddress),2),v=p[0],S=p[1],N=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.buyerReturnInfo),2),y=N[0],D=N[1],L=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.accountForRefund),2),U=L[0],M=L[1],Y=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.isAccountFormNecessary),2),b=Y[0],x=Y[1],F=__read(useState(DEFAULT_CLAIM_PROVIDER_STATE.isCollectionInfoFormNecessary),2),P=F[0],h=F[1],k=useMemo((function(){return executeHelper(new Helper)}),[]),g=k.executeQuery,K=k.executeMutation,V=K(MUTATION_KEY.FETCH_CLAIM_INFO_BY_ORDER_OPTION_NO).mutate,H=K(MUTATION_KEY.CHANGE_CLAIM_AMOUNT).mutate,Q=K(MUTATION_KEY.TOGGLE_ONE_ORDER_OPTION).mutate,j=K(MUTATION_KEY.CANCEL_ORDER).mutate,B=K(MUTATION_KEY.CANCEL_ORDER_OPTION_NOS).mutate,w=K(MUTATION_KEY.RETURN_ORDER_OPTION_NOS).mutate,W=K(MUTATION_KEY.EXCHANGE_ONE_ORDER_OPTION).mutate,G=K(MUTATION_KEY.WITHDRAW_CLAIM_BY_ORDER_OPTION_NO).mutate,X=function(){g(QUERY_KEY.QUERY_CLAIM_SELECT_STATUS,{onSuccess:function(e){var t=e.data;_(null!=t?t:{})}})},J=useCallback(makeStateUpdater(S),[S]),Z=useCallback(makeStateUpdater(M),[M]),q=function(e){var r,a={claimReasonDetail:O,bankAccountInfo:b?U:void 0,productCnt:d,claimReasonType:R,returnWayType:P?A:void 0,deliveryCompanyType:\"BUYER_DIRECT_RETURN\"===A&&y.deliveryCompany||void 0,claimImageUrls:[],returnAddress:\"SELLER_COLLECT\"===A?__assign(__assign({},v),{receiverContact1:Object.values(v.receiverContact1).filter(Boolean).join(\"-\"),receiverContact2:Object.values(v.receiverContact2).filter(Boolean).join(\"-\")}):void 0,invoiceNo:\"BUYER_DIRECT_RETURN\"===A?y.invoiceNo:void 0,saveBankAccountInfo:null!==(r=null==e?void 0:e.saveBankAccountInfo)&&void 0!==r&&r};if(\"CANCEL\"===t){var n=omit(a,[\"returnWayType\",\"deliveryCompanyType\",\"claimImageUrls\",\"returnAddress\",\"invoiceNo\"]);return B({payload:n})}return\"EXCHANGE\"===t?W({payload:a}):w({payload:a})},z=useCallback((function(e){return j({payload:{orderNo:e,claimReasonType:\"OTHERS_BUYER\",claimReasonDetail:\"\"}})}),[]),$=useMemo((function(){return{fetchClaimInfo:function(e){return V({payload:{orderOptionNo:e,claimType:t},onSuccess:function(){g(QUERY_KEY.QUERY_CLAIM_INFO,{onSuccess:function(e){var t,r,a=e.data;if(o(a),null==a?void 0:a.returnAddress){var n=a.returnAddress,i=n.receiverContact1,c=n.receiverContact2;J(__assign(__assign({},a.returnAddress),{receiverContact1:merge(cloneDeep(DEFAULT_CLAIM_PROVIDER_STATE.returnAddress.receiverContact1),null!==(t=parsePhoneNumber(i))&&void 0!==t?t:{}),receiverContact2:merge(cloneDeep(DEFAULT_CLAIM_PROVIDER_STATE.returnAddress.receiverContact2),null!==(r=parsePhoneNumber(c))&&void 0!==r?r:{})}))}if(null==a?void 0:a.refundAccount){var u=a.refundAccount,s=u.bank,l=u.bankAccount,_=u.bankDepositorName;Z({bank:null!=s?s:\"\",bankAccount:null!=l?l:\"\",bankDepositorName:null!=_?_:\"\"})}}}),g(QUERY_KEY.QUERY_ALL_CLAIMABLE_OPTIONS,{onSuccess:function(e){var t=e.data;u(t)}}),g(QUERY_KEY.QUERY_IS_COLLECTION_INFO_NECESSARY,{onSuccess:function(e){var t=e.data;h(t)}}),g(QUERY_KEY.QUERY_IS_ACCOUNT_FOR_REFUND_NECESSARY,{onSuccess:function(e){var t=e.data;x(t)}}),X()}})},changeClaimAmount:function(e){return H({payload:e,onSuccess:function(){X()}})},toggleOneOrderOption:function(e){return Q({payload:e,onSuccess:function(){X()}})},updateReturnWay:function(e){C(e)},updateClaimReason:function(e){T(e)},updateClaimReasonDetail:function(e){f(e)},updateReturnAddress:J,updateBuyerReturnInfo:makeStateUpdater(D),updateAccountForRefund:Z,claim:q,cancelOrder:z,withdrawClaimByOrderOptionNo:function(e){return G({payload:{orderOptionNo:e}})}}}),[q]);return _jsx(ClaimActionContext.Provider,__assign({value:$},{children:_jsx(ClaimStateContext.Provider,__assign({value:{claimInfo:n,claimSelectStatus:l,allClaimableOptions:c,checkedOptionAmount:d,returnWay:A,claimReason:R,claimReasonDetail:O,returnAddress:v,buyerReturnInfo:y,accountForRefund:U,isAccountFormNecessary:b,isCollectionInfoFormNecessary:P}},{children:r}))}))};export var useClaimActionContext=function(){var e=useContext(ClaimActionContext);if(!e)throw new Error(\"INVALID_ClaimActionContext\");return e};export var useClaimStateContext=function(){var e=useContext(ClaimStateContext);if(!e)throw new Error(\"INVALID_ClaimStateContext\");return e};export default ClaimProvider;","var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(n){for(var a,t=1,e=arguments.length;t<e;t++)for(var i in a=arguments[t])Object.prototype.hasOwnProperty.call(a,i)&&(n[i]=a[i]);return n},__assign.apply(this,arguments)},__read=this&&this.__read||function(n,a){var t=\"function\"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var e,i,r=t.call(n),l=[];try{for(;(void 0===a||a-- >0)&&!(e=r.next()).done;)l.push(e.value)}catch(n){i={error:n}}finally{try{e&&!e.done&&(t=r.return)&&t.call(r)}finally{if(i)throw i.error}}return l};import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";import{useMemo,useState}from\"react\";import{TextField}from\"../../common/TextField\";var filterQuantity=function(n){var a=n.value,t=n.max,e=void 0===t?1/0:t,i=n.min,r=void 0===i?-1/0:i;if(e<r)return console.error(\"설정된 max 값이 min 값보다 작습니다.\"),a;var l=a;return l>e&&(l=e),l<r&&(l=r),l},QuantityChanger=function(n){var a=n.value,t=n.onChange,e=n.initialValue,i=n.max,r=n.min,l=void 0===r?1:r,u=n.disabled,s=void 0!==u&&u,o=__read(useState(e?filterQuantity({value:e,max:i,min:l}):0),2),c=o[0],m=o[1],f=useMemo((function(){return a?filterQuantity({value:a,max:i,min:l}):null}),[a]),_=function(n){if(null!==f){var a=filterQuantity({value:f+n,max:i,min:l});a!==f&&(null==t||t(a))}else{var e=filterQuantity({value:c+n,max:i,min:l});e!==c&&(null==t||t(e),m(e))}};return _jsxs(\"span\",__assign({className:\"quantity-changer\"},{children:[_jsx(\"button\",__assign({className:\"quantity-changer__decrease-btn\",onClick:function(){_(-1)},disabled:s},{children:\"-\"})),_jsx(TextField,{className:\"quantity-changer__input\",value:null===f?c:f,valid:\"NUMBER\",onChange:function(n){var a=n.currentTarget,e=filterQuantity({value:Number(a.value),max:i,min:l});if(null===f)return null==t||t(e),void m(e);null==t||t(e)},disabled:s}),_jsx(\"button\",__assign({className:\"quantity-changer__increase-btn\",onClick:function(){_(1)},disabled:s},{children:\"+\"}))]}))};export default QuantityChanger;","var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(s){for(var e,a=1,r=arguments.length;a<r;a++)for(var t in e=arguments[a])Object.prototype.hasOwnProperty.call(e,t)&&(s[t]=e[t]);return s},__assign.apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var a={};for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&e.indexOf(r)<0&&(a[r]=s[r]);if(null!=s&&\"function\"==typeof Object.getOwnPropertySymbols){var t=0;for(r=Object.getOwnPropertySymbols(s);t<r.length;t++)e.indexOf(r[t])<0&&Object.prototype.propertyIsEnumerable.call(s,r[t])&&(a[r[t]]=s[r[t]])}return a};import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";import{Icon}from\"../Icon\";var Radio=function(s){var e=s.label,a=s.className,r=void 0===a?\"\":a,t=__rest(s,[\"label\",\"className\"]);return _jsxs(\"label\",__assign({className:\"check-radio \".concat(r)},{children:[_jsx(\"input\",__assign({},t,{type:\"radio\"})),_jsx(\"span\",__assign({className:\"check-radio__ico\"},{children:_jsx(Icon,{name:\"check-white\"})})),_jsx(\"span\",__assign({className:\"check-radio__label\"},{children:e}))]}))};export default Radio;","var __assign=this&&this.__assign||function(){return __assign=Object.assign||function(s){for(var a,i=1,e=arguments.length;i<e;i++)for(var t in a=arguments[i])Object.prototype.hasOwnProperty.call(a,t)&&(s[t]=a[t]);return s},__assign.apply(this,arguments)};import{Fragment as _Fragment,jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";import{isAgeVerified}from\"@shopby/shared/utils\";var ThumbItem=function(s){var a=s.href,i=s.HoverViewComponent,e=void 0===i?_jsx(_Fragment,{}):i,t=s.resize,n=void 0===t?\"\":t,_=s.adult,r=s.src,m=s.children,c=s.className,l=void 0===c?\"\":c,o=s.alt,d=void 0===o?\"\":o;return _jsxs(\"div\",__assign({className:\"thumb-item \".concat(l)},{children:[_jsxs(\"div\",__assign({className:\"thumb-item__media\"},{children:[_jsxs(\"a\",__assign({href:a,className:\"thumb-item__img-box\"},{children:[_&&!isAgeVerified()&&_jsx(\"span\",__assign({className:\"bg bg--adult thumb-item__adult\"},{children:_jsx(\"span\",__assign({className:\"a11y\"},{children:\"성인 인증이 필요 합니다.\"}))})),r&&(!_||isAgeVerified())&&_jsx(\"span\",__assign({className:\"thumb-item__img\"},{children:_jsx(\"img\",{src:\"\".concat(r).concat(n?\"?\".concat(n):\"\"),alt:d,loading:\"lazy\"})}))]})),e]})),m&&_jsx(\"div\",__assign({className:\"thumb-item__info\"},{children:m}))]}))};export default ThumbItem;","import{Fragment as _Fragment,jsx as _jsx}from\"react/jsx-runtime\";var VisibleComponent=function(n){var t=n.shows,o=n.TruthyComponent,e=n.FalsyComponent,r=void 0===e?_jsx(_Fragment,{}):e;return\"function\"==typeof t&&t()||t?o:r};export default VisibleComponent;","import { cloneDeep, merge } from 'lodash-es';\nvar makeStateUpdater = function (setState) {\n    return function (partialState) {\n        setState(function (prev) { return merge(cloneDeep(prev), partialState); });\n    };\n};\nexport { makeStateUpdater };\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { string, oneOfType, node, element } from 'prop-types';\n\nconst OrderNoLabel = ({ dateLabel, orderNo, children }) => (\n  <div className=\"order-no-label\">\n    <span className=\"order-no-label__order-no-wrap\">\n      {dateLabel}\n      <span className=\"order-no-label__no\">{orderNo}</span>\n    </span>\n    {children}\n  </div>\n);\n\nexport default OrderNoLabel;\n\nOrderNoLabel.propTypes = {\n  dateLabel: string,\n  orderNo: string,\n  children: oneOfType([node, element]),\n};\n","import OrderNoLabel from './OrderNoLabel';\n\nexport default OrderNoLabel;\n","import { string, number, arrayOf, shape, bool, func } from 'prop-types';\n\nimport { QuantityChanger, ThumbItem, VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../OptionLabel';\n\nconst ProductThumbItem = ({\n  productNo = 0,\n  imageUrl = '',\n  brandName = '',\n  productName = '',\n  orderCnt,\n  buyAmt,\n  optionName = '',\n  optionValue = '',\n  optionInputs = [],\n  usesQuantityChanger,\n  quantityChangerValue,\n  onQuantityChange,\n  frontDisplayYn = 'Y',\n  OptionComponent = null,\n  AmountComponent = null,\n  isRedirectingDisabled = false,\n}) => {\n  if (!frontDisplayYn) return <></>;\n\n  return (\n    <ThumbItem\n      href={isRedirectingDisabled ? '#' : `/product-detail?productNo=${productNo}`}\n      src={imageUrl}\n      className=\"product-thumb-item\"\n      alt={productName}\n    >\n      <VisibleComponent shows={brandName} TruthyComponent={<p className=\"product-thumb-item__brand\">{brandName}</p>} />\n      <div>\n        <p className=\"product-thumb-item__name\">{productName}</p>\n        <VisibleComponent\n          shows={optionName || optionInputs.length > 0}\n          TruthyComponent={\n            <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n          }\n        />\n        {OptionComponent && <OptionComponent />}\n      </div>\n      <div className=\"product-thumb-item__amount-wrap\">\n        <ul className=\"product-thumb-item__amount\">\n          {orderCnt >= 0 && <li>{orderCnt}개 </li>}\n          {buyAmt >= 0 && <li>{convertToKoreanCurrency(buyAmt)}원</li>}\n        </ul>\n        {AmountComponent && <AmountComponent />}\n        {usesQuantityChanger && <QuantityChanger value={quantityChangerValue} onChange={onQuantityChange} />}\n      </div>\n    </ThumbItem>\n  );\n};\nexport default ProductThumbItem;\n\nProductThumbItem.propTypes = {\n  frontDisplayYn: bool,\n  brandName: string,\n  productName: string.isRequired,\n  orderCnt: number,\n  buyAmt: number,\n  imageUrl: string,\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(\n    shape({\n      inputLabel: string,\n      inputValue: string,\n    })\n  ),\n  productNo: number,\n  OptionComponent: func,\n  AmountComponent: func,\n  usesQuantityChanger: bool,\n  quantityChangerValue: number,\n  onQuantityChange: func,\n  isRedirectingDisabled: bool,\n};\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { useMemo, useEffect, useRef } from 'react';\nimport { useSearchParams, useParams } from 'react-router-dom';\n\nimport { pick } from 'lodash-es';\nimport { oneOf } from 'prop-types';\n\nimport {\n  ClaimProvider,\n  useClaimActionContext,\n  useClaimStateContext,\n  useModalActionContext,\n} from '@shopby/react-components';\nimport { CLAIM_TYPE_MAP } from '@shopby/shared';\n\nimport OrderNoLabel from '../../components/OrderNoLabel';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport ClaimAccountForm from './ClaimAccountForm';\nimport ClaimButtons from './ClaimButtons';\nimport ClaimProductTable from './ClaimProductTable';\nimport ClaimReasonForm from './ClaimReasonForm';\nimport CollectionComment from './CollectionComment';\nimport CollectionInfoForm from './CollectionInfoForm';\nimport useValidateClaimFormMaker from './useValidateClaimFormMaker';\n\nconst ClaimContent = ({ claimType }) => {\n  const {\n    claimInfo,\n    allClaimableOptions,\n    checkedOptionAmount,\n    isAccountFormNecessary,\n    isCollectionInfoFormNecessary,\n    returnWay,\n  } = useClaimStateContext();\n  const { fetchClaimInfo } = useClaimActionContext();\n  const { toggleOneOrderOption } = useClaimActionContext();\n  const { openAlert } = useModalActionContext();\n  const { orderOptionNo } = useParams();\n\n  const refs = {\n    claimReasonSelectRef: useRef(),\n    claimReasonDetailTextareaRef: useRef(),\n    receiverNameInputRef: useRef(),\n    searchZipCodeBtnRef: useRef(),\n    mobilePhoneNumberInputRef: useRef(),\n    phoneNumberInputRef: useRef(),\n    bankSelectRef: useRef(),\n    bankAccountInputRef: useRef(),\n    bankDepositorNameInputRef: useRef(),\n  };\n\n  const { validate } = useValidateClaimFormMaker({\n    refs,\n    activeStatus: {\n      receiverName: isCollectionInfoFormNecessary && returnWay === 'SELLER_COLLECT',\n      address: isCollectionInfoFormNecessary && returnWay === 'SELLER_COLLECT',\n      mobilePhoneNumber: isCollectionInfoFormNecessary && returnWay === 'SELLER_COLLECT',\n      phoneNumber: false,\n      accountForRefund: isAccountFormNecessary,\n    },\n  });\n\n  const claimTypeLabel = useMemo(() => CLAIM_TYPE_MAP[claimType] ?? '', [claimType]);\n  const dateLabel = useMemo(\n    () => claimInfo?.originalOption.orderStatusDate.registerYmdt.slice(0, 10) ?? '',\n    [claimInfo]\n  );\n  const orderNo = useMemo(() => claimInfo?.originalOption.orderNo ?? '', [claimInfo]);\n\n  const isAllChecked = useMemo(\n    () => checkedOptionAmount === allClaimableOptions.length,\n    [checkedOptionAmount, allClaimableOptions]\n  );\n\n  useLayoutChanger({\n    title: `${claimTypeLabel} 신청`,\n    hasCartBtnOnHeader: true,\n    hasBackBtnOnHeader: true,\n  });\n\n  useEffect(() => {\n    if (!orderOptionNo || !Object.keys(CLAIM_TYPE_MAP).includes(claimType)) {\n      openAlert({\n        message: '올바른 접근 경로가 아닙니다. 메인으로 돌아갑니다.',\n        onClose: () => {\n          location.replace('/');\n        },\n      });\n\n      return;\n    }\n    fetchClaimInfo(orderOptionNo);\n  }, [orderOptionNo]);\n\n  const handleToggleAllCheckboxBtnClick = () => {\n    allClaimableOptions.forEach(({ orderOptionNo }) =>\n      toggleOneOrderOption({ orderOptionNo: orderOptionNo.toString(), isChecked: !isAllChecked })\n    );\n  };\n\n  return (\n    <div className=\"claim\">\n      <OrderNoLabel dateLabel={dateLabel} orderNo={orderNo}>\n        <button className=\"claim__toggle-all-btn\" onClick={handleToggleAllCheckboxBtnClick}>\n          {isAllChecked ? '선택 해제' : '전체 선택'}\n        </button>\n      </OrderNoLabel>\n      <ClaimProductTable />\n      <p className=\"claim__amount-info-label\">\n        {isAllChecked ? (\n          <>\n            <span className=\"bold\">모든</span>&nbsp;상품을 선택하셨습니다.\n          </>\n        ) : (\n          <>\n            <span className=\"bold\">{checkedOptionAmount}개</span>의 상품을 선택하셨습니다.\n          </>\n        )}\n      </p>\n\n      <ClaimReasonForm refs={pick(refs, ['claimReasonSelectRef', 'claimReasonDetailTextareaRef'])} />\n      {isAccountFormNecessary && (\n        <ClaimAccountForm refs={pick(refs, ['bankSelectRef', 'bankAccountInputRef', 'bankDepositorNameInputRef'])} />\n      )}\n      {isCollectionInfoFormNecessary && (\n        <>\n          <CollectionInfoForm\n            refs={pick(refs, [\n              'receiverNameInputRef',\n              'searchZipCodeBtnRef',\n              'mobilePhoneNumberInputRef',\n              'phoneNumberInputRef',\n            ])}\n          />\n          <CollectionComment returnWay={returnWay} returnWarehouseLabel={claimInfo.returnWarehouse.summary} />\n        </>\n      )}\n\n      <ClaimButtons claimTypeLabel={claimTypeLabel} validate={validate} orderNo={claimInfo?.originalOption.orderNo} />\n    </div>\n  );\n};\n\nClaimContent.propTypes = {\n  claimType: oneOf(['EXCHANGE', 'CANCEL', 'RETURN']),\n};\n\nconst Claim = () => {\n  const [searchParams] = useSearchParams();\n  const claimType = useMemo(() => searchParams.get('claimType'), [searchParams]);\n  return (\n    <ClaimProvider claimType={claimType}>\n      <ClaimContent claimType={claimType} />\n    </ClaimProvider>\n  );\n};\n\nexport default Claim;\n","import { shape, object } from 'prop-types';\n\nimport { SelectBox, TextField, useClaimActionContext, useClaimStateContext } from '@shopby/react-components';\n\nimport { BANK_OPTIONS, INVOICE_NO_MAX_LENGTH, NAME_INPUT_MAX_LENGTH } from '../../constants/form';\n\nconst ClaimAccountForm = ({ refs }) => {\n  const { bankSelectRef, bankAccountInputRef, bankDepositorNameInputRef } = refs ?? {};\n\n  const {\n    accountForRefund: { bank, bankAccount, bankDepositorName },\n  } = useClaimStateContext();\n  const { updateAccountForRefund } = useClaimActionContext();\n\n  const handleBankSelect = ({ currentTarget: { value: bank } }) => {\n    updateAccountForRefund({ bank });\n  };\n\n  const handleBankAccountTextFieldChange = ({ currentTarget: { value: bankAccount } }) => {\n    updateAccountForRefund({ bankAccount });\n  };\n\n  const handleBankDepositorNameTextFieldChange = ({ currentTarget: { value: bankDepositorName } }) => {\n    updateAccountForRefund({ bankDepositorName });\n  };\n\n  return (\n    <section className=\"claim__section claim__account\">\n      <p className=\"claim__title\">입금 받으실 계좌</p>\n      <ul className=\"claim__account-inputs\">\n        <li>\n          <label htmlFor=\"bankSelect\">은행</label>\n          <SelectBox\n            ref={bankSelectRef}\n            id=\"bankSelect\"\n            options={BANK_OPTIONS}\n            className=\"claim__select-box\"\n            hasEmptyOption={true}\n            emptyOptionLabel=\"은행사를 선택하세요.\"\n            value={bank}\n            onSelect={handleBankSelect}\n          />\n        </li>\n        <li>\n          <label htmlFor=\"bankAccountInput\">계좌번호</label>\n          <TextField\n            id=\"bankAccountInput\"\n            ref={bankAccountInputRef}\n            placeholder=\"'-' 없이 입력하세요.\"\n            value={bankAccount}\n            onChange={handleBankAccountTextFieldChange}\n            valid={'NUMBER'}\n            maxLength={INVOICE_NO_MAX_LENGTH}\n          />\n        </li>\n        <li>\n          <label htmlFor=\"bankDepositorNameTextField\">예금주</label>\n          <TextField\n            id=\"bankDepositorNameTextField\"\n            ref={bankDepositorNameInputRef}\n            placeholder=\"예금주를 입력하세요.\"\n            value={bankDepositorName}\n            onChange={handleBankDepositorNameTextFieldChange}\n            maxLength={NAME_INPUT_MAX_LENGTH}\n          />\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nexport default ClaimAccountForm;\n\nClaimAccountForm.propTypes = {\n  refs: shape({\n    bankSelectRef: object,\n    bankAccountInputRef: object,\n    bankDepositorNameInputRef: object,\n  }),\n};\n","import { useNavigate } from 'react-router-dom';\n\nimport { string, func } from 'prop-types';\n\nimport { Button, useClaimActionContext, useModalActionContext } from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../components/ErrorBoundary';\n\nconst ClaimButtons = ({ claimTypeLabel, validate, orderNo }) => {\n  const navigate = useNavigate();\n  const { claim } = useClaimActionContext();\n  const { openAlert } = useModalActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const handleClaimBtnClick = async () => {\n    try {\n      if (!validate?.()) return;\n      await claim();\n\n      openAlert({\n        message: `${claimTypeLabel} 신청이 완료되었습니다.`,\n        onClose: () => {\n          navigate(`/orders/${orderNo}`);\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const handleCancelBtnClick = () => {\n    navigate(-1);\n  };\n\n  return (\n    <div className=\"claim__section claim__section--no-padding claim__btns\">\n      <Button className=\"claim__btn\" label=\"취소하기\" onClick={handleCancelBtnClick} />\n      <Button className=\"claim__btn claim__btn--claim\" label={`${claimTypeLabel} 신청`} onClick={handleClaimBtnClick} />\n    </div>\n  );\n};\n\nexport default ClaimButtons;\n\nClaimButtons.propTypes = {\n  claimTypeLabel: string.isRequired,\n  validate: func,\n  orderNo: string.isRequired,\n};\n","import { Checkbox, useClaimActionContext, useClaimStateContext } from '@shopby/react-components';\n\nimport ProductThumbItem from '../../components/ProductThumbItem';\n\nconst ClaimProductTable = () => {\n  const { allClaimableOptions, claimSelectStatus } = useClaimStateContext();\n  const { toggleOneOrderOption, changeClaimAmount } = useClaimActionContext();\n\n  const handleClaimAmountChange = (value, orderOptionNo) => {\n    changeClaimAmount({ [orderOptionNo]: value });\n  };\n\n  return (\n    <section className=\"claim__section claim__products\">\n      {allClaimableOptions.map(\n        ({ brandName, productName, optionName, optionValue, price, imageUrl, orderOptionNo, productNo }) => (\n          <div key={orderOptionNo} className=\"claim__product\">\n            <Checkbox\n              isRounded={true}\n              checked={claimSelectStatus[orderOptionNo]?.isChecked}\n              onChange={() => toggleOneOrderOption({ orderOptionNo: orderOptionNo.toString() })}\n            />\n            <ProductThumbItem\n              imageUrl={imageUrl}\n              brandName={brandName ?? ''}\n              productName={productName}\n              productNo={productNo}\n              optionName={optionName}\n              optionValue={optionValue}\n              buyAmt={price.buyAmt}\n              usesQuantityChanger={true}\n              quantityChangerValue={claimSelectStatus[orderOptionNo]?.claimAmount}\n              onQuantityChange={(quantity) => handleClaimAmountChange(quantity, orderOptionNo)}\n            />\n          </div>\n        )\n      )}\n    </section>\n  );\n};\n\nexport default ClaimProductTable;\n","import { useMemo } from 'react';\n\nimport { shape, object } from 'prop-types';\n\nimport { SelectBox, useClaimActionContext, useClaimStateContext } from '@shopby/react-components';\n\nimport { CLAIM_REASON_DETAIL_MAX_LENGTH } from '../../constants/form';\n\nconst ClaimReasonForm = ({ refs }) => {\n  const { claimReasonSelectRef, claimReasonDetailTextareaRef } = refs ?? {};\n  const { claimInfo, claimReason, claimReasonDetail } = useClaimStateContext();\n  const { updateClaimReason, updateClaimReasonDetail } = useClaimActionContext();\n\n  const claimReasonOptions = useMemo(\n    () => claimInfo?.claimReasonTypes.map(({ claimReasonType: value, label }) => ({ label, value })) ?? [],\n    [claimInfo?.claimReasonTypes]\n  );\n\n  const handleClaimReasonSelect = ({ currentTarget: { value } }) => {\n    updateClaimReason(value);\n  };\n\n  const handleClaimReasonDetailChange = ({ currentTarget: { value } }) => {\n    const isLengthOverflow = value.length > CLAIM_REASON_DETAIL_MAX_LENGTH;\n\n    updateClaimReasonDetail(isLengthOverflow ? value.slice(0, CLAIM_REASON_DETAIL_MAX_LENGTH) : value);\n  };\n\n  return (\n    <section className=\"claim__section claim__reason\">\n      <SelectBox\n        ref={claimReasonSelectRef}\n        className=\"claim__select-box\"\n        options={claimReasonOptions}\n        hasEmptyOption={true}\n        emptyOptionLabel=\"사유를 선택해주세요\"\n        value={claimReason}\n        onSelect={handleClaimReasonSelect}\n      />\n      <p className=\"claim__sub-title\">상세 사유</p>\n      <textarea\n        ref={claimReasonDetailTextareaRef}\n        className=\"claim__reason-detail\"\n        placeholder=\"상세 사유를 입력해주세요\"\n        value={claimReasonDetail}\n        onChange={handleClaimReasonDetailChange}\n      />\n    </section>\n  );\n};\n\nexport default ClaimReasonForm;\n\nClaimReasonForm.propTypes = {\n  refs: shape({\n    claimReasonSelectRef: object,\n    claimReasonDetailTextareaRef: object,\n  }),\n};\n","import { oneOfType, string } from 'prop-types';\n\nimport { getCollectionComments } from '../../utils';\n\nconst CollectionComment = ({ returnWay, returnWarehouseLabel }) => (\n  <div className=\"claim__section claim__section--no-padding\">\n    <p className=\"claim__title\">반품 수거 안내</p>\n    <ul className=\"claim__comment\">\n      {getCollectionComments(returnWay, returnWarehouseLabel).map((comment) => (\n        <li key={comment}>{comment}</li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default CollectionComment;\n\nCollectionComment.propTypes = {\n  returnWay: oneOfType(['BUYER_DIRECT_RETURN', 'SELLER_COLLECT']).isRequired,\n  returnWarehouseLabel: string,\n};\n","import { useMemo } from 'react';\n\nimport { shape, object } from 'prop-types';\n\nimport {\n  PhoneNumberInput,\n  Radio,\n  SelectBox,\n  TextField,\n  useClaimActionContext,\n  useClaimStateContext,\n  useMallStateContext,\n} from '@shopby/react-components';\nimport { parsePhoneNumber } from '@shopby/shared';\n\nimport AddressForm from '../../components/AddressForm';\nimport {\n  DELIVERY_COMPANY_OPTIONS,\n  DELIVERY_MEMO_MAX_LENGTH,\n  INVOICE_NO_MAX_LENGTH,\n  NAME_INPUT_MAX_LENGTH,\n  PHONE_CARRIER_NUMBERS_BY_STRING,\n  PHONE_NUMBER_INPUT_SECTIONS,\n  RETURN_WAY_OPTIONS,\n} from '../../constants/form';\n\nconst CollectionInfoForm = ({ refs }) => {\n  const { receiverNameInputRef, searchZipCodeBtnRef, mobilePhoneNumberInputRef, phoneNumberInputRef } = refs ?? {};\n\n  const {\n    claimInfo,\n    returnWay,\n    returnAddress: {\n      receiverName,\n      receiverContact1,\n      receiverContact2,\n      receiverZipCd,\n      receiverAddress,\n      receiverDetailAddress,\n      deliveryMemo,\n    },\n    buyerReturnInfo: { deliveryCompany, invoiceNo },\n  } = useClaimStateContext();\n  const { mallName } = useMallStateContext();\n\n  const isMallShippingArea = claimInfo.originalOption?.shippingAreaType === 'MALL_SHIPPING_AREA';\n\n  const { updateReturnWay, updateReturnAddress, updateBuyerReturnInfo } = useClaimActionContext();\n\n  const returnWarehouse = useMemo(() => {\n    const { receiverName = '', contact = '', summary = '' } = claimInfo?.returnWarehouse ?? {};\n    const dashedContact = contact ? Object.values(parsePhoneNumber(contact, { isWithDash: false })).join('-') : '';\n    return {\n      receiverName,\n      contact: dashedContact,\n      summary,\n    };\n  }, [claimInfo]);\n\n  const handleReceiverNameTextFieldChange = ({ currentTarget: { value } }) => {\n    updateReturnAddress({ receiverName: value });\n  };\n\n  const handleAddressItemClick = ({ zipCode, roadAddress, jibunAddress }) => {\n    updateReturnAddress({ receiverDetailAddress: '' });\n    updateReturnAddress({ receiverZipCd: zipCode, receiverAddress: roadAddress, receiverJibunAddress: jibunAddress });\n  };\n\n  const handleAddressDetailChange = ({ addressDetail }) => {\n    updateReturnAddress({ receiverDetailAddress: addressDetail });\n  };\n\n  const handleMobilePhoneNumberChange = ({ currentTarget: { value } }, type) => {\n    if (PHONE_NUMBER_INPUT_SECTIONS.includes(type)) {\n      updateReturnAddress({\n        receiverContact1: {\n          [type]: value,\n        },\n      });\n    }\n  };\n\n  const handlePhoneNumberChange = ({ currentTarget: { value } }, type) => {\n    if (PHONE_NUMBER_INPUT_SECTIONS.includes(type)) {\n      updateReturnAddress({\n        receiverContact2: {\n          [type]: value,\n        },\n      });\n    }\n  };\n\n  const handleDeliveryMemoTextFieldChange = ({ currentTarget: { value: deliveryMemo } }) => {\n    updateReturnAddress({ deliveryMemo });\n  };\n\n  const handleDeliveryCompanySelect = ({ currentTarget: { value: deliveryCompany } }) => {\n    updateBuyerReturnInfo({ deliveryCompany });\n  };\n\n  const handleInvoiceNoTextFieldChange = ({ currentTarget: { value: invoiceNo } }) => {\n    updateBuyerReturnInfo({ invoiceNo });\n  };\n\n  return (\n    <section className=\"claim__section claim__section--no-padding claim__address\">\n      <p className=\"claim__title\">반품 수거 정보</p>\n      <div className=\"claim__address-form\">\n        <div className=\"claim__address-form-item\">\n          <p className=\"claim__address-form-title\">반품 수거 방법</p>\n          <div className=\"claim__radio-wrap\">\n            {RETURN_WAY_OPTIONS.map((option) => (\n              <Radio\n                key={option.value}\n                className={`claim__radio${option.value === returnWay ? ' claim__radio--checked' : ''}`}\n                name=\"collection-method\"\n                {...option}\n                checked={option.value === returnWay}\n                onChange={() => updateReturnWay(option.value)}\n              />\n            ))}\n          </div>\n        </div>\n\n        {returnWay === 'SELLER_COLLECT' && (\n          <>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">반품자명</p>\n              <TextField\n                ref={receiverNameInputRef}\n                value={receiverName}\n                onChange={handleReceiverNameTextFieldChange}\n                maxLength={NAME_INPUT_MAX_LENGTH}\n              />\n            </div>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">수거지 주소</p>\n              <AddressForm\n                ref={searchZipCodeBtnRef}\n                zipCode={receiverZipCd}\n                address={receiverAddress}\n                addressDetail={receiverDetailAddress}\n                onAddressItemClick={handleAddressItemClick}\n                onAddressDetailChange={handleAddressDetailChange}\n              />\n            </div>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">휴대폰 번호</p>\n              <PhoneNumberInput\n                ref={mobilePhoneNumberInputRef}\n                carrierNumber={receiverContact1?.carrierNumber}\n                firstSerial={receiverContact1?.firstSerial}\n                secondSerial={receiverContact1?.secondSerial}\n                onCarrierNumberSelect={(e) => handleMobilePhoneNumberChange(e, 'carrierNumber')}\n                onFirstSerialChange={(e) => handleMobilePhoneNumberChange(e, 'firstSerial')}\n                onSecondSerialChange={(e) => handleMobilePhoneNumberChange(e, 'secondSerial')}\n              />\n            </div>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">전화 번호</p>\n              <PhoneNumberInput\n                ref={phoneNumberInputRef}\n                carrierNumbersByString={PHONE_CARRIER_NUMBERS_BY_STRING}\n                carrierNumber={receiverContact2?.carrierNumber}\n                firstSerial={receiverContact2?.firstSerial}\n                secondSerial={receiverContact2?.secondSerial}\n                onCarrierNumberSelect={(e) => handlePhoneNumberChange(e, 'carrierNumber')}\n                onFirstSerialChange={(e) => handlePhoneNumberChange(e, 'firstSerial')}\n                onSecondSerialChange={(e) => handlePhoneNumberChange(e, 'secondSerial')}\n              />\n            </div>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">수거 시 참고 사항</p>\n              <TextField\n                placeholder=\"수거 시 요청사항을 입력해주세요.\"\n                value={deliveryMemo}\n                onChange={handleDeliveryMemoTextFieldChange}\n                maxLength={DELIVERY_MEMO_MAX_LENGTH}\n              />\n            </div>\n          </>\n        )}\n\n        {returnWay === 'BUYER_DIRECT_RETURN' && (\n          <>\n            <div className=\"claim__address-form-item\">\n              <p className=\"claim__address-form-title\">반품 주소지</p>\n              <dl className=\"claim__return-address\">\n                <dt>이름</dt>\n                <dd>{isMallShippingArea ? mallName : returnWarehouse.receiverName}</dd>\n                <dt>주소</dt>\n                <dd>{returnWarehouse.summary}</dd>\n                <dt>전화번호</dt>\n                <dd>{returnWarehouse.contact}</dd>\n              </dl>\n            </div>\n            <div className=\"claim__address-form-item \">\n              <p className=\"claim__address-form-title\">반품 접수 정보</p>\n              <SelectBox\n                className=\"claim__select-box\"\n                hasEmptyOption={true}\n                emptyOptionLabel=\"택배사를 선택하세요\"\n                options={DELIVERY_COMPANY_OPTIONS}\n                value={deliveryCompany}\n                onSelect={handleDeliveryCompanySelect}\n              />\n              <TextField\n                placeholder=\"송장번호\"\n                value={invoiceNo}\n                maxLength={INVOICE_NO_MAX_LENGTH}\n                onChange={handleInvoiceNoTextFieldChange}\n                valid={'NUMBER'}\n              />\n              <p className=\"claim__address-form-tip\">※ 반품 접수 정보 입력은 필수가 아닙니다.</p>\n            </div>\n          </>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default CollectionInfoForm;\n\nCollectionInfoForm.propTypes = {\n  refs: shape({\n    receiverNameInputRef: object,\n    searchZipCodeBtnRef: object,\n    mobilePhoneNumberInputRef: object,\n    phoneNumberInputRef: object,\n  }),\n};\n","import Claim from './Claim';\n\nexport default Claim;\n","import { cloneDeep, merge } from 'lodash-es';\n\nimport { useClaimStateContext, useModalActionContext } from '@shopby/react-components';\nimport { POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS, POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS } from '@shopby/shared';\n\nconst DEFAULT_OPTION = {\n  activeStatus: {\n    claimCount: true,\n    claimReason: true,\n    claimReasonDetail: true,\n    accountForRefund: true,\n    receiverName: true,\n    address: true, // true 일 경우 우편번호 및 주소값 함께 검사\n    mobilePhoneNumber: true,\n    phoneNumber: true,\n  },\n  refs: {\n    claimReasonSelectRef: null,\n    claimReasonDetailTextareaRef: null,\n    bankSelectRef: null,\n    bankAccountInputRef: null,\n    bankDepositorNameInputRef: null,\n    receiverNameInputRef: null,\n    searchZipCodeBtnRef: null,\n    mobilePhoneNumberInputRef: null, // PhoneNumberInput 컴포넌트가 사용하는 ref를 넣어야합니다.\n    phoneNumberInputRef: null, // PhoneNumberInput 컴포넌트가 사용하는 ref를 넣어야합니다.\n  },\n};\n\n/**\n * 클레임 페이지 폼 입력값에 대한 유효성 검사 함수를 만듭니다.\n * 인자에 activeStatus를 넘길 때, 유효성 검사를 진행하지 않을 항목을 false로 넘겨주세요.\n * 기본값은 true 입니다.\n *\n * @param {{\n *    claimCount: boolean,\n *    claimReason: boolean,\n *    claimReasonDetail: boolean,\n *    receiverName: boolean,\n *    address: boolean,\n *    mobilePhoneNumber: boolean,\n *    phoneNumber: boolean,\n *    accountForRefund: boolean,\n *  }} activeStatus\n * @param {{\n *    claimReasonSelectRef: ?object ,\n *    claimReasonDetailTextareaRef: ?object,\n *    receiverNameInputRef: ?object,\n *    searchZipCodeBtnRef: ?object,\n *    mobilePhoneNumberInputRef: ?object,\n *    phoneNumberInputRef: ?object,\n * }}\n * @returns\n */\nconst useValidateClaimFormMaker = (option = DEFAULT_OPTION) => {\n  const {\n    activeStatus,\n    refs: {\n      claimReasonSelectRef,\n      claimReasonDetailTextareaRef,\n      receiverNameInputRef,\n      searchZipCodeBtnRef,\n      mobilePhoneNumberInputRef, // PhoneNumberInput 컴포넌트가 사용하는 ref를 넣어야합니다.\n      phoneNumberInputRef, // PhoneNumberInput 컴포넌트가 사용하는 ref를 넣어야합니다.\n      bankSelectRef,\n      bankAccountInputRef,\n      bankDepositorNameInputRef,\n    },\n  } = merge(cloneDeep(DEFAULT_OPTION), option);\n  const { openAlert } = useModalActionContext();\n  const {\n    checkedOptionAmount,\n    claimReason,\n    claimReasonDetail,\n    returnAddress: { receiverName, receiverZipCd, receiverAddress, receiverContact1, receiverContact2 },\n    accountForRefund: { bank, bankAccount, bankDepositorName },\n  } = useClaimStateContext();\n\n  const validation = {\n    isZeroClaimCount: () => {\n      if (checkedOptionAmount > 0) return false;\n\n      openAlert({\n        message: '신청할 상품을 선택해주세요.',\n      });\n\n      return true;\n    },\n    isClaimReasonNotSelected: () => {\n      if (claimReason) return false;\n\n      openAlert({\n        message: '신청 사유를 선택해주세요.',\n        onClose: () => {\n          console.log(claimReasonSelectRef);\n          claimReasonSelectRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isClaimReasonDetailEmpty: () => {\n      if (claimReasonDetail) return false;\n\n      openAlert({\n        message: '상세 사유를 입력해주세요.',\n        onClose: () => {\n          claimReasonDetailTextareaRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isReceiverNameEmpty: () => {\n      if (receiverName) return false;\n\n      openAlert({\n        message: '반품자명을 입력해주세요.',\n        onClose: () => {\n          receiverNameInputRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isReceiverZipCdEmpty: () => {\n      if (receiverZipCd) return false;\n\n      openAlert({\n        message: '우편번호를 입력해주세요.',\n        onClose: () => {\n          searchZipCodeBtnRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isReceiverAddressEmpty: () => {\n      if (receiverAddress) return false;\n\n      openAlert({\n        message: '주소를 입력해주세요.',\n        onClose: () => {\n          searchZipCodeBtnRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isMobilePhoneCarrierNumberEmpty: () => {\n      if (receiverContact1.carrierNumber) return false;\n\n      openAlert({\n        message: '올바른 휴대폰 번호를 입력해주세요.',\n        onClose: () => {\n          mobilePhoneNumberInputRef?.current?.focusCarrierNumber();\n        },\n      });\n\n      return true;\n    },\n    isMobilePhoneFirstSerialInvalid: () => {\n      if (POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS.includes(receiverContact1.firstSerial.length)) return false;\n\n      openAlert({\n        message: '올바른 휴대폰 번호를 입력해주세요.',\n        onClose: () => {\n          mobilePhoneNumberInputRef?.current?.focusFirstSerial();\n        },\n      });\n\n      return true;\n    },\n    isMobilePhoneSecondSerialInvalid: () => {\n      if (POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS.includes(receiverContact1.secondSerial.length)) return false;\n\n      openAlert({\n        message: '올바른 휴대폰 번호를 입력해주세요.',\n        onClose: () => {\n          mobilePhoneNumberInputRef?.current?.focusSecondSerial();\n        },\n      });\n\n      return true;\n    },\n    isPhoneCarrierNumberEmpty: () => {\n      if (receiverContact2.carrierNumber) return false;\n\n      openAlert({\n        message: '올바른 전화 번호를 입력해주세요.',\n        onClose: () => {\n          phoneNumberInputRef?.current?.focusCarrierNumber();\n        },\n      });\n\n      return true;\n    },\n    isPhoneFirstSerialInvalid: () => {\n      if (POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS.includes(receiverContact2.firstSerial.length)) return false;\n\n      openAlert({\n        message: '올바른 전화 번호를 입력해주세요.',\n        onClose: () => {\n          phoneNumberInputRef?.current?.focusFirstSerial();\n        },\n      });\n\n      return true;\n    },\n    isPhoneSecondSerialInvalid: () => {\n      if (POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS.includes(receiverContact2.secondSerial.length)) return false;\n\n      openAlert({\n        message: '올바른 전화 번호를 입력해주세요.',\n        onClose: () => {\n          phoneNumberInputRef?.current?.focusSecondSerial();\n        },\n      });\n\n      return true;\n    },\n    isBankNotSelected: () => {\n      if (bank) return false;\n\n      openAlert({\n        message: '은행사를 선택해주세요.',\n        onClose: () => {\n          bankSelectRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isBankAccountEmpty: () => {\n      if (bankAccount) return false;\n      openAlert({\n        message: '계좌번호를 입력해주세요.',\n        onClose: () => {\n          bankAccountInputRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n    isBankDepositorNameEmpty: () => {\n      if (bankDepositorName) return false;\n\n      openAlert({\n        message: '예금주를 입력해주세요.',\n        onClose: () => {\n          bankDepositorNameInputRef?.current?.focus();\n        },\n      });\n\n      return true;\n    },\n  };\n\n  const validationMap = {\n    // 순서대로 유효성 검사가 진행됩니다.\n    claimCount: [validation.isZeroClaimCount],\n    claimReason: [validation.isClaimReasonNotSelected],\n    claimReasonDetail: [validation.isClaimReasonDetailEmpty],\n    accountForRefund: [\n      validation.isBankNotSelected,\n      validation.isBankAccountEmpty,\n      validation.isBankDepositorNameEmpty,\n    ],\n    receiverName: [validation.isReceiverNameEmpty],\n    address: [validation.isReceiverAddressEmpty],\n    mobilePhoneNumber: [\n      validation.isMobilePhoneCarrierNumberEmpty,\n      validation.isMobilePhoneFirstSerialInvalid,\n      validation.isMobilePhoneSecondSerialInvalid,\n    ],\n    phoneNumber: [\n      validation.isPhoneCarrierNumberEmpty,\n      validation.isPhoneFirstSerialInvalid,\n      validation.isPhoneSecondSerialInvalid,\n    ],\n  };\n\n  const validate = () =>\n    Object.entries(validationMap).every(([validationTarget, validations]) => {\n      if (!activeStatus[validationTarget]) return true;\n\n      return validations.every((validation) => !validation());\n    });\n\n  return { validate };\n};\n\nexport default useValidateClaimFormMaker;\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n"],"names":[],"sourceRoot":""}