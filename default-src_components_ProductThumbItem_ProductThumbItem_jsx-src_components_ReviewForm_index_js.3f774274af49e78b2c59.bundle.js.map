{"version":3,"file":"default-src_components_ProductThumbItem_ProductThumbItem_jsx-src_components_ReviewForm_index_js.3f774274af49e78b2c59.bundle.js","mappings":"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CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvTA;AAEA;AAEA;AAOA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AC7FA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AAEA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AACA;AACA;;;;;;;;;;;;;ACFA;AACA;AASA;AAKA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/BoardNoticeList/BoardNoticeList.jsx","webpack://@shopby/react-skin/./src/components/BoardProductItem/BoardProductItem.jsx","webpack://@shopby/react-skin/./src/components/BoardProductItem/index.js","webpack://@shopby/react-skin/./src/components/ImageFileUpload/ImageFileUpload.jsx","webpack://@shopby/react-skin/./src/components/ImageFileUpload/index.js","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbItem/ProductThumbItem.jsx","webpack://@shopby/react-skin/./src/components/ReviewAccumulation/ReviewAccumulation.jsx","webpack://@shopby/react-skin/./src/components/ReviewAccumulation/index.js","webpack://@shopby/react-skin/./src/components/ReviewForm/ReviewForm.jsx","webpack://@shopby/react-skin/./src/components/ReviewForm/ReviewImage.jsx","webpack://@shopby/react-skin/./src/components/ReviewForm/ReviewTextArea.jsx","webpack://@shopby/react-skin/./src/components/ReviewForm/index.js","webpack://@shopby/react-skin/./src/constants/image.js","webpack://@shopby/react-skin/./src/constants/rate.js","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js"],"sourcesContent":["import { arrayOf, string } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\n\nconst BoardNoticeList = ({ texts = [], title = '유의사항' }) => (\n  <VisibleComponent\n    shows={texts.length > 0}\n    TruthyComponent={\n      <div className=\"board-form__notes\">\n        <dl className=\"board-form__note\">\n          <dt className=\"board-form__note-title\">{title}</dt>\n          {texts.map((text, index) => (\n            <dd key={index} className=\"board-form__note-text\">\n              {text}\n            </dd>\n          ))}\n        </dl>\n      </div>\n    }\n  />\n);\n\nexport default BoardNoticeList;\n\nBoardNoticeList.propTypes = {\n  texts: arrayOf(string).isRequired,\n  title: string,\n};\n","import { string, arrayOf, shape, func, oneOf, number } from 'prop-types';\n\nimport { VisibleComponent, SelectBox } from '@shopby/react-components';\n\nimport { BOARD_IMAGE } from '../../constants/image';\n\nconst BoardProductItem = ({\n  productName,\n  productImageUrl,\n  options = [],\n  onSelect,\n  optionDisplayLabel,\n  optionNo,\n  className = '',\n}) => {\n  const handleOptionSelect = ({ currentTarget: { value } }) => {\n    const selectedOptionNo = Number(value);\n\n    selectedOptionNo > 0 && onSelect?.(selectedOptionNo);\n  };\n\n  return (\n    <div className={`l-panel board-product-item__description ${className}`}>\n      <div className=\"board-product-item__image\">\n        <img src={`${productImageUrl}?${BOARD_IMAGE.THUMB_NAIL_SIZE}`} alt={productName} loading=\"lazy\" />\n      </div>\n      <div className=\"board-product-item__product\">\n        <em className=\"board-product-item__product-name\">{productName}</em>\n        <VisibleComponent\n          shows={options?.length > 1}\n          TruthyComponent={\n            <SelectBox\n              onSelect={handleOptionSelect}\n              options={options}\n              value={optionNo}\n              className=\"board-product-item__option-selector\"\n            />\n          }\n          FalsyComponent={<p className={`board-product-item__option-value`}>{optionDisplayLabel}</p>}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BoardProductItem;\n\nBoardProductItem.propTypes = {\n  productName: string.isRequired,\n  productImageUrl: string.isRequired,\n  options: arrayOf(\n    shape({\n      value: oneOf(['string', 'number']),\n      label: string,\n    })\n  ),\n  onSelect: func,\n  optionDisplayLabel: string,\n  optionNo: number,\n  className: string,\n};\n","import BoardProductItem from './BoardProductItem';\n\nexport default BoardProductItem;\n","import { forwardRef } from 'react';\n\nimport { func, arrayOf, shape, number, string } from 'prop-types';\n\nimport { useImageFileActionContext } from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst ImageFileUpload = forwardRef(\n  (\n    {\n      images = [],\n      limitCount = Infinity,\n      limitFileSizeInMB = Infinity,\n      verifyImageFiles,\n      onChange,\n      accept = 'image/png,image/jpeg,image/gif,image/jpg,image/bmp',\n    },\n    ref\n  ) => {\n    const { postImages } = useImageFileActionContext();\n    const { catchError } = useErrorBoundaryActionContext();\n\n    const handleInputChange = async (event) => {\n      try {\n        const { files } = event.target;\n\n        verifyImageFiles?.(files);\n\n        const { data } = await postImages({\n          files,\n          images,\n          limitFileSizeInMegaBytes: limitFileSizeInMB,\n          limitCount,\n        });\n\n        const fulfilledImages = data.filter(({ status }) => status === 'fulfilled').map(({ value }) => value);\n\n        onChange?.(fulfilledImages);\n\n        ref.current.value = '';\n      } catch (e) {\n        catchError(e);\n      }\n    };\n\n    return <input hidden ref={ref} type=\"file\" multiple accept={accept} onChange={handleInputChange} />;\n  }\n);\n\nImageFileUpload.displayName = 'ImageFileUpload';\n\nexport default ImageFileUpload;\n\nImageFileUpload.propTypes = {\n  images: arrayOf(\n    shape({\n      imageUrl: string,\n      originName: string,\n    })\n  ),\n  onChange: func,\n  verifyImageFiles: func,\n  limitCount: number,\n  limitFileSizeInMB: number,\n  accept: string,\n};\n","import ImageFileUpload from './ImageFileUpload';\n\nexport default ImageFileUpload;\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { string, number, arrayOf, shape, bool, func } from 'prop-types';\n\nimport { QuantityChanger, ThumbItem, VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../OptionLabel';\n\nconst ProductThumbItem = ({\n  productNo = 0,\n  imageUrl = '',\n  brandName = '',\n  productName = '',\n  orderCnt,\n  buyAmt,\n  optionName = '',\n  optionValue = '',\n  optionInputs = [],\n  usesQuantityChanger,\n  quantityChangerValue,\n  onQuantityChange,\n  frontDisplayYn = 'Y',\n  OptionComponent = null,\n  AmountComponent = null,\n  isRedirectingDisabled = false,\n}) => {\n  if (!frontDisplayYn) return <></>;\n\n  return (\n    <ThumbItem\n      href={isRedirectingDisabled ? '#' : `/product-detail?productNo=${productNo}`}\n      src={imageUrl}\n      className=\"product-thumb-item\"\n      alt={productName}\n    >\n      <VisibleComponent shows={brandName} TruthyComponent={<p className=\"product-thumb-item__brand\">{brandName}</p>} />\n      <div>\n        <p className=\"product-thumb-item__name\">{productName}</p>\n        <VisibleComponent\n          shows={optionName || optionInputs.length > 0}\n          TruthyComponent={\n            <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n          }\n        />\n        {OptionComponent && <OptionComponent />}\n      </div>\n      <div className=\"product-thumb-item__amount-wrap\">\n        <ul className=\"product-thumb-item__amount\">\n          {orderCnt >= 0 && <li>{orderCnt}개 </li>}\n          {buyAmt >= 0 && <li>{convertToKoreanCurrency(buyAmt)}원</li>}\n        </ul>\n        {AmountComponent && <AmountComponent />}\n        {usesQuantityChanger && <QuantityChanger value={quantityChangerValue} onChange={onQuantityChange} />}\n      </div>\n    </ThumbItem>\n  );\n};\nexport default ProductThumbItem;\n\nProductThumbItem.propTypes = {\n  frontDisplayYn: bool,\n  brandName: string,\n  productName: string.isRequired,\n  orderCnt: number,\n  buyAmt: number,\n  imageUrl: string,\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(\n    shape({\n      inputLabel: string,\n      inputValue: string,\n    })\n  ),\n  productNo: number,\n  OptionComponent: func,\n  AmountComponent: func,\n  usesQuantityChanger: bool,\n  quantityChangerValue: number,\n  onQuantityChange: func,\n  isRedirectingDisabled: bool,\n};\n","import { useMemo } from 'react';\n\nimport { string, bool } from 'prop-types';\n\nimport { VisibleComponent, useMallStateContext } from '@shopby/react-components';\n\nconst REVIEW_ACCUMULATION_LABEL = {\n  reviewsAccumulation: '텍스트후기',\n  photoReviewsAccumulation: '포토후기',\n};\n\nconst ReviewAccumulation = ({ className = '', showsIcon = true }) => {\n  const {\n    accumulationConfig: { reviewsAccumulationDetail, unit, useReviewsAccumulation },\n  } = useMallStateContext();\n\n  const accumulations = useMemo(\n    () => Object.entries(reviewsAccumulationDetail).filter(([key]) => REVIEW_ACCUMULATION_LABEL[key]),\n    [reviewsAccumulationDetail]\n  );\n\n  const accumulationLength = useMemo(() => accumulations.length, [accumulations]);\n\n  if (!useReviewsAccumulation) return <></>;\n\n  return (\n    <span className={`review-accumulation ${className ?? ''}`}>\n      <VisibleComponent shows={showsIcon} TruthyComponent={<span className=\"ico ico--p-circle\" />} />\n      {accumulations.map(([key, value], index) => {\n        const label = REVIEW_ACCUMULATION_LABEL[key];\n\n        return (\n          <span className=\"review-accumulation__point\" key={`${index}_${label}_review-summary`}>\n            {label} <em>{value}</em> {unit}\n            {index === accumulationLength - 1 ? '적립' : ' / '}\n          </span>\n        );\n      })}\n    </span>\n  );\n};\n\nReviewAccumulation.propTypes = {\n  className: string,\n  showsIcon: bool,\n};\n\nexport default ReviewAccumulation;\n","import ReviewAccumulation from './ReviewAccumulation';\n\nexport default ReviewAccumulation;\n","import { useCallback, useState, useMemo } from \"react\";\n\nimport { string, number, arrayOf, shape, bool, oneOf, func } from \"prop-types\";\n\nimport {\n  Button,\n  RatingStar,\n  useModalActionContext,\n  useProductReviewFormActionContext,\n  useProductReviewStateContext,\n} from \"@shopby/react-components\";\nimport { calculateRatingScoreByCurrentWidth } from \"@shopby/shared\";\n\nimport { RATING_STAR } from \"../../constants/rate\";\nimport BoardNoticeList from \"../BoardNoticeList/BoardNoticeList\";\nimport BoardProductItem from \"../BoardProductItem\";\nimport ReviewAccumulation from \"../ReviewAccumulation\";\n\nimport ReviewImage from \"./ReviewImage\";\nimport ReviewTextArea from \"./ReviewTextArea\";\n\nconst getAccumulationRewardNoticeTextByPhotoReviewConstraints = (\n  reviewConfig,\n  reviewDetail\n) => {\n  const usePhotoAccumulation =\n    reviewConfig.reviewAccumulationInfo.photoReviewsLength > 0;\n\n  if (!usePhotoAccumulation || !reviewDetail.urls.length) {\n    if (\n      reviewConfig.reviewAccumulationInfo.reviewsLength >\n      reviewDetail.content.length\n    ) {\n      return reviewConfig.expandedReviewConfig.accumulationRewardNoticeText;\n    }\n\n    return \"\";\n  }\n\n  if (\n    reviewConfig.reviewAccumulationInfo.photoReviewsLength >\n    reviewDetail.content.length\n  ) {\n    return reviewConfig.expandedReviewConfig.accumulationRewardNoticeText;\n  }\n\n  return \"\";\n};\n\nconst getAccumulationRewardNoticeText = (reviewConfig, reviewDetail) => {\n  if (!reviewConfig?.expandedReviewConfig?.accumulationRewardNoticeText)\n    return \"\";\n\n  if (!reviewConfig?.reviewAccumulationInfo) return \"\";\n\n  if (reviewConfig.reviewAccumulationInfo.useYn === \"N\") return \"\";\n\n  return getAccumulationRewardNoticeTextByPhotoReviewConstraints(\n    reviewConfig,\n    reviewDetail\n  );\n};\n\nconst ReviewForm = ({\n  isRegisterMode = true,\n  reviewNo,\n  productNo,\n  orderOptionNo,\n  optionNo,\n  productName,\n  productImageUrl,\n  reviewImages = [],\n  rate = RATING_STAR.LIMIT_SCORE,\n  content = \"\",\n  optionDisplayLabel,\n  optionName = \"\",\n  optionValue = \"\",\n  orderProductOptionNo,\n  options,\n  onSelect,\n  orderStatusType,\n  onSubmit,\n  onModify,\n  onCancel,\n}) => {\n  const [reviewContent, setReviewContent] = useState(content);\n  const [score, setScore] = useState(rate);\n  const [images, setImages] = useState(reviewImages);\n\n  const { reviewConfig } = useProductReviewStateContext();\n\n  const { openAlert, openConfirm } = useModalActionContext();\n  const { postReviewBy, putReviewBy } = useProductReviewFormActionContext();\n\n  const optionLabel =\n    optionDisplayLabel ?? (optionName && optionValue)\n      ? `${optionName}: ${optionValue}`\n      : \"\";\n\n  const reviewRewardNoticeTexts = useMemo(() => {\n    if (reviewConfig.expandedReviewConfig?.reviewRewardNoticeText) {\n      return [reviewConfig.expandedReviewConfig.reviewRewardNoticeText];\n    }\n\n    return [];\n  }, [reviewConfig.expandedReviewConfig?.reviewRewardNoticeText]);\n\n  const handleRatingStarClick = useCallback(\n    ({ currentTarget, nativeEvent }) => {\n      const _score = calculateRatingScoreByCurrentWidth({\n        offsetX: nativeEvent.offsetX,\n        width: currentTarget.offsetWidth,\n      });\n\n      setScore(_score);\n    },\n    []\n  );\n\n  const handleReviewContentChange = (content) => {\n    setReviewContent(content);\n  };\n\n  const handleReviewImageChange = (images) => {\n    setImages(images);\n  };\n\n  const saveReview = async ({ content, urls, rate }) => {\n    const request = {\n      content,\n      urls,\n      rate,\n      productNo,\n      optionNo,\n      orderOptionNo,\n    };\n\n    await postReviewBy(request);\n\n    await openAlert({\n      message: \"상품후기가 등록되었습니다.\",\n      onClose: async () => {\n        await onSubmit?.();\n      },\n    });\n  };\n\n  const modifyReview = async (reviewDetail) => {\n    await putReviewBy({\n      reviewNo,\n      ...reviewDetail,\n    });\n\n    openAlert({\n      message: \"상품후기가 수정되었습니다.\",\n      onClose: async () => {\n        await onModify?.();\n      },\n    });\n  };\n\n  const checkConditionsForAccumulation = (reviewDetail) => {\n    const text = getAccumulationRewardNoticeText(reviewConfig, reviewDetail);\n    const upsertFn = isRegisterMode ? saveReview : modifyReview;\n\n    if (text) {\n      openConfirm({\n        message: text,\n        onConfirm: () => {\n          upsertFn(reviewDetail);\n        },\n      });\n    } else {\n      upsertFn(reviewDetail);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (!reviewContent) {\n      openAlert({\n        message: \"상품후기 내용을 입력해주세요.\",\n      });\n\n      return;\n    }\n\n    const reviewDetail = {\n      content: reviewContent,\n      urls: images.map(({ imageUrl }) => imageUrl),\n      rate: score,\n    };\n\n    if (!isRegisterMode || orderStatusType === \"BUY_CONFIRM\") {\n      checkConditionsForAccumulation(reviewDetail);\n\n      return;\n    }\n\n    openConfirm({\n      message: \"후기 작성과 함께 구매확정 처리하시겠습니까?\",\n      onConfirm: () => {\n        checkConditionsForAccumulation(reviewDetail);\n      },\n    });\n  };\n\n  return (\n    <div className=\"board-form review-form\">\n      <BoardProductItem\n        productName={productName}\n        optionDisplayLabel={optionLabel}\n        productImageUrl={productImageUrl}\n        optionNo={orderProductOptionNo}\n        options={options}\n        onSelect={onSelect}\n      />\n\n      <div className=\"l-panel review-form__content\">\n        <div className=\"review-form__evaluation\">\n          <h3 className=\"review-form__title\">상품은 마음에 드셨나요?</h3>\n          <RatingStar\n            onClick={handleRatingStarClick}\n            score={score}\n            limit={RATING_STAR.LIMIT_SCORE}\n          />\n        </div>\n        <ReviewTextArea\n          content={reviewContent}\n          onChange={handleReviewContentChange}\n        />\n        <ReviewImage images={images} onChange={handleReviewImageChange} />\n\n        <div className=\"board-form__button-group\">\n          <Button\n            className=\"board-form__cancel-btn board-form__btn\"\n            theme=\"dark\"\n            label=\"취소\"\n            onClick={() => onCancel?.()}\n          />\n          <Button\n            className=\"board-form__modify-btn board-form__btn\"\n            theme=\"caution\"\n            label={isRegisterMode ? \"등록\" : \"수정\"}\n            onClick={handleSubmit}\n          />\n        </div>\n        <ReviewAccumulation className=\"review-form__accumulation\" />\n      </div>\n      <BoardNoticeList texts={reviewRewardNoticeTexts} />\n    </div>\n  );\n};\n\nexport default ReviewForm;\n\nReviewForm.propTypes = {\n  productName: string,\n  productImageUrl: string,\n  productNo: number,\n  optionNo: number,\n  orderOptionNo: number,\n  reviewNo: number,\n  isRegisterMode: bool,\n  onSubmit: func,\n  onModify: func,\n  onCancel: func,\n  optionName: string,\n  optionValue: string,\n  optionDisplayLabel: string,\n  ButtonGroup: func,\n  reviewImages: arrayOf(\n    shape({\n      originName: string,\n      imageUrl: string,\n    })\n  ),\n  rate: number,\n  content: string,\n  orderStatusType: oneOf([\"DELIVERY_ING\", \"DELIVERY_DONE\", \"BUY_CONFIRM\"]),\n  options: arrayOf(\n    shape({\n      nonReviewableProduct: bool,\n      mallOptionsNo: number,\n      orderNo: number,\n      orderStatus: oneOf([\n        \"DEPOSIT_WAIT\",\n        \"PAY_DONE\",\n        \"PRODUCT_PREPARE\",\n        \"DELIVERY_PREPARE\",\n        \"DELIVERY_ING\",\n        \"DELIVERY_DONE\",\n        \"BUY_CONFIRM\",\n        \"CANCEL_DONE\",\n        \"RETURN_DONE\",\n        \"EXCHANGE_DONE\",\n        \"PAY_WAIT\",\n        \"PAY_CANCEL\",\n        \"PAY_FAIL\",\n        \"DELETE\",\n        \"EXCHANGE_WAIT\",\n        \"REFUND_DONE\",\n        \"CANCEL_PROCESSING\",\n        \"RETURN_PROCESSING\",\n        \"EXCHANGE_WAITING\",\n        \"EXCHANGE_PROCESSING\",\n      ]),\n      orderProductOptionNo: number,\n    })\n  ),\n  orderProductOptionNo: number,\n  onSelect: func,\n};\n","import { useRef, useCallback } from \"react\";\n\nimport { arrayOf, shape, string, func } from \"prop-types\";\n\nimport {\n  VisibleComponent,\n  useProductReviewStateContext,\n  Button,\n  ImageFileProvider,\n} from \"@shopby/react-components\";\n\nimport { REVIEW_IMAGE, BOARD_IMAGE } from \"../../constants/image\";\nimport ImageFileUpload from \"../ImageFileUpload\";\n\nconst ReviewImage = ({ images, onChange }) => {\n  const imageFileUploadRef = useRef();\n\n  const { reviewConfig } = useProductReviewStateContext();\n\n  const handleImageUploadButtonClick = useCallback(() => {\n    imageFileUploadRef.current.click();\n  }, [imageFileUploadRef?.current]);\n\n  const handleImagesChange = (selectedImages) => {\n    selectedImages.length > 0 &&\n      onChange((prev) => [...prev, ...selectedImages]);\n  };\n\n  const handleImageDelete = (imageUrl) => {\n    onChange((prev) => prev.filter((image) => image.imageUrl !== imageUrl));\n  };\n\n  return (\n    <>\n      <ul className=\"review-form__image-files\">\n        {images.map((image, index) => (\n          <li\n            key={index}\n            id={`${index}_${image.originName}`}\n            className=\"review-form__image\"\n          >\n            <img\n              src={`${image.imageUrl}?${BOARD_IMAGE.THUMB_NAIL_SIZE}`}\n              alt={image.originName}\n              loading=\"lazy\"\n            />\n            <button\n              className=\"delete\"\n              onClick={() => handleImageDelete(image.imageUrl)}\n            >\n              <span className=\"a11y\">첨부 이미지 삭제</span>\n            </button>\n          </li>\n        ))}\n      </ul>\n      <VisibleComponent\n        shows={reviewConfig.canAttach}\n        TruthyComponent={\n          <>\n            <ImageFileProvider>\n              <ImageFileUpload\n                className=\"review-form__file-upload\"\n                ref={imageFileUploadRef}\n                onChange={handleImagesChange}\n                images={images}\n                limitFileSizeInMB={REVIEW_IMAGE.LIMIT_MEGA_BYTES}\n                limitCount={REVIEW_IMAGE.LIMIT_COUNT}\n              />\n            </ImageFileProvider>\n            <Button\n              className=\"review-form__upload-btn review-form__btn\"\n              label=\"사진 첨부하기\"\n              onClick={handleImageUploadButtonClick}\n            />\n            <p className=\"review-form__limit-text\">\n              업로드 용량은 {REVIEW_IMAGE.LIMIT_MEGA_BYTES}MB 이하로만 가능\n              합니다.\n            </p>\n          </>\n        }\n      />\n    </>\n  );\n};\nexport default ReviewImage;\nReviewImage.propTypes = {\n  images: arrayOf(\n    shape({\n      originName: string,\n      imageUrl: string,\n    })\n  ),\n  onChange: func,\n};\n","import { string, func } from 'prop-types';\n\nimport { CharacterCounter, useProductReviewStateContext } from '@shopby/react-components';\n\nconst ReviewTextArea = ({ content, onChange }) => {\n  const { reviewConfig } = useProductReviewStateContext();\n\n  const handleReviewContentChange = ({ character: { value } }) => {\n    onChange(value);\n  };\n\n  return (\n    <div className=\"review-form__text-area\">\n      <CharacterCounter\n        id=\"review-form-text-area\"\n        name=\"review-form-text-area\"\n        counterType=\"CHARACTER\"\n        textType=\"TEXT_AREA\"\n        placeholder={\n          reviewConfig.expandedReviewConfig?.writingReviewNoticeText\n            ? reviewConfig.expandedReviewConfig?.writingReviewNoticeText\n            : '상품후기를 작성해주세요.'\n        }\n        cols=\"30\"\n        rows=\"10\"\n        value={content}\n        valid=\"NO_COMMON_SPECIAL\"\n        onChange={handleReviewContentChange}\n        limitCount={{\n          character: 1000,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ReviewTextArea;\n\nReviewTextArea.propTypes = {\n  content: string,\n  onChange: func,\n};\n","import ReviewForm from './ReviewForm';\n\nexport default ReviewForm;\n","export const BOARD_IMAGE = {\n  THUMB_NAIL_SIZE: '100x100',\n};\n\nexport const REVIEW_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n\nexport const PERSONAL_INQUIRY_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n","export const RATING_STAR = {\n  LIMIT_SCORE: 5,\n};\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n"],"names":[],"sourceRoot":""}