{"version":3,"file":"src_pages_MemberWithdrawal_index_js.6d840227959627cca28d.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;AAEA;AAEA;AAQA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AADA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AATA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC3GA;AAEA;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvDA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AAEA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAWA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;ACnJA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/CheckMemberPassword/CheckMemberPassword.jsx","webpack://@shopby/react-skin/./src/components/CheckMemberPassword/index.js","webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/OpenIdSignIn/OpenIdSignIn.jsx","webpack://@shopby/react-skin/./src/components/OpenIdSignIn/index.js","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/MemberWithdrawal/CheckOpenIdMember.jsx","webpack://@shopby/react-skin/./src/pages/MemberWithdrawal/MemberWithdrawal.jsx","webpack://@shopby/react-skin/./src/pages/MemberWithdrawal/MemberWithdrawalContent.jsx","webpack://@shopby/react-skin/./src/pages/MemberWithdrawal/index.js"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { func } from 'prop-types';\n\nimport {\n  Button,\n  useCheckMemberPasswordStateContext,\n  useCheckMemberPasswordActionContext,\n  useAuthStateContext,\n  TextField,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst CheckMemberPassword = ({ onAuthenticationBtnClick }) => {\n  const { updateCheckPasswordMemberInfo, checkPassword } = useCheckMemberPasswordActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const {\n    checkPasswordMemberInfo: { memberId, password },\n  } = useCheckMemberPasswordStateContext();\n\n  const { profile } = useAuthStateContext();\n\n  const handlePasswordChange = ({ currentTarget: { value } }) => {\n    updateCheckPasswordMemberInfo({ password: value });\n  };\n\n  const handlePasswordKeyDown = async (e) => {\n    try {\n      if (e.key === 'Enter') {\n        await checkPassword(password);\n        onAuthenticationBtnClick();\n      }\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const checkPasswordBtnClick = async (password) => {\n    try {\n      await checkPassword(password);\n      onAuthenticationBtnClick();\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    updateCheckPasswordMemberInfo({ memberId: profile?.memberId });\n  }, [profile]);\n\n  return (\n    <div className=\"password-authentication\">\n      <p className=\"password-authentication__info-text\">\n        회원님의 정보를 안전하게 보호하기 위해 <br />\n        다시 한 번 입력해 주세요.\n      </p>\n      <div className=\"password-authentication-form\">\n        <div className=\"password-authentication-form__item\">\n          <label htmlFor=\"mobileNo\" className=\"password-authentication-form__tit\">\n            아이디\n          </label>\n          <div className=\"password-authentication-form__input-wrap\">\n            <TextField name=\"memberId\" placeholder=\"아이디\" value={memberId} disabled={true} />\n          </div>\n        </div>\n        <div className=\"password-authentication-form__item\">\n          <label htmlFor=\"mobileNo\" className=\"password-authentication-form__tit\">\n            비밀번호\n          </label>\n          <div className=\"password-authentication-form__input-wrap\">\n            <TextField\n              name=\"password\"\n              placeholder=\"비밀번호\"\n              onChange={handlePasswordChange}\n              value={password}\n              type=\"password\"\n              valid=\"NO_SPACE\"\n              onKeyDown={handlePasswordKeyDown}\n            />\n          </div>\n        </div>\n\n        <div className=\"password-authentication__button-wrap\">\n          <Button\n            label=\"취소\"\n            onClick={() => {\n              location.href = `/my-page`;\n            }}\n          />\n          <Button\n            label=\"인증하기\"\n            onClick={() => {\n              checkPasswordBtnClick(password);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckMemberPassword;\n\nCheckMemberPassword.propTypes = {\n  onAuthenticationBtnClick: func,\n};\n","import CheckMemberPassword from './CheckMemberPassword';\n\nexport default CheckMemberPassword;\n","import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { useLocation } from 'react-router-dom';\n\nimport { string, array } from 'prop-types';\n\nimport { VisibleComponent, useOpenIdSignInActionContext } from '@shopby/react-components';\n\nconst OpenIdSignIn = ({ label, orderSheetNo, providers }) => {\n  const { openIdSignIn, setPathToLocalStorage } = useOpenIdSignInActionContext();\n\n  const location = useLocation();\n  const previousPath = location.state?.from; // 로그인 화면 전 페이지\n  const nextPath = location.state?.to; // 로그인 후 이동할 페이지\n  const orderSheetPath = orderSheetNo ? orderSheetNo : '';\n  const redirectUri = `${window.location.origin}/callback/auth-callback`;\n\n  return (\n    <VisibleComponent\n      shows={providers?.length > 0}\n      TruthyComponent={\n        <div className=\"open-id-sign-in\">\n          <p className=\"open-id-sign-in__title\">\n            <span>간편로그인</span>\n          </p>\n          <ul className=\"open-id-sign-in__list\">\n            {providers\n              ?.sort((a, b) => b.charCodeAt(0) - a.charCodeAt(0))\n              .map((provider, idx) => (\n                <li className={`open-id-sign-in__item type-${provider}`} key={`${idx}_${provider}`}>\n                  <button\n                    className=\"open-id-sign-in__link\"\n                    data-provider={provider}\n                    data-action=\"oauth\"\n                    onClick={() => {\n                      setPathToLocalStorage({ previousPath, nextPath, orderSheetPath });\n                      openIdSignIn({ provider, redirectUri });\n                    }}\n                  >\n                    <span>{`${provider?.toUpperCase()} `}</span>\n                    {` 아이디로 ${label}`}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      }\n    />\n  );\n};\n\nexport default OpenIdSignIn;\n\nOpenIdSignIn.propTypes = {\n  label: string,\n  providers: array,\n  orderSheetNo: string,\n};\n","import OpenIdSignIn from './OpenIdSignIn';\n\nexport default OpenIdSignIn;\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { func } from \"prop-types\";\n\nimport {\n  useOpenIdSignInActionContext,\n  useAuthStateContext,\n  useModalActionContext,\n} from \"@shopby/react-components\";\n\nimport OpenIdSignIn from \"../../components/OpenIdSignIn\";\nconst CheckOpenIdMember = ({ onAuthenticationBtnClick }) => {\n  const location = useLocation();\n  const {\n    setOauthIdNoToLocalStorage,\n    getOauthCompareResultToLocalStorage,\n    removeOauthCompareResultToLocalStorage,\n  } = useOpenIdSignInActionContext();\n  const { openAlert } = useModalActionContext();\n  const { profile } = useAuthStateContext();\n\n  const oauthCompareResult =\n    getOauthCompareResultToLocalStorage() !== \"\"\n      ? JSON.parse(getOauthCompareResultToLocalStorage())\n      : \"\";\n\n  useEffect(() => {\n    if (profile && !oauthCompareResult) {\n      setOauthIdNoToLocalStorage(profile.oauthIdNo);\n      location.state = {\n        from: `${location.pathname}`,\n        to: \"/my-page\",\n      };\n    }\n  }, [profile]);\n\n  useEffect(() => {\n    if (oauthCompareResult !== \"\" && oauthCompareResult === false) {\n      removeOauthCompareResultToLocalStorage();\n      openAlert({\n        message: `현재 로그인 한 간편로그인 계정과 다릅니다. 쇼핑몰 계정과 동일하게 로그인해주세요.`,\n        onClose: () => {\n          location.href = \"/my-page\";\n        },\n      });\n    }\n    if (oauthCompareResult === true) {\n      removeOauthCompareResultToLocalStorage();\n      onAuthenticationBtnClick();\n    }\n  }, [oauthCompareResult]);\n\n  return (\n    <div className=\"open-id-authentication\">\n      <p className=\"open-id-authentication__info-text\">\n        회원님의 정보를 안전하게 보호하기 위해 <br />\n        계정을 재인증 해주세요.\n      </p>\n      <div className=\"open-id-authentication__link\">\n        <OpenIdSignIn\n          label=\"로그인\"\n          providers={[profile?.providerType.toLowerCase().replace(\"_\", \"-\")]}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CheckOpenIdMember;\n\nCheckOpenIdMember.propTypes = {\n  onAuthenticationBtnClick: func,\n};\n","import { useEffect, useState } from 'react';\n\nimport {\n  CheckMemberPasswordProvider,\n  MemberWithdrawalProvider,\n  OpenIdSignInProvider,\n  useAuthStateContext,\n} from '@shopby/react-components';\n\nimport CheckMemberPassword from '../../components/CheckMemberPassword';\nimport FullModal from '../../components/FullModal';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport CheckOpenIdMember from './CheckOpenIdMember';\nimport MemberWithdrawalContent from './MemberWithdrawalContent';\n\nconst MemberWithdrawal = () => {\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    hasHomeBtnOnHeader: true,\n    hasBottomNav: true,\n    title: '회원탈퇴',\n  });\n\n  const { profile } = useAuthStateContext();\n\n  const [isCheckPasswordFullModalOpen, setIsCheckPasswordFullModalOpen] = useState(false);\n  const [isCheckOpenIdMemberFullModalOpen, setIsCheckOpenIdMemberFullModalOpen] = useState(false);\n\n  useEffect(() => {\n    if (profile?.memberType === 'MALL') {\n      setIsCheckPasswordFullModalOpen(true);\n    } else {\n      setIsCheckOpenIdMemberFullModalOpen(true);\n    }\n  }, [profile]);\n\n  return (\n    <MemberWithdrawalProvider>\n      <CheckMemberPasswordProvider>\n        <OpenIdSignInProvider>\n          <MemberWithdrawalContent />\n          {isCheckPasswordFullModalOpen && (\n            <FullModal\n              title={'회원탈퇴'}\n              onClose={() => {\n                location.href = 'my-page';\n              }}\n            >\n              <CheckMemberPassword\n                onAuthenticationBtnClick={() => {\n                  setIsCheckPasswordFullModalOpen(false);\n                }}\n              />\n            </FullModal>\n          )}\n          {isCheckOpenIdMemberFullModalOpen && (\n            <FullModal\n              title={'회원탈퇴'}\n              onClose={() => {\n                location.href = 'my-page';\n              }}\n            >\n              <CheckOpenIdMember\n                onAuthenticationBtnClick={() => {\n                  setIsCheckOpenIdMemberFullModalOpen(false);\n                }}\n              />\n            </FullModal>\n          )}\n        </OpenIdSignInProvider>\n      </CheckMemberPasswordProvider>\n    </MemberWithdrawalProvider>\n  );\n};\n\nexport default MemberWithdrawal;\n","import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport {\n  Button,\n  useAuthStateContext,\n  useAuthActionContext,\n  useTermsStateContext,\n  useMemberWithdrawalActionContext,\n  useModalActionContext,\n  TextField,\n  Checkbox,\n} from \"@shopby/react-components\";\n\nimport Sanitized from \"../../components/Sanitized\";\n\nconst MemberWithdrawalContent = () => {\n  const { profile } = useAuthStateContext();\n  const { isSignedIn } = useAuthActionContext();\n  const { terms } = useTermsStateContext();\n  const { openAlert, openConfirm } = useModalActionContext();\n  const { deleteMember, fetchWithdrawalTermsContent } =\n    useMemberWithdrawalActionContext();\n\n  const navigate = useNavigate();\n\n  const [withdrawalReason, setWithdrawalReason] = useState(\"\");\n  const [withdrawalAgreement, setWithdrawalAgreement] = useState(false);\n\n  const handleWithdrawalReasonChange = ({ currentTarget: { value } }) => {\n    setWithdrawalReason(value);\n  };\n\n  const handleWithdrawalAgreementChange = (event) => {\n    event.target.checked\n      ? setWithdrawalAgreement(true)\n      : setWithdrawalAgreement(false);\n  };\n\n  const handleDeleteMember = () => {\n    if (!withdrawalAgreement) {\n      openAlert({\n        message: \"회원탈퇴 동의 후 탈퇴가 가능합니다.\",\n      });\n\n      return;\n    }\n\n    if (withdrawalReason === \"\") {\n      openAlert({\n        message: \"탈퇴 사유를 입력해주세요.\",\n      });\n\n      return;\n    }\n\n    openConfirm({\n      message: `회원 탈퇴를 진행하시겠습니까? \\n 확인 클릭 시 복구가 불가능합니다.`,\n      confirmLabel: \"확인\",\n      onConfirm: async () => {\n        await deleteMember({ reason: withdrawalReason });\n        location.replace(\"/\");\n      },\n      cancelLabel: \"취소\",\n      onCancel: () => null,\n    });\n  };\n\n  useEffect(() => {\n    fetchWithdrawalTermsContent([\"WITHDRAWAL_GUIDE\"]);\n  }, []);\n\n  if (!isSignedIn()) {\n    openAlert({\n      message: \"먼저 로그인을 해주세요.\",\n      onClose: () => {\n        navigate(\"/sign-in\", { replace: true });\n      },\n    });\n\n    return <></>;\n  }\n\n  return (\n    <div className=\"member-withdrawal\">\n      <div className=\"member-withdrawal-form\">\n        <div className=\"member-withdrawal-form__item\">\n          <label htmlFor=\"memberId\" className=\"member-withdrawal-form__tit\">\n            {profile?.providerType\n              ? profile.providerType.replace(\"_\", \"-\")\n              : \"일반\"}{\" \"}\n            아이디 회원\n          </label>\n          <div className=\"member-withdrawal-form__input-wrap\">\n            <TextField\n              value={profile?.memberId ? profile.memberId : \"\"}\n              readOnly={true}\n            />\n          </div>\n        </div>\n        <div className=\"member-withdrawal-form__item\">\n          <div className=\"member-withdrawal-form__input-wrap\">\n            <textarea\n              id=\"member-withdrawal-reason\"\n              name=\"reason\"\n              placeholder=\"탈퇴 사유를 입력해주세요.\"\n              onChange={handleWithdrawalReasonChange}\n              value={withdrawalReason}\n            />\n          </div>\n        </div>\n      </div>\n      {terms.WITHDRAWAL_GUIDE?.used && (\n        <div className=\"member-withdrawal__terms-content\">\n          <Sanitized html={terms.WITHDRAWAL_GUIDE.contents} />\n        </div>\n      )}\n      <div className=\"member-withdrawal__check-wrap\">\n        <Checkbox\n          checked={withdrawalAgreement}\n          onChange={handleWithdrawalAgreementChange}\n        >\n          <span className=\"checkbox-text\">\n            회원탈퇴 시 처리사항 안내 내용을\n            <br />\n            확인하였으며, 회원탈퇴에 동의합니다.\n          </span>\n        </Checkbox>\n      </div>\n      <div className=\"member-withdrawal__btn-wrap\">\n        <Button\n          className=\"apply\"\n          label=\"탈퇴 신청\"\n          onClick={handleDeleteMember}\n        />\n        <Button\n          className=\"cancel\"\n          label=\"취소\"\n          onClick={() => {\n            location.href = \"/my-page\";\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MemberWithdrawalContent;\n","import MemberWithdrawal from './MemberWithdrawal';\n\nexport default MemberWithdrawal;\n"],"names":[],"sourceRoot":""}