{"version":3,"file":"src_pages_Event_index_js-data_application_font-woff_charset_utf-8_base64_d09GRgABAAAAAAZgABAA-425954.63293210251d719fcb22.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AAAA;AAIA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjCA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChCA;AACA;;;;;;;;;;;;;;;;ACDA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAmBA;AACA;AAEA;AAmBA;AACA;AAEA;;;;;;;;;;;;;;ACnEA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAAA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAIA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AAEA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AAKA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACrHA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AAEA;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AAGA;AAAA;AAEA;AAAA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/CustomBanner/CustomBanner.jsx","webpack://@shopby/react-skin/./src/components/CustomBanner/index.js","webpack://@shopby/react-skin/./src/components/GalleryListPage/GalleryListPage.jsx","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbBadge/ProductThumbBadge.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbBadge/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbInfo/ProductThumbInfo.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbInfo/index.js","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/components/TotalCountAndSort/TotalCountAndSort.jsx","webpack://@shopby/react-skin/./src/components/TotalCountAndSort/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/Event/EventContents.jsx","webpack://@shopby/react-skin/./src/pages/Event/EventCoupon.jsx","webpack://@shopby/react-skin/./src/pages/Event/EventPage.jsx","webpack://@shopby/react-skin/./src/pages/Event/EventTopImg.jsx","webpack://@shopby/react-skin/./src/pages/Event/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/Coupon/CouponItem.jsx"],"sourcesContent":["import { oneOf, string } from 'prop-types';\n\nconst CustomBanner = ({ className, href, target, src, alt, width, height }) =>\n  href ? (\n    <a className={className} href={href} rel=\"noreferrer\" target={target}>\n      <img src={src} alt={alt} loading=\"lazy\" width={width} height={height} />\n    </a>\n  ) : (\n    <img className={className} src={src} alt={alt} loading=\"lazy\" width={width} height={height} />\n  );\n\nexport default CustomBanner;\n\nCustomBanner.propTypes = {\n  className: string,\n  href: string,\n  target: oneOf(['_blank', '_self']),\n  src: string,\n  alt: string,\n  width: string,\n  height: string,\n};\n","import CustomBanner from './CustomBanner';\n\nexport default CustomBanner;\n","import { useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { object, bool, func, array, number, string } from 'prop-types';\n\nimport { Icon, InfiniteScrollLoader, ThumbItem, ThumbList } from '@shopby/react-components';\nimport { calculateDiscountedPrice, THUMB_LIST_TYPE } from '@shopby/shared';\n\nimport ProductThumbBadge from '../ProductThumbBadge';\nimport ProductThumbInfo from '../ProductThumbInfo';\nimport TotalCountAndSort from '../TotalCountAndSort';\n\nconst NoSearchProduct = () => {\n  const [searchParams] = useSearchParams();\n  const keyword = useMemo(() => searchParams.get('keyword'), []);\n\n  return (\n    <>\n      {keyword ? (\n        <div className=\"no-search\">\n          <h3 className=\"no-search__title\">&apos;{keyword}&apos; 에 대한 검색결과가 없습니다.</h3>\n          <Icon name=\"no-items\" />\n          <p className=\"no-search__description\">\n            정확한 검색어를 확인하시고 다시 검색해주세요.\n            <br />\n            일시적으로 상품이 품절 되었을 수 있습니다.\n            <br />\n            단어의 철자나 띄어쓰기를 다르게 해보세요.\n          </p>\n        </div>\n      ) : (\n        <p className=\"not-found-product\">상품이 존재하지 않습니다.</p>\n      )}\n    </>\n  );\n};\n\nconst GalleryListPage = ({\n  style,\n  totalCount,\n  products,\n  sortType,\n  sortBy,\n  updateSortType,\n  handleIntersect,\n  disabled,\n  className,\n}) => (\n  <div className=\"l-panel\">\n    {products.length > 0 ? (\n      <>\n        <TotalCountAndSort\n          totalCount={totalCount}\n          sortType={sortType}\n          sortBy={sortBy}\n          updateSortType={updateSortType}\n        />\n\n        <ThumbList style={style} displayType={THUMB_LIST_TYPE.GALLERY} className={className}>\n          {products.map(\n            ({\n              productNo,\n              adult,\n              listImageUrls,\n              isSoldOut,\n              saleStatusType,\n              salePrice,\n              promotionText,\n              productName,\n              immediateDiscountAmt,\n              additionalDiscountAmt,\n              frontDisplayYn,\n            }) =>\n              frontDisplayYn && (\n                <ThumbItem\n                  key={productNo}\n                  resize=\"220x220\"\n                  href={`/product-detail?productNo=${productNo}`}\n                  src={listImageUrls[0]}\n                  adult={adult}\n                  alt={productName}\n                >\n                  <ProductThumbBadge isSoldOut={isSoldOut} saleStatusType={saleStatusType} />\n\n                  <ProductThumbInfo\n                    promotionText={promotionText}\n                    productName={productName}\n                    salePrice={calculateDiscountedPrice({ salePrice, immediateDiscountAmt, additionalDiscountAmt })}\n                  />\n                </ThumbItem>\n              )\n          )}\n        </ThumbList>\n\n        <InfiniteScrollLoader onIntersect={handleIntersect} disabled={disabled} />\n      </>\n    ) : (\n      <NoSearchProduct />\n    )}\n  </div>\n);\n\nexport default GalleryListPage;\n\nGalleryListPage.propTypes = {\n  style: object,\n  totalCount: number,\n  products: array,\n  sortType: string,\n  sortBy: array,\n  updateSortType: func,\n  handleIntersect: func,\n  disabled: bool,\n  className: string,\n};\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { useMemo } from 'react';\n\nimport { oneOf, bool } from 'prop-types';\n\nimport { Badge } from '@shopby/react-components';\nimport { PURCHASE_OPTION_SALE_LABEL, SALE_STATUS_TYPE } from '@shopby/shared';\n\nconst ProductThumbBadge = ({ saleStatusType, isSoldOut }) => {\n  const badgeColorType = useMemo(() => (saleStatusType === 'FINISHED' ? 'primary' : 'caution'), []);\n\n  if (saleStatusType === 'ONSALE' && !isSoldOut) return <></>;\n\n  return (\n    <span className=\"thumb-item-badges\">\n      {(saleStatusType === 'FINISHED' || saleStatusType === 'READY') && (\n        <Badge\n          className=\"product-card__badge product-card__badge-sale-status\"\n          colorType={badgeColorType}\n          label={SALE_STATUS_TYPE[saleStatusType]}\n        />\n      )}\n      {isSoldOut && (\n        <Badge label={PURCHASE_OPTION_SALE_LABEL.SOLD_OUT} colorType=\"primary\" className=\"product-card__badge\" />\n      )}\n    </span>\n  );\n};\n\nexport default ProductThumbBadge;\n\nProductThumbBadge.propTypes = {\n  saleStatusType: oneOf(['READY', 'ONSALE', 'FINISHED', 'STOP', 'PROHIBITION']),\n  isSoldOut: bool,\n};\n","import ProductThumbBadge from './ProductThumbBadge';\nexport default ProductThumbBadge;\n","import { useTranslation } from 'react-i18next';\n\nimport { number, string } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\n// ===========================\n// 상품 아이템 정보\n// ===========================\nconst ProductThumbInfo = ({ promotionText, productName, salePrice }) => {\n  const { t } = useTranslation('unit');\n  return (\n    <>\n      <p className=\"product-thumb-title\">\n        {promotionText} {productName}\n      </p>\n      <p className=\"product-thumb-price-info\">\n        <span>\n          <em className=\"product-thumb-price\">{convertToKoreanCurrency(salePrice)}</em>\n          <span className=\"product-thumb-unit\">{t('WON')}</span>\n        </span>\n      </p>\n    </>\n  );\n};\n\nexport default ProductThumbInfo;\n\nProductThumbInfo.propTypes = {\n  promotionText: string,\n  productName: string,\n  salePrice: number,\n};\n","import ProductThumbInfo from './ProductThumbInfo';\nexport default ProductThumbInfo;\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","import { oneOf, arrayOf, shape, number, string, func } from 'prop-types';\n\nimport { SelectBox } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCountAndSort = ({ totalCount, sortType, updateSortType, sortBy }) => (\n  <div className=\"total-sort\">\n    <p className=\"total-sort__count\">\n      총 <em className=\"highlight\">{convertToKoreanCurrency(totalCount)}</em>개\n    </p>\n    <SelectBox\n      className=\"total-sort__select-box\"\n      hasSortOption={true}\n      value={sortType}\n      onSelect={({ target }) => updateSortType(target.value)}\n      options={sortBy}\n    />\n  </div>\n);\nexport default TotalCountAndSort;\n\nTotalCountAndSort.propTypes = {\n  totalCount: number,\n  sortType: oneOf([\n    'SALE',\n    'LOW_PRICE',\n    'HIGH_PRICE',\n    'REVIEW',\n    'REGISTER',\n    'POPULAR',\n    'SALE_YMD',\n    'SALE_END_YMD',\n    'DISCOUNTED_PRICE',\n    'REVIEW',\n    'SALE_CNT',\n    'RECENT_PRODUCT',\n    'MD_RECOMMEND',\n    'LIKE_CNT',\n    'ADMIN_SETTING',\n    'BEST_SELLER',\n    'BEST_REVIEW',\n  ]),\n  updateSortType: func,\n  sortBy: arrayOf(\n    shape({\n      value: oneOf([\n        'SALE',\n        'LOW_PRICE',\n        'HIGH_PRICE',\n        'REVIEW',\n        'REGISTER',\n        'POPULAR',\n        'SALE_YMD',\n        'SALE_END_YMD',\n        'DISCOUNTED_PRICE',\n        'REVIEW',\n        'SALE_CNT',\n        'RECENT_PRODUCT',\n        'MD_RECOMMEND',\n        'LIKE_CNT',\n        'ADMIN_SETTING',\n        'BEST_SELLER',\n        'BEST_REVIEW',\n      ]),\n      label: string,\n    })\n  ),\n};\n","import TotalCountAndSort from './TotalCountAndSort';\n\nexport default TotalCountAndSort;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useOutletContext, useParams } from 'react-router-dom';\n\nimport { oneOf, arrayOf, shape, string } from 'prop-types';\n\nimport {\n  useEventStateContext,\n  useEventActionContext,\n  Slider,\n  Slide,\n  CouponByProductProvider,\n  useModalActionContext,\n} from '@shopby/react-components';\nimport { CLIENT_ERROR, CLIENT_ERROR_MESSAGE, PLATFORM_TYPE, SERVER_ERROR } from '@shopby/shared';\nimport { PER_PAGE_COUNT } from '@shopby/shared/constants';\n\nimport GalleryListPage from '../../components/GalleryListPage/GalleryListPage';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport EventCoupon from './EventCoupon';\nimport EventTopImg from './EventTopImg';\n\nconst SLIDE_OPTION = {\n  slidesPerView: 'auto',\n};\n\nconst EventContents = ({ sortBy }) => {\n  const { t } = useTranslation('title');\n  const { eventNo } = useParams();\n  const platformType = useOutletContext();\n  const { openAlert } = useModalActionContext();\n\n  const [disabled, setDisabled] = useState(false);\n  const { label, coupon, sortType, tabId, listOfExhibition, top } = useEventStateContext();\n  const { fetchEventsEventNo, updateSortType, updateTabId } = useEventActionContext();\n  const [displayProducts, setDisplayProducts] = useState([]);\n  const [style, setStyle] = useState({});\n  const [currentProducts, setCurrentProducts] = useState([]);\n  const [queryString, setQueryString] = useState({\n    eventNo,\n    sortType,\n    soldOut: true,\n    saleStatus: 'ONSALE',\n  });\n  const topImgInfo = useMemo(() => top[platformType === 'PC' ? 'pc' : 'mobile'], [top]);\n\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    hasCartBtnOnHeader: true,\n    hasHomeBtnOnHeader: true,\n    hasBottomNav: true,\n    title: t(label),\n  });\n\n  const handleInterSect = () => {\n    setDisabled(true);\n\n    if (currentProducts.length && displayProducts.length >= currentProducts.length) return;\n\n    const result = currentProducts.slice(0, displayProducts.length + PER_PAGE_COUNT);\n\n    setDisplayProducts(result);\n    setDisabled(false);\n  };\n\n  const initEvent = () => {\n    const result = listOfExhibition.find((item) => item.id === tabId);\n    const perRowNo = result?.[platformType === PLATFORM_TYPE.PC ? 'pcPerRow' : 'mobilePerRow'];\n    const sliceData = result.products.slice(0, PER_PAGE_COUNT);\n\n    setStyle({\n      gridTemplateColumns: `repeat(${perRowNo}, calc( 100% / ${perRowNo} - 10px))`,\n    });\n\n    setCurrentProducts(result.products);\n    setDisplayProducts(sliceData);\n    setDisabled(false);\n  };\n\n  const handleFetchEventNo = async () => {\n    try {\n      await fetchEventsEventNo(tabId, queryString);\n    } catch ({ error }) {\n      const { code } = error.serverError;\n\n      openAlert({\n        label: '메인페이지로 돌아가기',\n        message: CLIENT_ERROR_MESSAGE[CLIENT_ERROR[SERVER_ERROR[code]]],\n        onClose: () => location.replace('/'),\n      });\n    }\n  };\n\n  useEffect(() => {\n    setQueryString((prev) => ({ ...prev, sortType }));\n  }, [sortType]);\n\n  useEffect(() => {\n    handleFetchEventNo();\n  }, [queryString]);\n\n  useEffect(() => {\n    if (!listOfExhibition.length) return;\n\n    initEvent();\n  }, [listOfExhibition, tabId]);\n\n  return (\n    <>\n      {topImgInfo && <EventTopImg imgInfo={topImgInfo} label={label} />}\n\n      {coupon?.coupons.length > 0 && (\n        <CouponByProductProvider>\n          <EventCoupon coupons={coupon.coupons} />\n        </CouponByProductProvider>\n      )}\n\n      {listOfExhibition.length > 0 && (\n        <nav className=\"event-nav\">\n          <Slider {...SLIDE_OPTION}>\n            {listOfExhibition.map((item) => (\n              <Slide key={item.id}>\n                <button\n                  type=\"button\"\n                  data-id={item.id}\n                  className={`event-nav__btn${item.id === tabId ? ' is-active' : ''}`}\n                  onClick={() => {\n                    updateTabId(item.id);\n                  }}\n                >\n                  {item.label}\n                </button>\n              </Slide>\n            ))}\n          </Slider>\n        </nav>\n      )}\n\n      <GalleryListPage\n        style={style}\n        totalCount={currentProducts.length}\n        products={displayProducts}\n        sortType={sortType}\n        sortBy={sortBy}\n        updateSortType={updateSortType}\n        handleIntersect={handleInterSect}\n        disabled={disabled}\n        className=\"event-list\"\n      />\n    </>\n  );\n};\n\nexport default EventContents;\n\nEventContents.propTypes = {\n  sortBy: arrayOf(\n    shape({\n      value: oneOf(['SALE', 'ADMIN_SETTING', 'BEST_SELLER', 'BEST_REVIEW']),\n      label: string,\n    })\n  ),\n};\n","import { useNavigate } from 'react-router-dom';\n\nimport { oneOf, bool, number, string, shape, arrayOf } from 'prop-types';\n\nimport { useCouponByProductActionContext, useModalActionContext } from '@shopby/react-components';\nimport { CLIENT_ERROR, CLIENT_ERROR_MESSAGE, isSignedIn } from '@shopby/shared';\n\nimport CouponItem from '../MyPage/Coupon/CouponItem';\n\nconst EventCoupon = ({ coupons }) => {\n  const navigate = useNavigate();\n\n  const { downloadCouponByCouponNo } = useCouponByProductActionContext();\n  const { openAlert } = useModalActionContext();\n\n  const handleCouponDownload = (couponNo) => {\n    if (!isSignedIn()) {\n      openAlert({\n        message: CLIENT_ERROR_MESSAGE[CLIENT_ERROR.NO_AUTHORIZATION],\n        onClose: () => {\n          navigate('/sign-in');\n        },\n      });\n    }\n\n    const { data } = downloadCouponByCouponNo({ couponNo });\n    if (data?.couponNo === couponNo) {\n      alert('쿠폰이 발급되었습니다.');\n    }\n  };\n\n  return (\n    <article className=\"event-coupon-list\">\n      <h3 className=\"a11y\">할인 쿠폰 다운로드</h3>\n      <ul>\n        {coupons.map((item) =>\n          item.imageUrl ? (\n            <li key={item.couponNo}>\n              <button\n                onClick={() => {\n                  handleCouponDownload(item.couponNo);\n                }}\n              >\n                <img src={item.imageUrl} alt={item.couponName} />\n              </button>\n            </li>\n          ) : (\n            <CouponItem\n              key={item.couponNo}\n              coupon={{\n                minSalePrice: item.useConstraint.minSalePrice,\n                discountRate: item.discountInfo.discountRate,\n                maxAmount: item.discountInfo.maxDiscountAmt,\n                discountAmt: item.discountInfo.discountAmt,\n                limitSalePrice: '',\n                couponType: item.couponType.couponType,\n                issueYmdt: item.dateInfo.issueStartYmdt,\n                expireYmdt: item.dateInfo.issueEndYmdt,\n                couponName: item.couponName,\n                ...item,\n              }}\n              customElement={\n                <button\n                  className=\"event-coupon-download\"\n                  onClick={() => {\n                    handleCouponDownload(item.couponNo);\n                  }}\n                >\n                  <span className=\"a11y\">{item.couponName} 쿠폰 다운 받기</span>\n                </button>\n              }\n            />\n          )\n        )}\n      </ul>\n    </article>\n  );\n};\n\nexport default EventCoupon;\n\nEventCoupon.propTypes = {\n  coupons: arrayOf(\n    shape({\n      couponNo: number,\n      couponName: string,\n      couponType: oneOf(['PRODUCT', 'PRODUCT_PLUS', 'CART_DELIVERY']),\n      couponTargetType: oneOf(['ALL_PRODUCT', 'PRODUCT', 'BRAND', 'CATEGORY', 'PARTNER', 'EVENT']),\n      allianceRefererType: oneOf(['DIRECT', 'NAVER_KNOWLEDGE_SHOPPING']),\n      downloadable: bool,\n      imageUrl: string,\n      discountInfo: shape({\n        fixedAmt: bool,\n        discountAmt: number,\n        discountRate: number,\n        maxDiscountAmt: number,\n        freeDelivery: bool,\n        useOtherCoupon: bool,\n        skippedAccumulationAmt: bool,\n      }),\n      dateInfo: shape({\n        issueStartYmdt: string,\n        issueEndYmdt: string,\n        issueStartHour: number,\n        issueEndHour: number,\n        issueDaysOfWeek: string,\n      }),\n      couponStatus: shape({\n        totalIssuableCnt: number,\n        totalIssuedCnt: number,\n        totalIssuedCntToday: number,\n        issuableCnt: number,\n        myIssuedCnt: number,\n        myIssuedCntToday: number,\n      }),\n    })\n  ),\n};\n","import { EventProvider } from '@shopby/react-components';\n\nimport EventContents from './EventContents';\n\nconst SELECT_OPTION = [\n  { value: 'ADMIN_SETTING', label: '추천순' },\n  { value: 'BEST_SELLER', label: '판매량순' },\n  { value: 'BEST_REVIEW', label: '상품후기순' },\n];\n\nconst EventPage = () => (\n  <EventProvider>\n    <EventContents sortBy={SELECT_OPTION} />\n  </EventProvider>\n);\n\nexport default EventPage;\n","import { string, shape, oneOf } from 'prop-types';\n\nimport CustomBanner from '../../components/CustomBanner';\nimport Sanitized from '../../components/Sanitized';\n\nconst EventTopImg = ({ imgInfo, label }) => {\n  const { type, url } = imgInfo;\n\n  return (\n    <>\n      {url && type === 'FILE' ? (\n        <CustomBanner className=\"event-hero\" src={url} alt={label} />\n      ) : (\n        <Sanitized html={url} />\n      )}\n    </>\n  );\n};\n\nexport default EventTopImg;\n\nEventTopImg.propTypes = {\n  imgInfo: shape({\n    type: oneOf(['HTML', 'FILE']),\n    url: string,\n  }),\n  label: string,\n};\n","import EventPage from './EventPage.jsx';\n\nexport default EventPage;\n","import { object, bool, shape, string, number, oneOf } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst COUPON_TYPE_LABEL = {\n  PRODUCT: '상품',\n  CART: '주문',\n  CART_DELIVERY: '장바구니 배송비',\n};\n\n// 쿠폰 할인 정보\nconst getDiscountInfo = (coupon) => {\n  const limitSalePrice = coupon.minSalePrice;\n\n  if (coupon.discountRate) {\n    return {\n      amount: coupon.discountRate,\n      unit: '%',\n      maxAmount: coupon.maxDiscountAmt,\n      limitSalePrice,\n    };\n  }\n\n  return {\n    amount: convertToKoreanCurrency(coupon.discountAmt),\n    unit: '원',\n    maxAmount: 0,\n    limitSalePrice,\n  };\n};\n\nconst CouponItem = ({ coupon, unissuable, customElement = <></> }) => {\n  const { amount, unit, maxAmount, limitSalePrice } = getDiscountInfo(coupon);\n  const couponTypeLabel = COUPON_TYPE_LABEL[coupon.couponType];\n  const issueDate = coupon.issueYmdt?.slice(0, 10);\n  const expireDate = coupon.expireYmdt?.slice(0, 10);\n\n  return (\n    <li className={`my-page-coupon__list-item my-page-coupon__list-item--${unissuable ? 'unissuable' : 'issuable'}`}>\n      <div className=\"my-page-coupon__box\">\n        <div className=\"my-page-coupon__box--left\">\n          <p className=\"my-page-coupon__discounted-price\">\n            {convertToKoreanCurrency(amount)}\n            <span className=\"my-page-coupon__unit\">{unit}</span>\n            <span className=\"my-page-coupon__discount-label\">{couponTypeLabel} 할인</span>\n          </p>\n          <div className=\"my-page-coupon__content\">\n            <p className=\"my-page-coupon__name\">{coupon.couponName}</p>\n            <VisibleComponent\n              shows={maxAmount > 0}\n              TruthyComponent={\n                <p className=\"my-page-coupon__max-amount\">최대 {convertToKoreanCurrency(maxAmount)} 원 할인</p>\n              }\n            />\n            <VisibleComponent\n              shows={limitSalePrice > 0}\n              TruthyComponent={\n                <p className=\"my-page-coupon__limit-sale-price\">\n                  {convertToKoreanCurrency(limitSalePrice)} 원 이상 구매 시 사용가능\n                </p>\n              }\n            />\n          </div>\n          <p className=\"my-page-coupon__date\">{issueDate ? `${issueDate} ~ ${expireDate}` : `${expireDate}`}</p>\n        </div>\n        <div className=\"my-page-coupon__box--right\">\n          <p>COUPON</p>\n        </div>\n        {customElement}\n      </div>\n    </li>\n  );\n};\n\nexport default CouponItem;\n\nCouponItem.propTypes = {\n  coupon: shape({\n    couponName: string,\n  }),\n  unissuable: bool,\n  discountRate: number,\n  discountAmt: number,\n  issueYmdt: string,\n  expireYmdt: string,\n  maxDiscountAmt: number,\n  minSalePrice: number,\n  couponType: oneOf(['PRODUCT', 'CART', 'CART_DELIVERY']),\n  customElement: object,\n};\n"],"names":[],"sourceRoot":""}