{"version":3,"file":"src_pages_MyPage_ProductReview_ReviewableProduct_jsx.0d24e95e8147b0f2b8dc.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;ACZA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAeA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAIA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAIA;AAEA;;;;;;;;;;;;;;;;;ACpLA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AClBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/ProductReview/ReviewableProduct.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/TotalCount.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useEffect, useState } from 'react';\n\nimport {\n  useProfileProductReviewActionContext,\n  useProfileProductReviewStateContext,\n  Button,\n  ThumbList,\n  VisibleComponent,\n  InfiniteScrollLoader,\n  useInfiniteScroll,\n  useProductReviewStateContext,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../../components/ErrorBoundary';\nimport FullModal from '../../../components/FullModal/FullModal';\nimport ListSkeleton from '../../../components/ListSkeleton/ListSkeleton';\nimport ProductThumbItem from '../../../components/ProductThumbItem/ProductThumbItem';\nimport ReviewForm from '../../../components/ReviewForm';\nimport TotalCount from '../TotalCount';\n\nconst DEFAULT_REVIEW_FORM_STATE = {\n  productNo: 0,\n  productName: '',\n  productImageUrl: '',\n  optionNo: 0,\n  orderOptionNo: 0,\n  optionDisplayLabel: '',\n  optionStatusType: null,\n};\n\nconst ReviewedProductTotalCount = () => {\n  const {\n    reviewableProduct: { totalCount },\n  } = useProfileProductReviewStateContext();\n\n  return <TotalCount title=\"작성 가능 후기\" count={totalCount} />;\n};\n\nconst EmptyReviewableProduct = () => (\n  <div className=\"empty-list\">\n    <p>작성가능 후기가 없습니다.</p>\n  </div>\n);\n\nconst ReviewableProductList = () => {\n  const {\n    reviewableProduct: { totalCount },\n  } = useProfileProductReviewStateContext();\n\n  const { reviewConfig } = useProductReviewStateContext();\n  const { fetchProfileReviewableProducts } = useProfileProductReviewActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n\n  const [reviewDetail, setReviewDetail] = useState({ ...DEFAULT_REVIEW_FORM_STATE });\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (param) => {\n      const { data } = await fetchProfileReviewableProducts(param);\n\n      return data.items;\n    },\n  });\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  const resetReviewableProductListState = () => {\n    setReviewDetail({ ...DEFAULT_REVIEW_FORM_STATE });\n\n    setIsRegistrationModalOpen(false);\n  };\n\n  const handleReviewFormWriteButtonClick = (reviewDetail) => {\n    setReviewDetail(reviewDetail);\n\n    setIsRegistrationModalOpen(true);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      await fetchInitialItems();\n\n      resetReviewableProductListState();\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    reviewConfig?.expandedReviewConfig && fetchInitialItems();\n  }, [reviewConfig?.expandedReviewConfig?.allReviewCntPerPage]);\n\n  return (\n    <div className=\"profile-list\">\n      <ReviewedProductTotalCount />\n\n      <VisibleComponent\n        shows={totalCount > 0}\n        TruthyComponent={\n          <ThumbList>\n            {accumulativeItems.map(\n              ({\n                productNo,\n                optionNo,\n                optionName,\n                optionValue,\n                brandName,\n                productName,\n                price,\n                imageUrl,\n                orderOptionNo,\n                usesOption,\n                orderStatusType,\n              }) => {\n                const optionDisplayLabel = usesOption ? `${optionName}: ${optionValue}` : '';\n\n                return (\n                  <div key={orderOptionNo} className=\"profile-product-review__list-item\">\n                    <ProductThumbItem\n                      productNo={productNo}\n                      productName={productName}\n                      optionNo={optionNo}\n                      brandName={brandName}\n                      buyAmt={price.buyAmt}\n                      imageUrl={imageUrl}\n                      OptionComponent={() => <p className=\"product-thumb-item__option\">{optionDisplayLabel}</p>}\n                      optionDisplayLabel={optionDisplayLabel}\n                    />\n                    <Button\n                      className=\"profile-product-review__register-button\"\n                      label=\"후기 작성하기\"\n                      onClick={() => {\n                        handleReviewFormWriteButtonClick({\n                          productNo,\n                          productName,\n                          productImageUrl: imageUrl,\n                          optionNo,\n                          orderOptionNo,\n                          optionDisplayLabel: `${optionName}: ${optionValue}`,\n                          orderStatusType,\n                        });\n                      }}\n                    />\n                  </div>\n                );\n              }\n            )}\n          </ThumbList>\n        }\n        FalsyComponent={<EmptyReviewableProduct />}\n      />\n\n      <VisibleComponent\n        shows={accumulativeItems.length > 0}\n        TruthyComponent={<InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />}\n      />\n      <ListSkeleton className=\"profile-product-review__list\" isLoading={isLoading} />\n      <VisibleComponent\n        shows={isRegistrationModalOpen && reviewDetail.productNo > 0}\n        TruthyComponent={\n          <FullModal title={'상품후기'}>\n            <ReviewForm\n              {...reviewDetail}\n              isRegisterMode={true}\n              onSubmit={handleSubmit}\n              onCancel={() => setIsRegistrationModalOpen(false)}\n            />\n          </FullModal>\n        }\n      />\n    </div>\n  );\n};\n\nexport default ReviewableProductList;\n","import { string, number } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCount = ({ title, count }) => (\n  <p className=\"my-page__total-count\">\n    {title}\n    <span className=\"my-page__count\">\n      <span>{convertToKoreanCurrency(count)}</span> 건\n    </span>\n  </p>\n);\n\nTotalCount.propTypes = {\n  title: string,\n  count: number,\n};\n\nexport default TotalCount;\n","import TotalCount from './TotalCount';\n\nexport default TotalCount;\n"],"names":[],"sourceRoot":""}