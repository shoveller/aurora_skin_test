{"version":3,"file":"src_pages_MyPage_PersonalInquiry_index_js.d4e58d9e3dfa125f3e9c.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAczBA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAzBA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AASA;AACA;;;;;;;;;;;;;;;;;;AChSA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACtEA;AAEA;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AClBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/MyPage/PersonalInquiry/PersonalInquiry.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/PersonalInquiry/PersonalInquiryList.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/PersonalInquiry/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/TotalCount.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useEffect, useRef, useState, useMemo } from 'react';\n\nimport {\n  InquiryProvider,\n  InquiryFormProvider,\n  useInquiryActionContext,\n  useInquiryStateContext,\n  useMallStateContext,\n  ImageFileProvider,\n  VisibleComponent,\n  InfiniteScrollLoader,\n  useInquiryFormActionContext,\n  useModalActionContext,\n  Button,\n  useInquiryFormStateContext,\n  useInfiniteScroll,\n  useBoardConfigurationContextAction,\n} from '@shopby/react-components';\n\nimport { BoardFormModification, BoardFormRegistration } from '../../../components/Board';\nimport { useErrorBoundaryActionContext } from '../../../components/ErrorBoundary';\nimport FullModal from '../../../components/FullModal';\nimport ListSkeleton from '../../../components/ListSkeleton/ListSkeleton';\nimport { PERSONAL_INQUIRY_IMAGE } from '../../../constants/image';\nimport useLayoutChanger from '../../../hooks/useLayoutChanger';\nimport TotalCount from '../TotalCount';\n\nimport PersonalInquiryList from './PersonalInquiryList';\n\nconst PersonalInquiryContent = () => {\n  const formRef = useRef();\n\n  // state\n  const {\n    inquiry: { totalCount },\n  } = useInquiryStateContext();\n  const { inquiryTypes = [] } = useMallStateContext();\n  const { inquiryDetail } = useInquiryFormStateContext();\n  const { inquiryConfiguration } = useInquiryStateContext();\n\n  // action\n  const { openConfirm, openAlert } = useModalActionContext();\n  const { fetchInquiries, fetchInquiryConfiguration } = useInquiryActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n  const { postInquiry, putInquiryByInquiryNo, deleteInquiryByInquiryNo, fetchInquiryBy } =\n    useInquiryFormActionContext();\n\n  // 등록/수정 모달\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n  const [isModificationModalOpen, setIsModificationModalOpen] = useState(false);\n\n  // 문의 유형 옵션\n  const inquiryTypeSelectOptions = useMemo(\n    () =>\n      inquiryTypes.map(({ inquiryTypeNo, inquiryTypeName }) => ({\n        label: inquiryTypeName,\n        value: `${inquiryTypeNo}`,\n      })),\n    [inquiryTypes]\n  );\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (payload) => {\n      const { data } = await fetchInquiries(payload);\n\n      return data.items.map((item) => ({\n        ...item,\n        images: item.imageUrls.map((imageUrl, index) => ({\n          imageUrl,\n          originName: item.originalImageUrls[index],\n        })),\n      }));\n    },\n  });\n\n  const resetInquiries = () => {\n    fetchInitialItems();\n  };\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  const handleModifyButtonClick = async ({ inquiryNo }) => {\n    try {\n      await fetchInquiryBy({\n        inquiryNo,\n      });\n\n      setIsModificationModalOpen(true);\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const handleDeleteButtonClick = ({ inquiryNo }) => {\n    openConfirm({\n      message: (\n        <>\n          삭제 시 복구가 불가능합니다. <br />\n          정말 삭제하시겠습니까?\n        </>\n      ),\n      onConfirm: async () => {\n        try {\n          await deleteInquiryByInquiryNo({\n            inquiryNo,\n          });\n          await resetInquiries();\n        } catch (e) {\n          catchError(e);\n        }\n      },\n      confirmLabel: '삭제',\n    });\n  };\n\n  const handleFormSubmit = async () => {\n    const { type, title, content, images } = formRef.current.formData;\n\n    try {\n      await postInquiry({\n        inquiryTypeNo: type,\n        inquiryTitle: title,\n        inquiryContent: content,\n        originalFileName: images.map(({ originName }) => originName),\n        uploadedFileName: images.map(({ imageUrl }) => imageUrl),\n        usesEmailNotificationWhenRegisteringAnswer: false,\n        usesSmsNotificationWhenRegisteringAnswer: false,\n      });\n\n      openAlert({\n        message: '게시글이 저장되었습니다.',\n        onClose: async () => {\n          await resetInquiries();\n\n          setIsRegistrationModalOpen(false);\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const handleFormModify = async () => {\n    const { title, content, images } = formRef.current.formData;\n\n    try {\n      await putInquiryByInquiryNo({\n        inquiryNo: inquiryDetail.inquiryNo,\n        inquiryTitle: title,\n        inquiryContent: content,\n        originalFileName: images.map(({ originName }) => originName),\n        uploadedFileName: images.map(({ imageUrl }) => imageUrl),\n        usesEmailNotificationWhenRegisteringAnswer: inquiryDetail.usesEmailNotificationWhenRegisteringAnswer,\n        usesSmsNotificationWhenRegisteringAnswer: inquiryDetail.usesSmsNotificationWhenRegisteringAnswer,\n      });\n\n      openAlert({\n        message: '게시글이 수정되었습니다.',\n        onClose: async () => {\n          await resetInquiries();\n\n          setIsModificationModalOpen(false);\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    title: `${inquiryConfiguration?.name ?? '1:1문의'} 관리`,\n    hasCartBtnOnHeader: true,\n    hasBottomNav: true,\n  });\n\n  useEffect(() => {\n    resetInquiries();\n    fetchInquiryConfiguration();\n  }, []);\n\n  return (\n    <div className=\"personal-inquiry\">\n      <TotalCount title={inquiryConfiguration?.name ?? '1:1문의'} count={totalCount} />\n      <Button\n        className=\"personal-inquiry__registration-button\"\n        label={`${inquiryConfiguration?.name ?? '1:1문의'} 등록하기`}\n        onClick={() => setIsRegistrationModalOpen(true)}\n      />\n      <PersonalInquiryList\n        items={accumulativeItems}\n        onModify={handleModifyButtonClick}\n        onDelete={handleDeleteButtonClick}\n      />\n      <VisibleComponent\n        shows={accumulativeItems.length > 0}\n        TruthyComponent={<InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />}\n      />\n      <ListSkeleton className=\"personal-inquiry-list\" isLoading={isLoading} />\n      <VisibleComponent\n        shows={isRegistrationModalOpen}\n        TruthyComponent={\n          <FullModal title={`${inquiryConfiguration?.name ?? '1:1문의'} 등록`}>\n            <BoardFormRegistration\n              ref={formRef}\n              className=\"personal-inquiry-form\"\n              usesTitle={true}\n              canAttach={inquiryConfiguration.usesAttachment}\n              typeSelectorOption={{\n                options: inquiryTypeSelectOptions,\n              }}\n              textOption={{\n                value: '',\n                placeholder: '문의 내용을 입력하세요.',\n              }}\n              imageFileUploadOption={{\n                configuration: PERSONAL_INQUIRY_IMAGE,\n              }}\n              onSubmit={handleFormSubmit}\n              onCancel={() => setIsRegistrationModalOpen(false)}\n            />\n          </FullModal>\n        }\n      />\n      <VisibleComponent\n        shows={isModificationModalOpen}\n        TruthyComponent={\n          <FullModal\n            title={`${inquiryConfiguration?.name} 수정`}\n            onClose={() => {\n              setIsModificationModalOpen(false);\n            }}\n          >\n            <BoardFormModification\n              ref={formRef}\n              className=\"personal-inquiry-form\"\n              canAttach={inquiryConfiguration.usesAttachment}\n              typeSelectorOption={{\n                value: `${inquiryDetail.inquiryTypeInformation.no}`,\n                disabled: true,\n                options: inquiryTypeSelectOptions,\n              }}\n              titleOption={{\n                value: inquiryDetail.inquiryTitle,\n              }}\n              textOption={{\n                value: inquiryDetail.inquiryContent,\n              }}\n              imageFileUploadOption={{\n                configuration: PERSONAL_INQUIRY_IMAGE,\n                images: inquiryDetail.imageUrls.map((url, index) => ({\n                  originName: inquiryDetail.originalImageUrls[index],\n                  imageUrl: url,\n                })),\n              }}\n              onModify={handleFormModify}\n              onCancel={() => {\n                setIsModificationModalOpen(false);\n              }}\n            />\n          </FullModal>\n        }\n      />\n    </div>\n  );\n};\nconst PersonalInquiry = () => {\n  const { fetchBoardConfiguration } = useBoardConfigurationContextAction();\n\n  useEffect(() => {\n    fetchBoardConfiguration();\n  }, []);\n\n  return (\n    <InquiryProvider>\n      <InquiryFormProvider>\n        <ImageFileProvider>\n          <PersonalInquiryContent />\n        </ImageFileProvider>\n      </InquiryFormProvider>\n    </InquiryProvider>\n  );\n};\nexport default PersonalInquiry;\n","import { string, arrayOf, oneOf, shape, number, func } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\n\nimport { InquiryItem } from '../../../components/Board';\n\nconst EmptyPersonalInquiryList = () => (\n  <div className=\"inquiry-list__empty\">\n    <span className=\"ico ico--exclamation-white-bg\"></span>\n    <span className=\"product-board-list__empty-notes\">아직 등록된 1:1 문의가 없어요.</span>\n  </div>\n);\n\nconst PersonalInquiryList = ({ items = [], onModify, onDelete }) => {\n  const handleModifyButtonClick = (inquiryDetail) => {\n    onModify(inquiryDetail);\n  };\n\n  const handleDeleteButtonClick = (inquiryDetail) => {\n    onDelete(inquiryDetail);\n  };\n\n  return (\n    <VisibleComponent\n      shows={items.length > 0}\n      TruthyComponent={\n        <div className=\"personal-inquiry-list\">\n          {items.map((item) => (\n            <InquiryItem\n              key={item.inquiryNo}\n              inquiryTypeLabel={item.inquiryTypeInformation.name}\n              isReplied={item.inquiryStatus === 'ANSWERED'}\n              canModify={item.inquiryStatus !== 'ANSWERED'}\n              title={item.inquiryTitle}\n              content={item.inquiryContent}\n              registerDate={item.registerYmdt.slice(0, 10)}\n              images={item.images}\n              isMine={true}\n              onModify={() => handleModifyButtonClick(item)}\n              onDelete={() => handleDeleteButtonClick(item)}\n              answers={item.answerInformation ? [item.answerInformation] : []}\n            />\n          ))}\n        </div>\n      }\n      FalsyComponent={<EmptyPersonalInquiryList />}\n    />\n  );\n};\n\nPersonalInquiryList.propTypes = {\n  items: arrayOf(\n    shape({\n      inquiryNo: number,\n      inquiryStatus: oneOf(['ISSUED', 'ANSWERED', 'IN_PROGRESS', 'ASKED']),\n      inquiryTitle: string,\n      inquiryContent: string,\n      registerYmdt: string,\n      images: arrayOf(\n        shape({\n          imageUrl: string,\n          originFileName: string,\n        })\n      ),\n    })\n  ),\n  onModify: func,\n  onDelete: func,\n};\n\nexport default PersonalInquiryList;\n","import PersonalInquiry from './PersonalInquiry';\n\nexport default PersonalInquiry;\n","import { string, number } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCount = ({ title, count }) => (\n  <p className=\"my-page__total-count\">\n    {title}\n    <span className=\"my-page__count\">\n      <span>{convertToKoreanCurrency(count)}</span> 건\n    </span>\n  </p>\n);\n\nTotalCount.propTypes = {\n  title: string,\n  count: number,\n};\n\nexport default TotalCount;\n","import TotalCount from './TotalCount';\n\nexport default TotalCount;\n"],"names":[],"sourceRoot":""}