{"version":3,"file":"src_pages_MyPage_Claims_index_js.949b683f11c4d20ca8b3.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7BA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnHA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAKA;AAEA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAEA;AAeA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;ACvKA;AAEA;;;;;;;;;;;;;ACFA;AACA;AASA;AAKA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/StartYmdSelector/StartYmdSelector.jsx","webpack://@shopby/react-skin/./src/components/StartYmdSelector/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/MyPage/Claims/ClaimSummary.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Claims/Claims.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Claims/index.js","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js"],"sourcesContent":["import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { string, func, arrayOf, bool } from 'prop-types';\n\nimport { SelectBox } from '@shopby/react-components';\nimport { getDateLabel } from '@shopby/shared';\n\nconst convertDateOffsetOptionToSelectBoxOption = (offsetOption) => {\n  if (offsetOption === 'td')\n    return {\n      label: '오늘',\n      value: getDateLabel(),\n    };\n\n  const regexForOnlyNumber = /[^0-9]/g;\n  const typeStringArray = [];\n\n  const offset = Number(\n    offsetOption.replace(regexForOnlyNumber, (match) => {\n      typeStringArray.push(match);\n\n      return '';\n    })\n  );\n\n  const type = typeStringArray.join('');\n\n  if (!['y', 'm', 'd'].includes(type)) return null;\n\n  const LABEL_MAP = {\n    y: '년',\n    m: '개월',\n    d: '일',\n  };\n\n  const DATE_LABEL_TYPE_MAP = {\n    y: 'YEAR',\n    m: 'MONTH',\n    d: 'DATE',\n  };\n\n  return {\n    label: `${offset}${LABEL_MAP[type]}`,\n    value: getDateLabel(DATE_LABEL_TYPE_MAP[type], -offset),\n  };\n};\n\nconst DEFAULT_START_YMD_QUERY_PARAM_KEY = 'startYmd';\nconst DEFAULT_OFFSET_OPTIONS = ['td', '7d', '1m', '3m', '1y'];\n\n/**\n * 오늘을 기준으로 오늘, 3일 전, 1개월 전 등의 'startYmd' queryParam를 뽑아내는 컴포넌트입니다.\n * offsetOptions 는 ${offset}${'y' | 'm' | 'd'} 혹은 'td' 문자열로만 이루어진 배열만 넣을 수 있습니다.\n *\n * (ex) 'td', '3d', '2m', '1y'\n */\nconst StartYmdSelector = ({\n  disabled = false,\n  className = '',\n  offsetOptions = DEFAULT_OFFSET_OPTIONS,\n  initialOffsetOption,\n  onChange,\n  startYmdQueryParamKey = DEFAULT_START_YMD_QUERY_PARAM_KEY,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const datePeriodSelectBoxOptions = useMemo(\n    () => offsetOptions.map((offsetOption) => convertDateOffsetOptionToSelectBoxOption(offsetOption)),\n    [offsetOptions]\n  );\n\n  const handleStartYmdSelect = ({ currentTarget: { value } }) => {\n    searchParams.set(startYmdQueryParamKey, value);\n    setSearchParams(searchParams, { replace: true });\n  };\n\n  useEffect(() => {\n    const currentStartYmd = searchParams.get(startYmdQueryParamKey);\n    const optionValues = datePeriodSelectBoxOptions.map(({ value }) => value);\n\n    if (!currentStartYmd || !optionValues.includes(currentStartYmd)) {\n      const isInitialOffsetOptionValid = offsetOptions.includes(initialOffsetOption);\n      const initialValue = isInitialOffsetOptionValid\n        ? convertDateOffsetOptionToSelectBoxOption(initialOffsetOption).value\n        : datePeriodSelectBoxOptions[0].value;\n      searchParams.set(startYmdQueryParamKey, initialValue);\n      setSearchParams(() => searchParams, { replace: true });\n    }\n  }, [[...searchParams.keys()].length]);\n\n  useEffect(() => {\n    if (!searchParams.get(startYmdQueryParamKey)) return;\n    onChange?.(searchParams.get(startYmdQueryParamKey));\n  }, [searchParams]);\n\n  return (\n    <SelectBox\n      disabled={disabled}\n      className={`start-ymd-selector ${className ?? ''}`}\n      options={datePeriodSelectBoxOptions}\n      value={searchParams.get(startYmdQueryParamKey) || datePeriodSelectBoxOptions[0].value}\n      onSelect={handleStartYmdSelect}\n    />\n  );\n};\n\nexport default StartYmdSelector;\n\nStartYmdSelector.propTypes = {\n  disabled: bool,\n  className: string,\n  offsetOptions: arrayOf(string),\n  initialOffsetOption: string,\n  onChange: func,\n  startYmdQueryParamKey: string,\n};\n","import StartYmdSelector from './StartYmdSelector';\n\nexport default StartYmdSelector;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { Fragment, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { pick } from 'lodash-es';\nimport { string, arrayOf, object, func } from 'prop-types';\n\nimport { Button } from '@shopby/react-components';\nimport { convertToKoreanCurrency, NEXT_ACTION_TYPE_MAP } from '@shopby/shared';\n\nimport OptionLabel from '../../../components/OptionLabel';\n\nconst WITHDRAW_ACTION_TYPES_MAP = pick(NEXT_ACTION_TYPE_MAP, [\n  'WITHDRAW_CANCEL',\n  'WITHDRAW_EXCHANGE',\n  'WITHDRAW_RETURN',\n]);\nconst WITHDRAW_ACTION_TYPES = Object.keys(WITHDRAW_ACTION_TYPES_MAP);\n\nconst ClaimSummary = ({ claimYmdt, orderNo, claimedOptions, onWithdrawClaimBtnClick }) => {\n  const claimYmd = useMemo(() => claimYmdt.slice(0, 10), [claimYmdt]);\n\n  return (\n    <div className=\"claims__claim-summary\">\n      <p className=\"claims__identifier\">\n        <time dateTime={claimYmd} className=\"bold\">\n          {claimYmd.split('-').join('.')}\n        </time>\n        <span className=\"claims__order-no\">{orderNo}</span>\n      </p>\n      {claimedOptions.map(\n        ({\n          imageUrl,\n          optionName,\n          optionValue,\n          inputs: optionInputs,\n          orderOptionNo,\n          productName,\n          price: { buyAmt },\n          claimStatusTypeLabel,\n          nextActions,\n          optionType,\n        }) => (\n          <article key={orderOptionNo} className=\"claims__product-wrap\">\n            <Link className=\"claims__product\" to={`/orders/${orderNo}`}>\n              <img src={imageUrl} alt={`${productName} 이미지`} />\n              <div className=\"claims__product-description\">\n                <p className=\"claims__product-name\">{productName}</p>\n                <p className=\"claims__product-option-label\">\n                  {optionType !== 'PRODUCT_ONLY' && (\n                    <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n                  )}\n                </p>\n                <div className=\"claims__product-bottom\">\n                  <div className=\"claims__product-tag\">\n                    <span className=\"claims__pay-amount-label\">\n                      <span className=\"claims__pay-amount\">{convertToKoreanCurrency(buyAmt)}</span> 원\n                    </span>\n                    <span className=\"highlight\">{claimStatusTypeLabel}</span>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            {nextActions.map(({ nextActionType }) => {\n              if (WITHDRAW_ACTION_TYPES.includes(nextActionType)) {\n                return (\n                  <Button\n                    key={nextActionType}\n                    className=\"claims__withdraw-btn\"\n                    onClick={(e) =>\n                      onWithdrawClaimBtnClick?.(e, orderOptionNo, WITHDRAW_ACTION_TYPES_MAP[nextActionType])\n                    }\n                  >\n                    {WITHDRAW_ACTION_TYPES_MAP[nextActionType]}\n                  </Button>\n                );\n              }\n\n              return <Fragment key={nextActionType}></Fragment>;\n            })}\n          </article>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default ClaimSummary;\n\nClaimSummary.propTypes = {\n  claimYmdt: string,\n  orderNo: string,\n  claimedOptions: arrayOf(object),\n  onWithdrawClaimBtnClick: func,\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { debounce } from 'lodash-es';\n\nimport {\n  ClaimProvider,\n  InfiniteScrollLoader,\n  MyClaimProvider,\n  Skeleton,\n  Tabs,\n  TabsProvider,\n  useClaimActionContext,\n  useModalActionContext,\n  useMyClaimActionContext,\n  useMyClaimStateContext,\n  useTabsStateContext,\n  VisibleComponent,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../../components/ErrorBoundary';\nimport StartYmdSelector from '../../../components/StartYmdSelector';\nimport useLayoutChanger from '../../../hooks/useLayoutChanger';\n\nimport ClaimSummary from './ClaimSummary';\n\nconst PAGE_SIZE = 10;\nconst CLAIMS_TABS = [\n  ['ALL', '전체'],\n  ['RETURN', '반품'],\n  ['EXCHANGE', '교환'],\n  ['CANCEL', '취소'],\n].map(([value, label]) => ({ value, label }));\n\nconst ListSkeleton = () => (\n  <>\n    {Array(4)\n      .fill(null)\n      .map((_, idx) => (\n        <Skeleton key={idx} type=\"LIST\" />\n      ))}\n  </>\n);\n\nconst ClaimsContent = () => {\n  const { fetchClaims } = useMyClaimActionContext();\n  const { claimsWithAccumulation, totalClaimsCount } = useMyClaimStateContext();\n  const { withdrawClaimByOrderOptionNo } = useClaimActionContext();\n  const { openAlert, openConfirm } = useModalActionContext();\n  const { currentTab } = useTabsStateContext();\n  const [searchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isInfiniteScrollLoaderDisabled, setIsInfiniteScrollLoaderDisabled] = useState(true);\n  const [pageNumber, setPageNumber] = useState(1);\n  const { catchError } = useErrorBoundaryActionContext();\n\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    hasCartBtnOnHeader: true,\n    hasBottomNav: true,\n    title: '클레임 내역',\n  });\n\n  const claimsRequestOption = useMemo(\n    () => ({\n      claimTypes: currentTab === 'ALL' ? undefined : [currentTab],\n      pageSize: PAGE_SIZE,\n      startYmd: searchParams.get('startYmd') ?? '',\n      endYmd: searchParams.get('endYmd') ?? '',\n    }),\n    [searchParams, currentTab]\n  );\n\n  const initializeClaims = useCallback(\n    debounce(async (claimsRequestOption) => {\n      await fetchClaims({ ...claimsRequestOption, pageNumber: 1 });\n      setPageNumber(1);\n      setIsInfiniteScrollLoaderDisabled(false);\n      setIsLoading(false);\n    }, 500),\n    []\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n    initializeClaims(claimsRequestOption);\n  }, [claimsRequestOption]);\n\n  const handleIntersect = async () => {\n    setIsInfiniteScrollLoaderDisabled(true);\n\n    if (totalClaimsCount / claimsRequestOption.pageSize < pageNumber) return;\n    await fetchClaims({ ...claimsRequestOption, pageNumber: pageNumber + 1 });\n    setPageNumber((pageNumber) => pageNumber + 1);\n    setIsInfiniteScrollLoaderDisabled(false);\n  };\n\n  const handleWithdrawClaimBtnClick = (e, orderOptionNo, withdrawTypeLabel) => {\n    openConfirm({\n      message: `${withdrawTypeLabel}를 진행하시겠습니까?`,\n      onConfirm: async () => {\n        try {\n          await withdrawClaimByOrderOptionNo(orderOptionNo);\n          openAlert({\n            message: `철회가 완료되었습니다.`,\n            onClose: () => {\n              initializeClaims();\n            },\n          });\n        } catch (e) {\n          catchError(e);\n        }\n      },\n      confirmLabel: '신청',\n    });\n  };\n\n  return (\n    <div className=\"claims\">\n      <Tabs className=\"claims__tabs\" />\n      <section className=\"claims__content\">\n        <StartYmdSelector className=\"claims__period-select\" initialOffsetOption=\"7d\" />\n        <VisibleComponent\n          shows={!isLoading}\n          FalsyComponent={<ListSkeleton />}\n          TruthyComponent={\n            <VisibleComponent\n              shows={Boolean(claimsWithAccumulation?.length)}\n              FalsyComponent={<p className=\"claims__no-items bold\">내역이 없습니다.</p>}\n              TruthyComponent={\n                <>\n                  {claimsWithAccumulation?.map(({ claimNo, claimYmdt, orderNo, claimedOptions }) => (\n                    <ClaimSummary\n                      key={claimNo}\n                      claimYmdt={claimYmdt}\n                      orderNo={orderNo}\n                      claimedOptions={claimedOptions}\n                      onWithdrawClaimBtnClick={handleWithdrawClaimBtnClick}\n                    />\n                  ))}\n                  <InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollLoaderDisabled} />\n                </>\n              }\n            />\n          }\n        />\n      </section>\n    </div>\n  );\n};\n\nconst Claims = () => {\n  const initialTabsState = {\n    tabs: CLAIMS_TABS,\n  };\n\n  return (\n    <MyClaimProvider willClaimsBeAccumulated={true}>\n      <ClaimProvider>\n        <TabsProvider initialState={initialTabsState} usesQueryParam={true} queryParamKeyName={'claimType'}>\n          <ClaimsContent />\n        </TabsProvider>\n      </ClaimProvider>\n    </MyClaimProvider>\n  );\n};\n\nexport default Claims;\n","import Claims from './Claims';\n\nexport default Claims;\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n"],"names":[],"sourceRoot":""}