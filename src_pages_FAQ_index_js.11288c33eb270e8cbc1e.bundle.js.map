{"version":3,"file":"src_pages_FAQ_index_js.11288c33eb270e8cbc1e.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAQA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAIA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;ACFA;;;;;;;;;;;;;;;;ACAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAaA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;ACvHA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FAQList/FAQList.jsx","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/constants/common.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/FAQ/FAQ.jsx","webpack://@shopby/react-skin/./src/pages/FAQ/index.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nimport { number, string, array } from 'prop-types';\n\nimport {\n  Icon,\n  IconBtn,\n  VisibleComponent,\n  useArticleActionContext,\n  useArticleStateContext,\n} from '@shopby/react-components';\n\nimport Sanitized from '../Sanitized';\n\nconst EmptyFAQList = () => (\n  <div className=\"empty-list\">\n    <p>등록된 FAQ가 없습니다.</p>\n  </div>\n);\n\nconst LockedFAQ = ({ articleNo }) => (\n  <li key={articleNo} className={'faq-list__content-wrap customer-center__content-warp'}>\n    <div className=\"faq-list__content faq-list__question customer-center__content customer-center__content--question\">\n      <Icon className=\"ico ico--lock\" name=\"lock\" />\n      <p>비밀글입니다.</p>\n    </div>\n  </li>\n);\n\nLockedFAQ.propTypes = {\n  articleNo: number,\n};\n\nconst FAQList = ({ questions, faqNo }) => {\n  const { fetchArticleDetailBy } = useArticleActionContext();\n  const { articleDetail } = useArticleStateContext();\n\n  const [selectedAnswerNo, setSelectedAnswerNo] = useState(0);\n\n  const showsAnswer = useCallback((articleNo) => selectedAnswerNo === articleNo, [selectedAnswerNo]);\n  const handleQuestionClick = useCallback(\n    (articleNo) => setSelectedAnswerNo((prevNo) => (prevNo === articleNo ? 0 : articleNo)),\n    []\n  );\n\n  useEffect(() => {\n    if (selectedAnswerNo > 0) {\n      fetchArticleDetailBy({\n        boardNo: faqNo,\n        articleNo: selectedAnswerNo,\n      });\n    }\n  }, [selectedAnswerNo]);\n\n  return (\n    <VisibleComponent\n      shows={questions.length > 0}\n      TruthyComponent={\n        <ul className=\"faq-list\">\n          {questions.map((faq) => (\n            <VisibleComponent\n              key={faq.articleNo}\n              shows={faq.secreted}\n              TruthyComponent={<LockedFAQ key={faq.articleNo} articleNo={faq.articleNo} />}\n              FalsyComponent={\n                <li\n                  key={faq.articleNo}\n                  className={`faq-list__content-wrap customer-center__content-warp${\n                    showsAnswer(faq.articleNo) ? ' is-open' : ''\n                  }`}\n                  onClick={() => handleQuestionClick(faq.articleNo)}\n                >\n                  <div className=\"faq-list__content faq-list__question customer-center__content customer-center__content--question\">\n                    <span className=\"ico ico--q\"></span>\n                    <p>\n                      {faq.notice ? '[공지]' : ''} {faq.title}\n                    </p>\n                    <IconBtn className=\"arrow\" iconType=\"angle-down\" />\n                  </div>\n                  {showsAnswer(faq.articleNo) && articleDetail.content && (\n                    <div className=\"faq-list__content editor faq-list__answer customer-center__content customer-center__content--answer\">\n                      <span className=\"ico ico--a\"></span>\n                      <Sanitized className=\"sanitize-wrap\" html={articleDetail.content} style={{ width: '100%' }} />\n                    </div>\n                  )}\n                </li>\n              }\n            />\n          ))}\n        </ul>\n      }\n      FalsyComponent={<EmptyFAQList />}\n    />\n  );\n};\n\nexport default FAQList;\n\nFAQList.displayName = 'FAQList';\n\nFAQList.propTypes = {\n  faqNo: number,\n  pageSize: number,\n  keyword: string,\n  questions: array,\n};\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","export const INFINITY_SCROLL_PAGE_SIZE = 6;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useState, useMemo, useEffect } from 'react';\n\nimport {\n  Button,\n  TextField,\n  ArticleProvider,\n  useModalActionContext,\n  InfiniteScrollLoader,\n  useArticleStateContext,\n  useArticleActionContext,\n  useMallStateContext,\n  useInfiniteScroll,\n  VisibleComponent,\n} from '@shopby/react-components';\n\nimport FAQList from '../../components/FAQList/FAQList';\nimport ListSkeleton from '../../components/ListSkeleton/ListSkeleton';\nimport { INFINITY_SCROLL_PAGE_SIZE } from '../../constants/common';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nconst FAQContent = () => {\n  const [keyword, setKeyword] = useState('');\n\n  const { openAlert } = useModalActionContext();\n  const { boardsCategories } = useMallStateContext();\n  const {\n    article: { totalCount },\n  } = useArticleStateContext();\n  const { fetchArticles } = useArticleActionContext();\n\n  const faqNo = useMemo(\n    () => boardsCategories.find(({ boardId }) => boardId.toLowerCase().includes('faq'))?.boardNo ?? 0,\n    [boardsCategories]\n  );\n\n  const handleKeywordChange = ({ currentTarget }) => {\n    setKeyword(currentTarget.value);\n  };\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (requestOption) => {\n      const { data } = await fetchArticles(requestOption);\n\n      return data.items;\n    },\n    requestOption: {\n      pageNumber: 1,\n      pageSize: INFINITY_SCROLL_PAGE_SIZE,\n      boardNo: 'faq',\n      keyword,\n    },\n  });\n\n  const handleSearchBtn = () => {\n    const _keyword = keyword.trim();\n\n    if (!_keyword) {\n      openAlert({\n        message: '검색어를 입력하세요.',\n      });\n    }\n\n    fetchInitialItems({\n      requestOption: {\n        keyword,\n      },\n    });\n  };\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  useEffect(() => {\n    if (!faqNo) return;\n\n    fetchInitialItems({\n      requestOption: {\n        faqNo,\n        keyword,\n      },\n    });\n  }, [faqNo]);\n\n  return (\n    <div className=\"faq\">\n      <div className=\"faq__search\">\n        <TextField value={keyword} onChange={handleKeywordChange} placeholder=\"검색어를 입력하세요\" />\n        <Button theme=\"dark\" label=\"검색\" onClick={handleSearchBtn} />\n      </div>\n      <FAQList questions={accumulativeItems} faqNo={faqNo} />\n\n      <VisibleComponent\n        shows={accumulativeItems.length > 0}\n        TruthyComponent={<InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />}\n      />\n      <ListSkeleton className=\"faq-list\" isLoading={isLoading} />\n    </div>\n  );\n};\n\nconst FAQ = () => {\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    title: 'FAQ',\n    hasCartBtnOnHeader: true,\n    hasBottomNav: true,\n  });\n\n  return (\n    <ArticleProvider>\n      <FAQContent />\n    </ArticleProvider>\n  );\n};\n\nexport default FAQ;\n","import FAQ from './FAQ';\n\nexport default FAQ;\n"],"names":[],"sourceRoot":""}