{"version":3,"file":"src_pages_Cart_index_js.9fe33f8adff416aa1b47.bundle.js","mappings":"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EA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;ACxCA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AAQA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;ACvKA;AAEA;AACA;;AAEA;;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC9BA;AAEA;;;;;;;;;;;;;ACFA;AACA;AASA;AAKA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/PriceTag/PriceTag.jsx","webpack://@shopby/react-skin/./src/components/PriceTag/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbItem/ProductThumbItem.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/Cart/Cart.jsx","webpack://@shopby/react-skin/./src/pages/Cart/CartPriceTag.jsx","webpack://@shopby/react-skin/./src/pages/Cart/CartTopSelectManager.jsx","webpack://@shopby/react-skin/./src/pages/Cart/DeliverySection.jsx","webpack://@shopby/react-skin/./src/pages/Cart/FixedOrderBtn.jsx","webpack://@shopby/react-skin/./src/pages/Cart/index.js","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js"],"sourcesContent":["import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { Fragment } from 'react';\n\nimport { shape, string, arrayOf, bool, node, element, oneOfType } from 'prop-types';\n\n// import('./_price-tag.scss');\n\n// TODO: i18n\n\n/* eslint-disable react/prop-types */\nconst FinalAmount = ({ name, amountLabel, currencyLabel }) => (\n  <dl className=\"price-tag__final-amount\">\n    <dt>{name}</dt>\n    <dd>\n      <em>{amountLabel}</em>\n      {currencyLabel}\n    </dd>\n  </dl>\n);\n\nconst PriceDetails = ({ details, currencyLabel }) => (\n  <dl className=\"price-tag__details\">\n    {details.map(({ name, amountLabel }) => (\n      <Fragment key={name}>\n        <dt>{name}</dt>\n        <dd>\n          <em>{amountLabel}</em>\n          {currencyLabel}\n        </dd>\n      </Fragment>\n    ))}\n  </dl>\n);\n/* eslint-enable react/prop-types */\n\nconst PriceTag = ({\n  finalAmount: { name = '최종 결제 금액', amountLabel },\n  details = [],\n  currencyLabel = '원',\n  isUpsideDown = false,\n  showsBorder = true,\n  children,\n}) => {\n  if (isUpsideDown)\n    return (\n      <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n        <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n        <div className=\"price-tag__division\" />\n        <PriceDetails details={details} currencyLabel={currencyLabel} />\n        {children}\n      </div>\n    );\n\n  return (\n    <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n      <PriceDetails details={details} currencyLabel={currencyLabel} />\n      <div className=\"price-tag__division\" />\n      <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n      {children}\n    </div>\n  );\n};\n\nexport default PriceTag;\n\nPriceTag.propTypes = {\n  finalAmount: shape({\n    name: string,\n    amountLabel: string.isRequired,\n  }).isRequired,\n  details: arrayOf(\n    shape({\n      name: string.isRequired,\n      amountLabel: string.isRequired,\n    })\n  ).isRequired,\n  currencyLabel: string,\n  isUpsideDown: bool,\n  showsBorder: bool,\n  children: oneOfType([node, element]),\n};\n","import PriceTag from './PriceTag';\n\nexport default PriceTag;\n","import { string, number, arrayOf, shape, bool, func } from 'prop-types';\n\nimport { QuantityChanger, ThumbItem, VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../OptionLabel';\n\nconst ProductThumbItem = ({\n  productNo = 0,\n  imageUrl = '',\n  brandName = '',\n  productName = '',\n  orderCnt,\n  buyAmt,\n  optionName = '',\n  optionValue = '',\n  optionInputs = [],\n  usesQuantityChanger,\n  quantityChangerValue,\n  onQuantityChange,\n  frontDisplayYn = 'Y',\n  OptionComponent = null,\n  AmountComponent = null,\n  isRedirectingDisabled = false,\n}) => {\n  if (!frontDisplayYn) return <></>;\n\n  return (\n    <ThumbItem\n      href={isRedirectingDisabled ? '#' : `/product-detail?productNo=${productNo}`}\n      src={imageUrl}\n      className=\"product-thumb-item\"\n      alt={productName}\n    >\n      <VisibleComponent shows={brandName} TruthyComponent={<p className=\"product-thumb-item__brand\">{brandName}</p>} />\n      <div>\n        <p className=\"product-thumb-item__name\">{productName}</p>\n        <VisibleComponent\n          shows={optionName || optionInputs.length > 0}\n          TruthyComponent={\n            <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n          }\n        />\n        {OptionComponent && <OptionComponent />}\n      </div>\n      <div className=\"product-thumb-item__amount-wrap\">\n        <ul className=\"product-thumb-item__amount\">\n          {orderCnt >= 0 && <li>{orderCnt}개 </li>}\n          {buyAmt >= 0 && <li>{convertToKoreanCurrency(buyAmt)}원</li>}\n        </ul>\n        {AmountComponent && <AmountComponent />}\n        {usesQuantityChanger && <QuantityChanger value={quantityChangerValue} onChange={onQuantityChange} />}\n      </div>\n    </ThumbItem>\n  );\n};\nexport default ProductThumbItem;\n\nProductThumbItem.propTypes = {\n  frontDisplayYn: bool,\n  brandName: string,\n  productName: string.isRequired,\n  orderCnt: number,\n  buyAmt: number,\n  imageUrl: string,\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(\n    shape({\n      inputLabel: string,\n      inputValue: string,\n    })\n  ),\n  productNo: number,\n  OptionComponent: func,\n  AmountComponent: func,\n  usesQuantityChanger: bool,\n  quantityChangerValue: number,\n  onQuantityChange: func,\n  isRedirectingDisabled: bool,\n};\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport {\n  Button,\n  CartProvider,\n  MallProvider,\n  NaverPayProvider,\n  OrderSheetProvider,\n  useCartActionContext,\n  useCartStateContext,\n  useMallStateContext,\n  useNaverPayActionContext,\n  useOrderSheetActionContext,\n  usePageScriptsActionContext,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../components/ErrorBoundary';\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport CartPriceTag from './CartPriceTag';\nimport CartTopSelectManager from './CartTopSelectManager';\nimport DeliverySection from './DeliverySection';\nimport FixedOrderBtn from './FixedOrderBtn';\n\nconst CartContent = () => {\n  const { fetchCartDetail } = useCartActionContext();\n  const { applyPageScripts } = usePageScriptsActionContext();\n  const { checkedProducts, checkedCartNos, cartDetail } = useCartStateContext();\n  const { showNaverPayButton, prepareNaverPay, checkUsesNaverPayOrder } = useNaverPayActionContext();\n  const { makeOrderSheet } = useOrderSheetActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    title: '장바구니',\n  });\n\n  useEffect(() => {\n    fetchCartDetail();\n  }, []);\n\n  useEffect(() => {\n    if (cartDetail) {\n      applyPageScripts('CART', { cart: cartDetail });\n    }\n  }, [cartDetail]);\n\n  const handleOrderBtnClick = async () => {\n    try {\n      const { data } = await makeOrderSheet({\n        cartNos: checkedCartNos,\n        products: checkedProducts,\n      });\n      location.href = `/order/${data.orderSheetNo}`;\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      const usesNaverPayOrder = await checkUsesNaverPayOrder();\n      if (usesNaverPayOrder) {\n        showNaverPayButton({\n          containerElementId: 'naver-pay',\n          isCartPage: true,\n          redirectUrlAfterBuying: '/order/confirm',\n        });\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!checkedProducts) return;\n\n    const items = checkedProducts.map(({ productNo, optionNo, orderCnt, optionInputs, channelType }) => ({\n      productNo,\n      optionNo,\n      orderCnt,\n      optionInputs,\n      channelType: channelType ?? '',\n    }));\n\n    prepareNaverPay({ items });\n  }, [checkedProducts]);\n\n  return (\n    <div className=\"cart\">\n      <CartTopSelectManager />\n      <DeliverySection />\n      <section className=\"l-panel cart__payment-info\">\n        <CartPriceTag />\n        <Button className=\"cart__order-btn\" label=\"주문하기\" onClick={handleOrderBtnClick} />\n        <div className=\"cart__naver-pay-btn\" id=\"naver-pay\" />\n      </section>\n      <FixedOrderBtn onOrderBtnClick={handleOrderBtnClick} />\n    </div>\n  );\n};\n\nconst MallConfigInjector = () => {\n  const { clientId, mallProfile } = useMallStateContext();\n  const { cartConfig } = useMallStateContext();\n\n  return (\n    <OrderSheetProvider>\n      <NaverPayProvider clientId={clientId} mallProfile={mallProfile} platform={isMobile ? 'MOBILE_WEB' : 'PC'}>\n        <CartProvider\n          dividesInvalidProducts={true}\n          guestCartOption={{\n            storagePeriodByDays: cartConfig?.storagePeriod,\n            storageMaxQuantity: cartConfig?.storageMaxQuantity,\n          }}\n        >\n          <CartContent />\n        </CartProvider>\n      </NaverPayProvider>\n    </OrderSheetProvider>\n  );\n};\n\nconst Cart = () => (\n  <MallProvider>\n    <MallConfigInjector />\n  </MallProvider>\n);\n\nexport default Cart;\n","import { useCartStateContext } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport PriceTag from '../../components/PriceTag';\n\nconst CartPriceTag = () => {\n  const { paymentInfo } = useCartStateContext();\n\n  const paymentDetails = [\n    {\n      name: '상품금액 합계',\n      amountLabel: convertToKoreanCurrency(paymentInfo.standardAmt),\n    },\n    {\n      name: '할인금액 합계',\n      amountLabel: `- ${convertToKoreanCurrency(paymentInfo.discountAmt)}`,\n    },\n    {\n      name: '배송비 합계',\n      amountLabel: `+ ${convertToKoreanCurrency(paymentInfo.totalPrePaidDeliveryAmt)}`,\n    },\n  ];\n\n  return (\n    <>\n      <PriceTag\n        finalAmount={{\n          name: '총 결제금액',\n          amountLabel: convertToKoreanCurrency(paymentInfo.totalAmt),\n        }}\n        details={paymentDetails}\n      >\n        <span className=\"cart__mileage\">\n          예상적립&nbsp;<em>{convertToKoreanCurrency(paymentInfo.accumulationAmtWhenBuyConfirm)}</em>&nbsp;M\n        </span>\n      </PriceTag>\n    </>\n  );\n};\n\nexport default CartPriceTag;\n","import { useMemo } from 'react';\n\nimport { Checkbox, useCartActionContext, useCartStateContext, useModalActionContext } from '@shopby/react-components';\n\nconst CartTopSelectManager = () => {\n  const { openConfirm, openAlert } = useModalActionContext();\n  const { isAllChecked, checkedCartNos, checkingStatusPerCartNo } = useCartStateContext();\n  const { updateIsAllChecked, deleteCartNos } = useCartActionContext();\n\n  const allCartNosLength = useMemo(() => Object.keys(checkingStatusPerCartNo).length, [checkingStatusPerCartNo]);\n  const handleAllSelectCheckboxChange = ({ currentTarget }) => {\n    const isChecked = currentTarget.checked;\n    updateIsAllChecked(isChecked);\n  };\n\n  const handleDeleteSelectedItemBtnClick = () => {\n    if (!checkedCartNos.length) {\n      openAlert({\n        message: '먼저 삭제할 상품들을 선택해주세요.',\n      });\n\n      return;\n    }\n    openConfirm({\n      message: '선택된 상품들을 삭제하시겠습니까?',\n      confirmLabel: '삭제',\n      onConfirm: () => {\n        deleteCartNos(checkedCartNos);\n      },\n    });\n  };\n\n  return (\n    <section className=\"l-panel cart__select-manager\">\n      <span className=\"cart__check-all-btn\">\n        <Checkbox label=\"전체 선택\" isRounded={true} onChange={handleAllSelectCheckboxChange} checked={isAllChecked} />\n        <span className=\"cart__checked-amt\">\n          ({checkedCartNos.length}/{allCartNosLength})\n        </span>\n      </span>\n      <span className=\"cart__delete-selected-btn\">\n        <label htmlFor=\"delete-btn\">선택삭제</label>\n        <button id=\"delete-btn\" className=\"cart__delete-btn\" onClick={handleDeleteSelectedItemBtnClick} />\n      </span>\n    </section>\n  );\n};\n\nexport default CartTopSelectManager;\n","import { useMemo } from 'react';\n\nimport {\n  Checkbox,\n  ThumbList,\n  QuantityChanger,\n  useCartActionContext,\n  useCartStateContext,\n  useModalActionContext,\n} from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../../components/OptionLabel';\nimport ProductThumbItem from '../../components/ProductThumbItem';\n\nconst DeliverySection = () => {\n  const { openConfirm } = useModalActionContext();\n  const { updateIsDeliveryGroupChecked, updateIsCartNoChecked, deleteCartNos, modifyCart } = useCartActionContext();\n  const { cartDetail, checkingStatusPerDeliveryGroup, checkingStatusPerCartNo } = useCartStateContext();\n\n  const handleDeliveryGroupCheckboxChange = ({ currentTarget: { checked: isChecked } }, deliveryGroupIdx) => {\n    updateIsDeliveryGroupChecked({ deliveryGroupIdx, isChecked });\n  };\n\n  const handleCartNoCheckBoxChange = ({ currentTarget: { checked: isChecked } }, cartNo) => {\n    updateIsCartNoChecked({ cartNo, isChecked });\n  };\n\n  const handleDeleteBtnClick = (cartNo) => {\n    openConfirm({\n      message: '해당 상품을 삭제하시겠습니까?',\n      confirmLabel: '삭제',\n      onConfirm: () => {\n        deleteCartNos([cartNo]);\n      },\n    });\n  };\n\n  const handleQuantityChange = ({ orderCnt, cartNo, optionInputs }) => {\n    modifyCart([{ orderCnt, cartNo, optionInputs }]);\n  };\n\n  const itemsForRender = useMemo(\n    () => [\n      ...(cartDetail?.deliveryGroups ?? []),\n      ...(cartDetail?.invalidProducts.length\n        ? [\n            {\n              // 구매 제한 상품을 deliveryGroupIdx === -1 으로 취급하면 CartProvider와 연동이 가능해집니다.\n              partnerName: '구매 제한 상품',\n              orderProducts: cartDetail.invalidProducts,\n              isInvalidProduct: true,\n            },\n          ]\n        : []),\n    ],\n    [cartDetail]\n  );\n\n  if (!cartDetail) return <></>;\n  if (!cartDetail.deliveryGroups.length && !cartDetail.invalidProducts.length) {\n    return <p className=\"cart__empty\">장바구니에 담긴 상품이 없습니다.</p>;\n  }\n\n  return (\n    <>\n      {itemsForRender.map(({ partnerName, orderProducts, isInvalidProduct }, deliveryGroupIdx) => (\n        <section className=\"l-panel cart__delivery-section\" key={deliveryGroupIdx}>\n          <p className=\"cart__check-all-btn cart__check-all-btn--delivery-group\">\n            <Checkbox\n              label={partnerName}\n              isRounded={true}\n              checked={checkingStatusPerDeliveryGroup[isInvalidProduct ? -1 : deliveryGroupIdx] ?? false}\n              onChange={(e) => handleDeliveryGroupCheckboxChange(e, isInvalidProduct ? -1 : deliveryGroupIdx)}\n              // 구매 제한 상품을 deliveryGroupIdx === -1 으로 취급하면 CartProvider와 연동이 가능해집니다.\n            />\n          </p>\n          {orderProducts\n            .flatMap(({ orderProductOptions, brandName, imageUrl, productName, optionUsed }) =>\n              orderProductOptions.map((orderProductOption) => ({\n                ...orderProductOption,\n                brandName,\n                imageUrl,\n                productName,\n                optionUsed,\n              }))\n            )\n            .map(\n              ({\n                brandName,\n                imageUrl,\n                cartNo,\n                orderCnt,\n                productName,\n                optionUsed,\n                optionName,\n                optionValue,\n                price,\n                optionInputs,\n                stockCnt,\n                productNo,\n              }) => (\n                <div className=\"cart__product\" key={cartNo}>\n                  <Checkbox\n                    isRounded={true}\n                    checked={checkingStatusPerCartNo[cartNo] ?? false}\n                    onChange={(e) => handleCartNoCheckBoxChange(e, cartNo)}\n                  />\n                  <div className=\"cart__product-detail\">\n                    <ThumbList>\n                      <ProductThumbItem\n                        imageUrl={imageUrl}\n                        brandName={brandName}\n                        productName={productName}\n                        productNo={productNo}\n                        isRedirectingDisabled={isInvalidProduct}\n                      />\n                    </ThumbList>\n\n                    <div className=\"cart__quantity-controller\">\n                      {optionUsed && (\n                        <>\n                          <div className=\"cart__product-option\">\n                            <OptionLabel\n                              optionName={optionName}\n                              optionValue={optionValue}\n                              optionInputs={optionInputs}\n                            />\n                            <button className=\"cart__delete-btn\" onClick={() => handleDeleteBtnClick(cartNo)}>\n                              <span className=\"a11y\">상품 삭제</span>\n                            </button>\n                          </div>\n                        </>\n                      )}\n\n                      <p>\n                        <QuantityChanger\n                          initialValue={orderCnt}\n                          onChange={(cnt) => handleQuantityChange({ orderCnt: cnt, cartNo, optionInputs })}\n                          max={stockCnt}\n                          min={1}\n                          disabled={isInvalidProduct}\n                        />\n\n                        <span className=\"cart__product-price\">\n                          <span>\n                            <span className=\"bold\">\n                              {isInvalidProduct ? '- ' : convertToKoreanCurrency(price.buyAmt)}\n                            </span>\n                            원\n                          </span>\n                          {!optionUsed && (\n                            <button className=\"cart__delete-btn\" onClick={() => handleDeleteBtnClick(cartNo)} />\n                          )}\n                        </span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )\n            )}\n        </section>\n      ))}\n    </>\n  );\n};\n\nexport default DeliverySection;\n","import { func } from 'prop-types';\n\nimport { Button, useCartStateContext } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\n// TODO: i18n\n\nconst FixedOrderBtn = ({ onOrderBtnClick }) => {\n  const { paymentInfo, checkedCartNos } = useCartStateContext();\n\n  return (\n    <div className=\"cart__fixed-order-btn\">\n      <div className=\"cart__fixed-summary\">\n        <div className=\"cart__fixed-summary-label\">\n          <span>총 결제금액</span>\n          <span className=\"cart__fixed-summary-number\">({checkedCartNos.length}개)</span>\n        </div>\n        <em>\n          <strong>{convertToKoreanCurrency(paymentInfo.totalAmt)}</strong>원\n        </em>\n      </div>\n      <Button className=\"cart__order-btn\" label=\"주문하기\" onClick={onOrderBtnClick} />\n    </div>\n  );\n};\n\nexport default FixedOrderBtn;\n\nFixedOrderBtn.propTypes = {\n  onOrderBtnClick: func,\n};\n","import Cart from './Cart';\n\nexport default Cart;\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n"],"names":[],"sourceRoot":""}