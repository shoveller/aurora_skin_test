{"version":3,"file":"src_pages_OrderSheet_index_js.36fe81763eda4a4da1cf.bundle.js","mappings":"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EA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnOA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AAEA;AAaA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrLA;AACA;AAEA;AAEA;AAUA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AASA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AAEA;AACA;AAEA;AAOA;AACA;AAEA;AACA;;AAGA;AAcA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5IA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AAEA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAAA;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","sources":["webpack://@shopby/react-skin/./src/components/InfoList/InfoList.jsx","webpack://@shopby/react-skin/./src/components/InfoList/index.js","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/PriceTag/PriceTag.jsx","webpack://@shopby/react-skin/./src/components/PriceTag/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbItem/ProductThumbItem.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/CouponModal.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/OrderProductTable.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/OrderSheet.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/OrdererInfoForm.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/PayMethodSelector.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/PaymentInfo.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/PromotionController.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/ShippingAddressInfoForm.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/TermsChecker.jsx","webpack://@shopby/react-skin/./src/pages/OrderSheet/index.js","webpack://@shopby/react-skin/./src/pages/OrderSheet/useDeliveryMemoOptions.js","webpack://@shopby/react-skin/./src/pages/OrderSheet/useValidateFormMaker.js","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js"],"sourcesContent":["import { string, arrayOf } from 'prop-types';\n\nconst InfoList = ({ title, infos, className = '' }) => (\n  <div className={`info-list ${className}`}>\n    {title && <p className=\"info-list__title\">{title}</p>} {/* TODO: 아이콘 삽입 */}\n    <ul className=\"info-list__items\">\n      {infos.map((info) => (\n        <li key={info}>{info}</li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default InfoList;\n\nInfoList.propTypes = {\n  title: string,\n  infos: arrayOf(string).isRequired,\n  className: string,\n};\n","import InfoList from './InfoList';\n\nexport default InfoList;\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { Fragment } from 'react';\n\nimport { shape, string, arrayOf, bool, node, element, oneOfType } from 'prop-types';\n\n// import('./_price-tag.scss');\n\n// TODO: i18n\n\n/* eslint-disable react/prop-types */\nconst FinalAmount = ({ name, amountLabel, currencyLabel }) => (\n  <dl className=\"price-tag__final-amount\">\n    <dt>{name}</dt>\n    <dd>\n      <em>{amountLabel}</em>\n      {currencyLabel}\n    </dd>\n  </dl>\n);\n\nconst PriceDetails = ({ details, currencyLabel }) => (\n  <dl className=\"price-tag__details\">\n    {details.map(({ name, amountLabel }) => (\n      <Fragment key={name}>\n        <dt>{name}</dt>\n        <dd>\n          <em>{amountLabel}</em>\n          {currencyLabel}\n        </dd>\n      </Fragment>\n    ))}\n  </dl>\n);\n/* eslint-enable react/prop-types */\n\nconst PriceTag = ({\n  finalAmount: { name = '최종 결제 금액', amountLabel },\n  details = [],\n  currencyLabel = '원',\n  isUpsideDown = false,\n  showsBorder = true,\n  children,\n}) => {\n  if (isUpsideDown)\n    return (\n      <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n        <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n        <div className=\"price-tag__division\" />\n        <PriceDetails details={details} currencyLabel={currencyLabel} />\n        {children}\n      </div>\n    );\n\n  return (\n    <div className={`price-tag ${showsBorder ? '' : 'price-tag--no-border'}`}>\n      <PriceDetails details={details} currencyLabel={currencyLabel} />\n      <div className=\"price-tag__division\" />\n      <FinalAmount name={name} amountLabel={amountLabel} currencyLabel={currencyLabel} />\n      {children}\n    </div>\n  );\n};\n\nexport default PriceTag;\n\nPriceTag.propTypes = {\n  finalAmount: shape({\n    name: string,\n    amountLabel: string.isRequired,\n  }).isRequired,\n  details: arrayOf(\n    shape({\n      name: string.isRequired,\n      amountLabel: string.isRequired,\n    })\n  ).isRequired,\n  currencyLabel: string,\n  isUpsideDown: bool,\n  showsBorder: bool,\n  children: oneOfType([node, element]),\n};\n","import PriceTag from './PriceTag';\n\nexport default PriceTag;\n","import { string, number, arrayOf, shape, bool, func } from 'prop-types';\n\nimport { QuantityChanger, ThumbItem, VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../OptionLabel';\n\nconst ProductThumbItem = ({\n  productNo = 0,\n  imageUrl = '',\n  brandName = '',\n  productName = '',\n  orderCnt,\n  buyAmt,\n  optionName = '',\n  optionValue = '',\n  optionInputs = [],\n  usesQuantityChanger,\n  quantityChangerValue,\n  onQuantityChange,\n  frontDisplayYn = 'Y',\n  OptionComponent = null,\n  AmountComponent = null,\n  isRedirectingDisabled = false,\n}) => {\n  if (!frontDisplayYn) return <></>;\n\n  return (\n    <ThumbItem\n      href={isRedirectingDisabled ? '#' : `/product-detail?productNo=${productNo}`}\n      src={imageUrl}\n      className=\"product-thumb-item\"\n      alt={productName}\n    >\n      <VisibleComponent shows={brandName} TruthyComponent={<p className=\"product-thumb-item__brand\">{brandName}</p>} />\n      <div>\n        <p className=\"product-thumb-item__name\">{productName}</p>\n        <VisibleComponent\n          shows={optionName || optionInputs.length > 0}\n          TruthyComponent={\n            <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n          }\n        />\n        {OptionComponent && <OptionComponent />}\n      </div>\n      <div className=\"product-thumb-item__amount-wrap\">\n        <ul className=\"product-thumb-item__amount\">\n          {orderCnt >= 0 && <li>{orderCnt}개 </li>}\n          {buyAmt >= 0 && <li>{convertToKoreanCurrency(buyAmt)}원</li>}\n        </ul>\n        {AmountComponent && <AmountComponent />}\n        {usesQuantityChanger && <QuantityChanger value={quantityChangerValue} onChange={onQuantityChange} />}\n      </div>\n    </ThumbItem>\n  );\n};\nexport default ProductThumbItem;\n\nProductThumbItem.propTypes = {\n  frontDisplayYn: bool,\n  brandName: string,\n  productName: string.isRequired,\n  orderCnt: number,\n  buyAmt: number,\n  imageUrl: string,\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(\n    shape({\n      inputLabel: string,\n      inputValue: string,\n    })\n  ),\n  productNo: number,\n  OptionComponent: func,\n  AmountComponent: func,\n  usesQuantityChanger: bool,\n  quantityChangerValue: number,\n  onQuantityChange: func,\n  isRedirectingDisabled: bool,\n};\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import { useEffect, useMemo } from 'react';\n\nimport { string, shape, number, arrayOf, func } from 'prop-types';\n\nimport {\n  Button,\n  Radio,\n  useModalActionContext,\n  OrderSheetCouponProvider,\n  useOrderSheetCouponStateContext,\n  useOrderSheetCouponActionContext,\n  useMallStateContext,\n} from '@shopby/react-components';\nimport { ParameterTypeError, convertToKoreanCurrency } from '@shopby/shared';\n\nimport FullModal from '../../components/FullModal';\nimport InfoList from '../../components/InfoList';\n\nconst COUPON_TYPES = ['PRODUCT', 'CART'];\n\nconst CouponModalContent = ({ orderSheetNo, initialCoupon, onClose, onApplyCouponBtnClick }) => {\n  const {\n    couponAmount: { cartCouponDiscountAmt, productCouponDiscountAmt },\n    couponStatus,\n  } = useOrderSheetCouponStateContext();\n  const {\n    accumulationConfig: { accumulationName },\n  } = useMallStateContext();\n  const { selectCouponIndividually, isUsingCoupon, fetchCouponStatus, getSelectedCoupon } =\n    useOrderSheetCouponActionContext();\n  const allCouponAmt = useMemo(() => cartCouponDiscountAmt + productCouponDiscountAmt);\n  const { openAlert } = useModalActionContext();\n\n  const couponNotices = useMemo(\n    () => [\n      '상품 쿠폰과 장바구니 쿠폰은 함께 사용할 수 있습니다. 단, 일부 상품은 중복사용이 제외 됩니다.',\n      '쿠폰 사용불가 상품은 쿠폰할인 적용이 불가합니다.',\n      `쿠폰할인 시 구매 ${accumulationName} 적립이 불가합니다.`,\n      'PAYCO 전용 쿠폰은 PAYCO 결제만 가능합니다.',\n    ],\n    [accumulationName]\n  );\n\n  useEffect(() => {\n    if (!orderSheetNo) return;\n\n    fetchCouponStatus(orderSheetNo, initialCoupon);\n  }, [orderSheetNo]);\n\n  const handleCouponSelect = async (couponIssueNo, type, productNo) => {\n    if (!COUPON_TYPES.includes(type))\n      ParameterTypeError.of({ parameterName: 'type', functionName: handleCouponSelect.name });\n\n    try {\n      await selectCouponIndividually({\n        couponIssueNo,\n        type,\n        productNo,\n      });\n    } catch (e) {\n      openAlert({\n        message: e.message,\n      });\n    }\n  };\n\n  const handleApplyCouponBtnClick = () => {\n    onApplyCouponBtnClick?.(getSelectedCoupon());\n  };\n\n  return (\n    <FullModal title=\"상품 쿠폰 조회 및 적용\" onClose={onClose} className=\"coupon-modal\">\n      <div className=\"coupon-modal__summary\">\n        <div className=\"coupon-modal__summary-item\">\n          <p>상품 쿠폰</p>\n          <p>\n            <span className=\"bold\">{convertToKoreanCurrency(productCouponDiscountAmt)}</span> 원\n          </p>\n        </div>\n        <span className=\"coupon-modal__formula-symbol\"> + </span>\n        <div className=\"coupon-modal__summary-item\">\n          <p>장바구니 쿠폰</p>\n          <p>\n            <span className=\"bold\">{convertToKoreanCurrency(cartCouponDiscountAmt)} </span> 원\n          </p>\n        </div>\n        <span className=\"coupon-modal__formula-symbol\"> = </span>\n        <div className=\"coupon-modal__summary-item\">\n          <p>할인금액 합계</p>\n          <p>\n            <em className=\"bold highlight\">{convertToKoreanCurrency(allCouponAmt)} 원</em>\n          </p>\n        </div>\n      </div>\n      <div className=\"coupon-modal__details\">\n        <div className=\"coupon-modal__coupon-details\">\n          <section className=\"coupon-modal__coupon-section\">\n            <p className=\"coupon-modal__coupon-type\">상품 쿠폰 (상품쿠폰은 상품당 한 쿠폰만 적용됩니다.)</p>\n            {couponStatus?.products.map(({ productName, productNo, productCoupons }) => (\n              <div key={productNo}>\n                <p>{productName}</p>\n                <div className=\"coupon-modal__controller\">\n                  <div className=\"coupon-modal__controller-item\">\n                    <Radio\n                      id={`coupon-controller-${productNo}-0`}\n                      name={`coupon-controller-${productNo}`}\n                      value=\"0\"\n                      onChange={() => handleCouponSelect(null, 'PRODUCT', productNo)}\n                      checked={!isUsingCoupon('PRODUCT', productNo)}\n                    />\n                    <label htmlFor={`coupon-controller-${productNo}-0`}>선택 없음</label>\n                  </div>\n                  {productCoupons.map(({ couponIssueNo, couponName, useEndYmdt, couponDiscountAmt, selected }) => (\n                    <div key={`${productNo}-${couponIssueNo}`} className=\"coupon-modal__controller-item\">\n                      <Radio\n                        id={`coupon-controller-${productNo}-${couponIssueNo}`}\n                        name={`coupon-controller-${productNo}`}\n                        value={couponIssueNo}\n                        onChange={() => handleCouponSelect(couponIssueNo, 'PRODUCT', productNo)}\n                        checked={selected}\n                      />\n                      <label htmlFor={`coupon-controller-${productNo}-${couponIssueNo}`}>\n                        {couponName}\n                        <br />\n                        <span className=\"coupon-modal__date\">(~{useEndYmdt.slice(0, 10)})</span>\n                      </label>\n                      <span className=\"coupon-modal__coupon-amount\">\n                        {convertToKoreanCurrency(couponDiscountAmt)}원\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </section>\n          <section className=\"coupon-modal__coupon-section\">\n            <p className=\"coupon-modal__coupon-type\">장바구니 쿠폰 (쿠폰불가 상품 구매 시 사용이 불가합니다.)</p>\n            <div className=\"coupon-modal__controller\">\n              <div className=\"coupon-modal__controller-item\">\n                <Radio\n                  id={`coupon-controller-cart-0`}\n                  name=\"coupon-controller-cart\"\n                  value=\"0\"\n                  onChange={() => handleCouponSelect(null, 'CART')}\n                  checked={!isUsingCoupon('CART')}\n                />\n                <label htmlFor={`coupon-controller-cart-0`}>선택 없음</label>\n              </div>\n              {couponStatus?.cartCoupons.map(\n                ({ couponIssueNo, couponName, selected, useEndYmdt, couponDiscountAmt }) => (\n                  <div key={couponIssueNo} className=\"coupon-modal__controller-item\">\n                    <Radio\n                      id={`coupon-controller-cart-${couponIssueNo}`}\n                      name=\"coupon-controller-cart\"\n                      value={couponIssueNo}\n                      onChange={() => handleCouponSelect(couponIssueNo, 'CART')}\n                      checked={selected}\n                    />\n                    <label htmlFor={`coupon-controller-cart-${couponIssueNo}`}>\n                      {couponName}\n                      <br />\n                      <span className=\"coupon-modal__date\">(~{useEndYmdt.slice(0, 10)})</span>\n                    </label>\n                    <span className=\"coupon-modal__coupon-amount\">{convertToKoreanCurrency(couponDiscountAmt)}원</span>\n                  </div>\n                )\n              )}\n            </div>\n          </section>\n          <Button className=\"coupon-modal__apply-btn\" label=\"쿠폰 적용\" onClick={handleApplyCouponBtnClick} />\n        </div>\n\n        <InfoList className=\"coupon-modal__info\" title=\"쿠폰할인 유의사항\" infos={couponNotices} />\n      </div>\n    </FullModal>\n  );\n};\n\nconst CouponModal = ({ orderSheetNo, initialCoupon, onClose, onApplyCouponBtnClick }) => {\n  if (!orderSheetNo) return <></>;\n\n  return (\n    <OrderSheetCouponProvider>\n      <CouponModalContent\n        orderSheetNo={orderSheetNo}\n        initialCoupon={initialCoupon}\n        onClose={onClose}\n        onApplyCouponBtnClick={onApplyCouponBtnClick}\n      />\n    </OrderSheetCouponProvider>\n  );\n};\n\nexport default CouponModal;\n\nCouponModalContent.propTypes = {\n  orderSheetNo: string.isRequired,\n  initialCoupon: shape({\n    productCoupons: arrayOf(\n      shape({\n        productNo: number.isRequired,\n        couponIssueNo: number.isRequired,\n      })\n    ),\n    cartCouponIssueNo: number.isRequired,\n    promotionCode: string.isRequired,\n    channelType: string,\n  }),\n  onClose: func,\n  onApplyCouponBtnClick: func,\n};\n\nCouponModal.propTypes = {\n  orderSheetNo: string,\n  initialCoupon: shape({\n    productCoupons: arrayOf(\n      shape({\n        productNo: number.isRequired,\n        couponIssueNo: number.isRequired,\n      })\n    ),\n    cartCouponIssueNo: number.isRequired,\n    promotionCode: string.isRequired,\n    channelType: string,\n  }),\n  onClose: func,\n  onApplyCouponBtnClick: func,\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { Accordion, ThumbList, useOrderSheetStateContext } from '@shopby/react-components';\n\nimport ProductThumbItem from '../../components/ProductThumbItem';\n\nconst OrderProductTable = () => {\n  const { t } = useTranslation(['common', 'order']);\n  const { flattenedOrderProductOptions } = useOrderSheetStateContext();\n\n  return (\n    <section className=\"l-panel\">\n      <Accordion className=\"order-sheet__product-table\" title={t('orderProduct', { ns: 'order' })} isOpen={true}>\n        <ThumbList>\n          {flattenedOrderProductOptions.map(\n            (\n              { imageUrl, brandName, productName, orderCnt, optionName, optionValue, optionInputs, price, productNo },\n              idx\n            ) => (\n              <ProductThumbItem\n                productNo={productNo}\n                key={idx}\n                imageUrl={imageUrl}\n                brandName={brandName}\n                productName={productName}\n                orderCnt={orderCnt}\n                buyAmt={price.buyAmt}\n                optionName={optionName}\n                optionValue={optionValue}\n                optionInputs={optionInputs}\n              />\n            )\n          )}\n        </ThumbList>\n      </Accordion>\n    </section>\n  );\n};\n\nexport default OrderProductTable;\n","import { createRef, useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  Button,\n  MyShippingAddressProvider,\n  OrderSheetProvider,\n  useAuthStateContext,\n  useMyShippingAddressActionContext,\n  useMyShippingAddressStateContext,\n  useOrderSheetActionContext,\n  useOrderSheetStateContext,\n  DEFAULT_ORDER_SHEET_PROVIDER_STATE,\n  usePageScriptsActionContext,\n  useMallStateContext,\n} from '@shopby/react-components';\nimport { isSignedIn, parsePhoneNumber } from '@shopby/shared';\n\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport OrdererInfoForm from './OrdererInfoForm';\nimport OrderProductTable from './OrderProductTable';\nimport PaymentInfo from './PaymentInfo';\nimport PayMethodSelector from './PayMethodSelector';\nimport PromotionController from './PromotionController';\nimport ShippingAddressInfoForm from './ShippingAddressInfoForm';\nimport TermsChecker from './TermsChecker';\nimport useValidateFormMaker from './useValidateFormMaker';\n\nconst CUSTOM_ORDER_SHEET_TERMS = [\n  {\n    label: '구매하실 상품의 결제 정보를 확인하였으며, 구매 진행에 동의합니다.',\n    termsType: '구매하실 상품의 결제 정보를 확인하였으며, 구매 진행에 동의합니다.', // 확장성 고려\n    isRequired: true,\n  },\n];\n\nconst OrderSheetContent = () => {\n  const orderSheetRef = {\n    ordererInfoFormRef: {\n      ordererNameInputRef: createRef(),\n      emailInputRef: createRef(),\n      phoneNumberInputRef: createRef(),\n      passwordInputRef: createRef(),\n      passwordForConfirmationInputRef: createRef(),\n    },\n    shippingAddressInfoFormRef: {\n      receiverNameInputRef: createRef(),\n      addressFormRef: createRef(),\n      mobilePhoneNumberInputRef: createRef(),\n      addressDetailInputRef: createRef(),\n    },\n    depositBankFormRef: {\n      bankAccountSelectRef: createRef(),\n      remitterNameInputRef: createRef(),\n    },\n  };\n  const { orderSheetNo } = useParams();\n  const { t } = useTranslation('title');\n  const { profile } = useAuthStateContext();\n  const { order, fetchOrderSheet, updateOrdererInfo, updateShippingAddressInfo, resetShippingAddressInfo } =\n    useOrderSheetActionContext();\n  const {\n    ordererInfo,\n    shippingAddressInfo,\n    termsStatus,\n    orderSheet,\n    needsDepositBankForm,\n    bankAccountToDeposit,\n    remitterName,\n  } = useOrderSheetStateContext();\n  const { applyPageScripts } = usePageScriptsActionContext();\n  const { fetchMyShippingAddress } = useMyShippingAddressActionContext();\n  const { defaultAddress } = useMyShippingAddressStateContext();\n  const { validateForm } = useValidateFormMaker(orderSheetRef);\n\n  useLayoutChanger({ hasBackBtnOnHeader: true, title: t('orderSheet') });\n\n  useEffect(() => {\n    fetchOrderSheet({ orderSheetNo, includesMemberAddress: false });\n    if (isSignedIn()) {\n      fetchMyShippingAddress();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!orderSheet) return;\n\n    applyPageScripts('ORDER', { orderSheet });\n  }, [orderSheet]);\n\n  useEffect(() => {\n    if (!defaultAddress || shippingAddressInfo.zipCode) return;\n\n    resetShippingAddressInfo();\n    updateShippingAddressInfo({\n      addressNo: defaultAddress.addressNo,\n      addressName: defaultAddress.addressName,\n      receiverName: defaultAddress.receiverName,\n      roadAddress: defaultAddress.receiverAddress,\n      mobilePhoneNumber: parsePhoneNumber(defaultAddress.receiverContact1),\n      addressDetail: defaultAddress.receiverDetailAddress,\n      zipCode: defaultAddress.receiverZipCd,\n      countryCd: defaultAddress.countryCd,\n    });\n\n    if (defaultAddress.receiverContact2) {\n      updateShippingAddressInfo({\n        phoneNumber: parsePhoneNumber(defaultAddress.receiverContact2),\n      });\n    }\n  }, [defaultAddress]);\n\n  useEffect(() => {\n    if (!profile) return;\n\n    const { memberName, email, mobileNo } = profile;\n    const [emailId, emailDomain] = email.split('@');\n\n    updateOrdererInfo({\n      ordererName: memberName,\n      emailId,\n      emailDomain,\n      phoneNumber: mobileNo\n        ? parsePhoneNumber(mobileNo, { isWithDash: false })\n        : DEFAULT_ORDER_SHEET_PROVIDER_STATE.ordererInfo.phoneNumber,\n    });\n  }, [profile]);\n\n  const handleOrderBtnClick = () => {\n    const isValid = validateForm({\n      ordererInfo,\n      shippingAddressInfo,\n      termsStatus,\n      needsDepositBankForm,\n      bankAccountToDeposit,\n      remitterName,\n    });\n    if (!isValid) return;\n\n    order({\n      platform: isMobile ? 'MOBILE_WEB' : 'PC',\n      confirmUrl: `${location.origin}/order/confirm`,\n    });\n  };\n\n  return (\n    <div className=\"order-sheet\">\n      <OrdererInfoForm refs={orderSheetRef.ordererInfoFormRef} />\n      <ShippingAddressInfoForm refs={orderSheetRef.shippingAddressInfoFormRef} />\n      <OrderProductTable />\n      <PromotionController />\n      <PaymentInfo />\n      <PayMethodSelector refs={orderSheetRef.depositBankFormRef} />\n      <TermsChecker />\n      <Button className=\"order-sheet__pay-btn\" label={'결제 하기'} onClick={handleOrderBtnClick} />\n    </div>\n  );\n};\n\nconst OrderSheet = () => {\n  const { clientId, mallProfile } = useMallStateContext();\n\n  return (\n    <OrderSheetProvider\n      clientId={clientId}\n      mallProfile={mallProfile}\n      customTerms={CUSTOM_ORDER_SHEET_TERMS}\n      termTypesToExclude={'ORDER_INFO_AGREE'}\n    >\n      <MyShippingAddressProvider>\n        <OrderSheetContent />\n      </MyShippingAddressProvider>\n    </OrderSheetProvider>\n  );\n};\n\nexport default OrderSheet;\n\nOrderSheet.propTypes = {};\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { object } from 'prop-types';\n\nimport {\n  Accordion,\n  EmailInput,\n  PhoneNumberInput,\n  SelectBox,\n  TextField,\n  useAuthActionContext,\n  useOrderSheetActionContext,\n  useOrderSheetStateContext,\n} from '@shopby/react-components';\nimport { ParameterTypeError } from '@shopby/shared';\n\nimport { EMAIL_DOMAIN_OPTIONS } from '../../constants/form';\n\nconst OrdererInfoForm = ({ refs }) => {\n  const { t } = useTranslation('common');\n  const {\n    ordererInfo: { ordererName, emailId, emailDomain, phoneNumber, domainSelectorValue, guestInfo },\n  } = useOrderSheetStateContext();\n  const { updateOrdererInfo } = useOrderSheetActionContext();\n  const { isSignedIn } = useAuthActionContext();\n\n  useEffect(() => {\n    if (!isSignedIn()) {\n      updateOrdererInfo({ guestInfo: { password: '', passwordForConfirmation: '' } });\n    }\n  }, []);\n\n  const handleOrdererNameChange = ({ currentTarget: { value } }) => {\n    updateOrdererInfo({ ordererName: value });\n  };\n\n  const handleEmailDomainSelect = ({ currentTarget: { value } }) => {\n    updateOrdererInfo({\n      emailDomain: value,\n      domainSelectorValue: value,\n    });\n  };\n\n  const handleEmailDomainInputChange = ({ currentTarget: { value } }) => {\n    updateOrdererInfo({\n      emailDomain: value,\n      domainSelectorValue: '',\n    });\n  };\n\n  const handleEmailIdInputChange = ({ currentTarget: { value } }) => {\n    updateOrdererInfo({\n      emailId: value,\n    });\n  };\n\n  const handlePhoneCarrierNumberSelect = ({ currentTarget: { value: carrierNumber } }) => {\n    updateOrdererInfo({ phoneNumber: { carrierNumber } });\n  };\n\n  /**\n   *\n   * @param {ChangeEvent} param0\n   * @param {'first' | 'second'} type\n   */\n  const handlePhoneSerialNumberChange = ({ currentTarget: { value } }, type) => {\n    if (!['FIRST', 'SECOND'].includes(type)) {\n      ParameterTypeError.of({ parameterName: 'type', functionName: handlePhoneSerialNumberChange.name });\n    }\n\n    const typeByLowerCase = type.toLowerCase();\n\n    updateOrdererInfo({ phoneNumber: { [`${typeByLowerCase}Serial`]: value } });\n  };\n\n  const handleNonMemberInfoChange = ({ currentTarget: { value } }, type) => {\n    if (!['password', 'passwordForConfirmation'].includes(type)) {\n      ParameterTypeError.of({ parameterName: 'type', functionName: handleNonMemberInfoChange.name });\n    }\n\n    updateOrdererInfo({ guestInfo: { [type]: value } });\n  };\n\n  return (\n    <section className=\"l-panel\">\n      <Accordion title={t('ordererInfo', { ns: 'order' })} isOpen={true}>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('ordererName', { ns: 'order' })}</label>\n          <TextField\n            ref={refs.ordererNameInputRef}\n            value={ordererName}\n            onChange={handleOrdererNameChange}\n            maxLength={20}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('email')}</label>\n          <EmailInput\n            ref={refs.emailInputRef}\n            id={emailId}\n            domain={emailDomain}\n            onIdChange={handleEmailIdInputChange}\n            onDomainChange={handleEmailDomainInputChange}\n          />\n          <SelectBox\n            className=\"order-sheet__domain-select\"\n            value={domainSelectorValue}\n            hasEmptyOption={true}\n            emptyOptionLabel={t('directInput')}\n            options={EMAIL_DOMAIN_OPTIONS}\n            onSelect={handleEmailDomainSelect}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('mobilePhoneNumber')}</label>\n          <PhoneNumberInput\n            ref={refs.phoneNumberInputRef}\n            carrierNumber={phoneNumber.carrierNumber}\n            firstSerial={phoneNumber.firstSerial}\n            secondSerial={phoneNumber.secondSerial}\n            onCarrierNumberSelect={handlePhoneCarrierNumberSelect}\n            onFirstSerialChange={(e) => handlePhoneSerialNumberChange(e, 'FIRST')}\n            onSecondSerialChange={(e) => handlePhoneSerialNumberChange(e, 'SECOND')}\n          />\n        </div>\n        {guestInfo && (\n          <>\n            <div className=\"order-sheet__item\">\n              <label className=\"order-sheet__item-subject\">{t('password')}</label>\n              <TextField\n                ref={refs.passwordInputRef}\n                value={guestInfo.password}\n                onChange={(e) => handleNonMemberInfoChange(e, 'password')}\n                type=\"password\"\n                maxLength={20}\n                valid={'NO_SPACE'}\n              />\n              <ul className=\"order-sheet__alert-msg\">\n                <li>비회원 주문 조회 시 사용할 비밀번호를 영문/숫자/특수문자 조합하여 8~20자 이내로 입력해주세요.</li>\n              </ul>\n            </div>\n            <div className=\"order-sheet__item\">\n              <label className=\"order-sheet__item-subject\">{t('passwordForConfirmation')}</label>\n              <TextField\n                ref={refs.passwordForConfirmationInputRef}\n                value={guestInfo.passwordForConfirmation}\n                onChange={(e) => handleNonMemberInfoChange(e, 'passwordForConfirmation')}\n                type=\"password\"\n                maxLength={20}\n                valid={'NO_SPACE'}\n              />\n              <ul className=\"order-sheet__alert-msg\">\n                <li>비회원 주문확인 시 비밀번호 확인이 필요합니다.</li>\n              </ul>\n            </div>\n          </>\n        )}\n      </Accordion>\n    </section>\n  );\n};\n\nexport default OrdererInfoForm;\n\nOrdererInfoForm.displayName = 'OrdererInfoForm';\nOrdererInfoForm.propTypes = {\n  refs: object,\n};\n","import { useMemo } from 'react';\n\nimport { isEqual } from 'lodash-es';\nimport { object, shape } from 'prop-types';\n\nimport {\n  PayMethodBtn,\n  SelectBox,\n  TextField,\n  useOrderSheetActionContext,\n  useOrderSheetStateContext,\n} from '@shopby/react-components';\nimport { sortWithPriority } from '@shopby/shared';\nimport { PAY_TYPE_MAP } from '@shopby/shared/types';\n\nconst HIDDEN_PAY_TYPE = [\n  'NAVER_PAY', // 네이버페이 주문형\n];\n\nconst PAY_TYPES_WITH_PRIORITY = [\n  'PAYCO',\n  'NAVER_EASY_PAY',\n  'KAKAO_PAY',\n  'TOSS_PAY',\n  'CREDIT_CARD',\n  'REALTIME_ACCOUNT_TRANSFER',\n  'VIRTUAL_ACCOUNT',\n  'MOBILE',\n  'ESCROW_REALTIME_ACCOUNT_TRANSFER',\n  'ESCROW_VIRTUAL_ACCOUNT',\n  'ACCOUNT',\n];\n\nconst PayMethodSelector = ({ refs }) => {\n  const {\n    orderSheet,\n    selectedPayMethod,\n    availablePayMethods,\n    bankAccountToDeposit,\n    remitterName,\n    needsDepositBankForm,\n  } = useOrderSheetStateContext();\n  const { updateSelectedPayMethod, updateBankAccountToDeposit, updateRemitterName, resetBankAccountToDeposit } =\n    useOrderSheetActionContext();\n  const mallAccountOptionMap = useMemo(\n    () =>\n      orderSheet?.tradeBankAccountInfos.reduce((acc, accountInfo) => {\n        acc[`${accountInfo.bankName} ${accountInfo.bankAccount}`] = accountInfo;\n\n        return acc;\n      }, {}) ?? {},\n    [orderSheet]\n  );\n\n  const mallAccountSelectBoxOptions = useMemo(\n    () =>\n      Object.keys(mallAccountOptionMap).map((mallAccountOption) => ({\n        label: mallAccountOption,\n        value: mallAccountOption,\n      })),\n    [mallAccountOptionMap]\n  );\n\n  const selectedMallAccountSelectBoxValue = useMemo(() => {\n    const { bankAccount, bankCode, bankName } = bankAccountToDeposit;\n    if (!bankAccount || !bankCode) {\n      return '';\n    }\n\n    return `${bankName} ${bankAccount}`;\n  }, [bankAccountToDeposit]);\n\n  const payMethodsToBeExposed = sortWithPriority(availablePayMethods, PAY_TYPES_WITH_PRIORITY, 'payType').filter(\n    ({ payType }) => !HIDDEN_PAY_TYPE.includes(payType)\n  );\n\n  const handlePayMethodBtnClick = (payMethod) => {\n    resetBankAccountToDeposit();\n    updateRemitterName('');\n    updateSelectedPayMethod(payMethod);\n  };\n\n  const handleRemitterNameChange = ({ currentTarget: { value } }) => {\n    updateRemitterName(value);\n  };\n\n  const handleMallAccountSelect = ({ currentTarget: { value } }) => {\n    updateBankAccountToDeposit(mallAccountOptionMap[value]);\n  };\n\n  return (\n    <section className=\"l-panel order-sheet__pay-method\">\n      <p className=\"order-sheet__pay-method-title\">결제수단 선택</p>\n      <div className=\"order-sheet__pay-method-btns\">\n        {payMethodsToBeExposed.map((payMethod) => (\n          <PayMethodBtn\n            key={JSON.stringify(payMethod)}\n            payType={payMethod.payType}\n            label={PAY_TYPE_MAP[payMethod.payType]}\n            isChecked={isEqual(payMethod, selectedPayMethod)}\n            onClick={() => handlePayMethodBtnClick(payMethod)}\n          />\n        ))}\n      </div>\n      {needsDepositBankForm && (\n        <div className=\"order-sheet__account-input-wrap\">\n          <div className=\"order-sheet__item\">\n            <label className=\"order-sheet__item-subject\">입금자명</label>\n            <TextField\n              ref={refs.remitterNameInputRef}\n              value={remitterName}\n              valid=\"NO_SPECIAL\"\n              onChange={handleRemitterNameChange}\n              placeholder=\"입금하시는 분의 성함을 입력해주세요.\"\n              maxLength={10}\n            />\n          </div>\n          <div className=\"order-sheet__item\">\n            <label className=\"order-sheet__item-subject\">계좌번호</label>\n            <SelectBox\n              ref={refs.bankAccountSelectRef}\n              value={selectedMallAccountSelectBoxValue}\n              onSelect={handleMallAccountSelect}\n              options={mallAccountSelectBoxOptions}\n              hasEmptyOption={true}\n            />\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default PayMethodSelector;\n\nPayMethodSelector.propTypes = {\n  refs: shape({\n    bankAccountSelectRef: object,\n    remitterNameInputRef: object,\n  }),\n};\n","import { useMemo } from 'react';\n\nimport { useOrderSheetStateContext } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport PriceTag from '../../components/PriceTag';\n\nconst PaymentInfo = () => {\n  const {\n    orderSheet,\n    paymentInfo: {\n      paymentAmt,\n      totalStandardAmt,\n      productCouponAmt,\n      cartCouponAmt,\n      deliveryAmt,\n      usedAccumulationAmt,\n      remoteDeliveryAmt,\n      totalAdditionalDiscountAmt,\n      totalImmediateDiscountAmt,\n    },\n  } = useOrderSheetStateContext();\n  const totalDiscountAmt = productCouponAmt + cartCouponAmt + totalAdditionalDiscountAmt + totalImmediateDiscountAmt;\n  const totalDeliveryAmt = deliveryAmt + remoteDeliveryAmt;\n\n  const finalAmount = useMemo(\n    () => ({\n      name: '최종 결제금액',\n      amountLabel: convertToKoreanCurrency(paymentAmt),\n    }),\n    [paymentAmt]\n  );\n\n  const details = useMemo(\n    () => [\n      {\n        name: '상품금액 합계',\n        amountLabel: convertToKoreanCurrency(totalStandardAmt),\n      },\n      {\n        name: '할인금액 합계',\n        amountLabel: `- ${convertToKoreanCurrency(totalDiscountAmt)}`,\n      },\n      {\n        name: '적립금 사용 금액 합계',\n        amountLabel: `- ${convertToKoreanCurrency(usedAccumulationAmt)}`,\n      },\n      {\n        name: '배송비 합계',\n        amountLabel: `+ ${convertToKoreanCurrency(totalDeliveryAmt)}`,\n      },\n    ],\n    [totalDiscountAmt, totalDiscountAmt, usedAccumulationAmt, deliveryAmt, remoteDeliveryAmt]\n  );\n\n  const numberOfCOD = useMemo(\n    () =>\n      orderSheet?.deliveryGroups.reduce(\n        (acc, { deliveryPayType }) => (deliveryPayType === 'PAY_ON_DELIVERY' ? acc + 1 : acc),\n        0\n      ) ?? 0,\n    [orderSheet]\n  );\n\n  return (\n    <section className=\"l-panel order-sheet__payment-info\">\n      <PriceTag finalAmount={finalAmount} details={details} isUpsideDown={true}>\n        {numberOfCOD !== 0 && (\n          <dl className=\"order-sheet__number-of-COD\">\n            <dt>- 착불 배송</dt>\n            <dd>{numberOfCOD} 건</dd>\n          </dl>\n        )}\n      </PriceTag>\n    </section>\n  );\n};\n\nexport default PaymentInfo;\n","import { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  InputWithUnit,\n  Button,\n  useOrderSheetStateContext,\n  useOrderSheetActionContext,\n  useAuthActionContext,\n} from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport CouponModal from './CouponModal';\n\nconst PromotionController = () => {\n  const navigate = useNavigate();\n  const {\n    orderSheetNo,\n    accumulationInputValue,\n    paymentInfo: { availableMaxAccumulationAmt, accumulationAmt, cartCouponAmt, productCouponAmt },\n    selectedCoupon,\n  } = useOrderSheetStateContext();\n  const { updateAccumulationInputValue, updateSelectedCoupon } = useOrderSheetActionContext();\n  const { isSignedIn: checkIsSignedIn } = useAuthActionContext();\n  const isSignedIn = useMemo(() => checkIsSignedIn(), []);\n  const [isCouponModalOpen, setIsCouponModalOpen] = useState(false);\n  const allCouponAmt = useMemo(() => cartCouponAmt + productCouponAmt, [cartCouponAmt, productCouponAmt]);\n\n  const handleAccumulationInputChange = ({ currentTarget: { value } }) => {\n    let valueByNumber = Number(value);\n\n    if (valueByNumber > availableMaxAccumulationAmt) {\n      valueByNumber = availableMaxAccumulationAmt;\n    }\n\n    updateAccumulationInputValue(valueByNumber);\n  };\n\n  const handleUseAllAccumulationBtnClick = () => {\n    updateAccumulationInputValue(availableMaxAccumulationAmt);\n  };\n\n  const handleOpenCouponModalBtnClick = () => {\n    setIsCouponModalOpen(true);\n  };\n\n  const handleCouponModalCloseBtnClick = () => {\n    setIsCouponModalOpen(false);\n  };\n\n  const handleCouponModalApplyCouponBtnClick = (selectedCoupon) => {\n    setIsCouponModalOpen(false);\n    updateAccumulationInputValue(0);\n    updateSelectedCoupon(selectedCoupon);\n  };\n\n  const handleSignInBtnClick = () => {\n    navigate('/sign-in');\n  };\n\n  if (!isSignedIn)\n    return (\n      <section className=\"l-panel order-sheet__promotion\">\n        <p className=\"order-sheet__promotion-title\">\n          <span>혜택 적용</span>\n        </p>\n        <div className=\"order-sheet__promotion-items order-sheet__promotion-items--guest\">\n          <div>\n            <p>비회원으로 주문하실 경우 할인 쿠폰 사용이 불가능하며,</p>\n            <p>\n              <em>적립금 적립 및 혜택을 이용하실 수 없습니다.</em>\n            </p>\n          </div>\n          <Button className=\"order-sheet__sign-in-btn\" label=\"회원 로그인\" onClick={handleSignInBtnClick} />\n        </div>\n      </section>\n    );\n\n  return (\n    <section className=\"l-panel order-sheet__promotion\">\n      <p className=\"order-sheet__promotion-title\">혜택 적용</p>\n      <div className=\"order-sheet__promotion-items\">\n        <div className=\"order-sheet__item\">\n          <span className=\"order-sheet__item-subject\">쿠폰할인</span>\n          <p className=\"order-sheet__promotion-input\">\n            <InputWithUnit unitLabel=\"원\" value={allCouponAmt} valid=\"NUMBER\" showsComma={true} disabled />\n            <Button label=\"쿠폰 사용\" onClick={handleOpenCouponModalBtnClick} />\n            {isCouponModalOpen && (\n              <CouponModal\n                initialCoupon={selectedCoupon}\n                orderSheetNo={orderSheetNo}\n                onClose={handleCouponModalCloseBtnClick}\n                onApplyCouponBtnClick={handleCouponModalApplyCouponBtnClick}\n              />\n            )}\n          </p>\n        </div>\n        <div className=\"order-sheet__item\">\n          <label htmlFor=\"accumulation-input\" className=\"order-sheet__item-subject\">\n            적립금\n          </label>\n          <p className=\"order-sheet__promotion-input\">\n            <InputWithUnit\n              id=\"accumulation-input\"\n              unitLabel=\"원\"\n              onChange={handleAccumulationInputChange}\n              value={accumulationInputValue}\n              valid=\"NUMBER\"\n              showsComma={true}\n            />\n            <Button label=\"모두 사용\" onClick={handleUseAllAccumulationBtnClick} />\n          </p>\n        </div>\n        <div className=\"order-sheet__accumulation-amt\">\n          <p>보유 적립금: {convertToKoreanCurrency(accumulationAmt)}원</p>\n          <p>사용가능한 적립금: {convertToKoreanCurrency(availableMaxAccumulationAmt)}원</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PromotionController;\n","import { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { shape, object } from 'prop-types';\n\nimport {\n  Accordion,\n  Checkbox,\n  PhoneNumberInput,\n  SelectBox,\n  TextField,\n  useAuthActionContext,\n  useMyShippingAddressActionContext,\n  useMyShippingAddressStateContext,\n  useOrderSheetActionContext,\n  useOrderSheetStateContext,\n} from '@shopby/react-components';\nimport { parsePhoneNumber, ParameterTypeError } from '@shopby/shared';\n\nimport AddressForm from '../../components/AddressForm';\nimport { PHONE_CARRIER_NUMBERS_BY_STRING } from '../../constants/form';\n\nimport useDeliveryMemoOptions from './useDeliveryMemoOptions';\n\nconst ShippingAddressInfoForm = ({ refs: { receiverNameInputRef, addressFormRef, mobilePhoneNumberInputRef } }) => {\n  const { t } = useTranslation(['common', 'order']);\n  const { options: DELIVERY_MEMO_OPTIONS } = useDeliveryMemoOptions();\n  const [deliveryMemo, setDeliveryMemo] = useState('');\n  const [customDeliveryMemo, setCustomDeliveryMemo] = useState('');\n  const {\n    ordererInfo: { ordererName, phoneNumber: ordererPhoneNumber },\n    shippingAddressInfo: {\n      addressNo,\n      zipCode,\n      roadAddress,\n      receiverName,\n      mobilePhoneNumber,\n      phoneNumber,\n      customsIdNumber,\n      addressDetail,\n    },\n    willAddressBeSaved,\n    willBeSavedAsDefaultAddress,\n    hasInternationalShippingProduct,\n  } = useOrderSheetStateContext();\n\n  const {\n    updateShippingAddressInfo,\n    updateWillBeSavedAsDefaultAddress,\n    resetShippingAddressInfo,\n    updateWillAddressBeSaved,\n  } = useOrderSheetActionContext();\n\n  const { bookedAddresses } = useMyShippingAddressStateContext();\n  const { isSignedIn: checkIsSignedIn } = useAuthActionContext();\n  const { getShippingAddressByAddressNo } = useMyShippingAddressActionContext();\n  const [isReceiverRadioChecked, setIsReceiverRadioChecked] = useState(false);\n  const isSignedIn = useMemo(() => checkIsSignedIn(), []);\n\n  const addressOptions = useMemo(\n    () => [\n      {\n        label: '새로운 배송지',\n        value: '0',\n      },\n      ...bookedAddresses.map(({ addressNo, addressName, receiverName }) => ({\n        label: `${addressName ? `${addressName} | ` : ''}${receiverName}`,\n        value: addressNo,\n      })),\n    ],\n    [bookedAddresses]\n  );\n\n  const handleReceiverCheckboxChange = ({ currentTarget: { checked } }) => {\n    if (checked) {\n      updateShippingAddressInfo({\n        receiverName: ordererName,\n        mobilePhoneNumber: { ...ordererPhoneNumber },\n        addressNo: 0,\n      });\n    }\n\n    setIsReceiverRadioChecked(checked);\n  };\n\n  const handleAddressSelect = ({ currentTarget: { value } }) => {\n    resetShippingAddressInfo();\n    updateWillAddressBeSaved(false);\n    updateWillBeSavedAsDefaultAddress(false);\n\n    if (value === '0') return;\n    const {\n      addressNo,\n      addressName,\n      receiverName,\n      receiverContact1,\n      receiverContact2,\n      receiverZipCd: zipCode,\n      receiverDetailAddress: addressDetail,\n      receiverAddress: roadAddress,\n      receiverJibunAddress: jibunAddress,\n      countryCd,\n    } = getShippingAddressByAddressNo(Number(value));\n    const mobilePhoneNumber = receiverContact1 && parsePhoneNumber(receiverContact1);\n    const phoneNumber = receiverContact2 && parsePhoneNumber(receiverContact2);\n\n    updateShippingAddressInfo({\n      addressNo,\n      addressName,\n      receiverName,\n      zipCode,\n      roadAddress,\n      jibunAddress,\n      addressDetail,\n      countryCd,\n    });\n\n    if (mobilePhoneNumber) updateShippingAddressInfo({ mobilePhoneNumber });\n    if (phoneNumber) updateShippingAddressInfo({ phoneNumber });\n  };\n\n  const handleReceiverNameChange = ({ currentTarget: { value } }) => {\n    updateShippingAddressInfo({ addressNo: 0, receiverName: value });\n  };\n\n  const handlePhoneSerialNumberChange = ({ currentTarget: { value } }, type, isMobile = false) => {\n    if (!['FIRST', 'SECOND'].includes(type)) {\n      ParameterTypeError.of({ parameterName: 'type', functionName: handlePhoneSerialNumberChange.name });\n    }\n\n    const typeByLowerCase = type.toLowerCase();\n    updateShippingAddressInfo({\n      addressNo: 0,\n      [isMobile ? 'mobilePhoneNumber' : 'phoneNumber']: {\n        ...(isMobile ? mobilePhoneNumber : phoneNumber),\n        [`${typeByLowerCase}Serial`]: value,\n      },\n    });\n  };\n\n  const handleCarrierNumberSelect = ({ currentTarget: { value } }, isMobile = false) => {\n    updateShippingAddressInfo({\n      addressNo: 0,\n      [isMobile ? 'mobilePhoneNumber' : 'phoneNumber']: {\n        ...(isMobile ? mobilePhoneNumber : phoneNumber),\n        carrierNumber: value,\n      },\n    });\n  };\n\n  const handleDeliveryMemoSelect = ({ currentTarget: { value } }) => {\n    if (deliveryMemo === 'DIRECT_INPUT') {\n      setCustomDeliveryMemo('');\n    }\n\n    setDeliveryMemo(value);\n    updateShippingAddressInfo({ deliveryMemo: value });\n  };\n\n  const handleCustomDeliveryMemoChange = ({ currentTarget: { value } }) => {\n    if (deliveryMemo !== 'DIRECT_INPUT') return;\n\n    setCustomDeliveryMemo(value);\n    updateShippingAddressInfo({ deliveryMemo: value });\n  };\n\n  const handleSaveAsDefaultAddressBtnClick = ({ currentTarget: { checked } }) => {\n    updateWillBeSavedAsDefaultAddress(checked);\n    updateWillAddressBeSaved(checked);\n  };\n\n  const handleSaveAddressBtnClick = ({ currentTarget: { checked } }) => {\n    updateWillAddressBeSaved(checked);\n\n    if (willBeSavedAsDefaultAddress) {\n      updateWillBeSavedAsDefaultAddress(false);\n    }\n  };\n\n  const handleAddressItemClick = ({ zipCode, roadAddress, jibunAddress }) => {\n    updateShippingAddressInfo({\n      addressNo: 0,\n      zipCode,\n      roadAddress,\n      jibunAddress,\n    });\n  };\n\n  const handleAddressDetailChange = ({ addressDetail }) => {\n    updateShippingAddressInfo({\n      addressDetail,\n    });\n  };\n\n  const handleCustomsIdNumberChange = ({ currentTarget: { value } }) => {\n    updateShippingAddressInfo({ customsIdNumber: value });\n  };\n\n  return (\n    <section className=\"l-panel\">\n      <Accordion title={t('shippingAddressInfo', { ns: 'order' })} isOpen={true}>\n        <div className=\"order-sheet__item\">\n          <SelectBox value={addressNo} options={addressOptions} onSelect={handleAddressSelect} />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('receiverName', { ns: 'order' })}</label>\n          <TextField ref={receiverNameInputRef} value={receiverName} onChange={handleReceiverNameChange} />\n          <Checkbox\n            label={t('isTheSameAsOrderer', { ns: 'order' })}\n            onChange={handleReceiverCheckboxChange}\n            checked={isReceiverRadioChecked}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('address')}</label>\n          <AddressForm\n            ref={addressFormRef}\n            zipCode={zipCode}\n            address={roadAddress}\n            addressDetail={addressDetail}\n            onAddressDetailChange={handleAddressDetailChange}\n            onAddressItemClick={handleAddressItemClick}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('mobilePhoneNumber')}</label>\n          <PhoneNumberInput\n            ref={mobilePhoneNumberInputRef}\n            carrierNumber={mobilePhoneNumber?.carrierNumber}\n            firstSerial={mobilePhoneNumber?.firstSerial}\n            secondSerial={mobilePhoneNumber?.secondSerial}\n            onFirstSerialChange={(e) => handlePhoneSerialNumberChange(e, 'FIRST', true)}\n            onSecondSerialChange={(e) => handlePhoneSerialNumberChange(e, 'SECOND', true)}\n            onCarrierNumberSelect={(e) => handleCarrierNumberSelect(e, true)}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <label className=\"order-sheet__item-subject\">{t('phoneNumber')}</label>\n          <PhoneNumberInput\n            carrierNumbersByString={PHONE_CARRIER_NUMBERS_BY_STRING}\n            carrierNumber={phoneNumber?.carrierNumber}\n            firstSerial={phoneNumber?.firstSerial}\n            secondSerial={phoneNumber?.secondSerial}\n            onFirstSerialChange={(e) => handlePhoneSerialNumberChange(e, 'FIRST')}\n            onSecondSerialChange={(e) => handlePhoneSerialNumberChange(e, 'SECOND')}\n            onCarrierNumberSelect={handleCarrierNumberSelect}\n          />\n        </div>\n        <div className=\"order-sheet__item\">\n          <SelectBox value={deliveryMemo} options={DELIVERY_MEMO_OPTIONS} onSelect={handleDeliveryMemoSelect} />\n          {deliveryMemo === 'DIRECT_INPUT' && (\n            <TextField\n              className=\"order-sheet__custom-memo\"\n              value={customDeliveryMemo}\n              onChange={handleCustomDeliveryMemoChange}\n              maxLength={30}\n              placeholder={t('Please input your requests for delivery.', { ns: 'order' })}\n            />\n          )}\n        </div>\n        {hasInternationalShippingProduct && (\n          <div className=\"order-sheet__item\">\n            <label className=\"order-sheet__item-subject\" htmlFor=\"customs-id-input\">\n              개인통관고유부호\n            </label>\n            <TextField\n              id={'customs-id-input'}\n              value={customsIdNumber}\n              onChange={handleCustomsIdNumberChange}\n              maxLength={13}\n              valid=\"ENGLISH_NUMBER\"\n              placeholder=\"P로 시작하는 13자리\"\n            />\n            <span className=\"order-sheet__customs-id-issuance\">\n              개인통관고유부호 발급&nbsp;\n              <a\n                alt=\"link-for-customs-id-issuance\"\n                href=\"https://unipass.customs.go.kr/csp/persIndex.do\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                바로가기 &gt;\n              </a>\n            </span>\n          </div>\n        )}\n        {isSignedIn && (\n          <div className=\"order-sheet__item\">\n            <p>\n              <Checkbox\n                label={t('save as default shipping address', { ns: 'order' })}\n                onChange={handleSaveAsDefaultAddressBtnClick}\n                checked={willBeSavedAsDefaultAddress}\n              />\n            </p>\n            {addressNo === 0 && (\n              <p>\n                <Checkbox\n                  label={'배송지 관리 목록에 추가'}\n                  onChange={handleSaveAddressBtnClick}\n                  checked={willAddressBeSaved}\n                />\n              </p>\n            )}\n          </div>\n        )}\n      </Accordion>\n    </section>\n  );\n};\n\nShippingAddressInfoForm.propTypes = {\n  refs: shape({\n    receiverNameInputRef: object,\n    searchAddressBtnRef: object,\n    mobilePhoneNumberInputRef: object,\n    addressDetailInputRef: object,\n  }),\n};\n\nexport default ShippingAddressInfoForm;\n","import { useState } from 'react';\n\nimport { Button , Checkbox, useOrderSheetActionContext, useOrderSheetStateContext } from '@shopby/react-components';\n\nimport FullModal from '../../components/FullModal';\nimport Sanitized from '../../components/Sanitized/Sanitized';\n\nconst TermsChecker = () => {\n  const { termsStatus } = useOrderSheetStateContext();\n  const { updateTermsStatus } = useOrderSheetActionContext();\n  const [isTermContentsModalOpen, setIsTermContentsModalOpen] = useState(false);\n  const [clickedTerm, setClickedTerm] = useState(null);\n\n  const handleTermCheckboxClick = (e, termsType) => {\n    const isChecked = e.currentTarget.checked;\n\n    updateTermsStatus({\n      [termsType]: {\n        ...termsStatus[termsType],\n        isChecked,\n      },\n    });\n  };\n\n  const showDetailBtnClick = (title, contents) => {\n    setClickedTerm({ title, contents });\n    setIsTermContentsModalOpen(true);\n  };\n\n  const handleTermContentModalClose = () => {\n    setIsTermContentsModalOpen(false);\n  };\n\n  return (\n    <section className=\"l-page order-sheet__terms\">\n      {Object.entries(termsStatus).map(([termsType, { isChecked, isRequired, title, contents }]) => (\n        <div key={termsType} className=\"order-sheet__term-checker\">\n          <Checkbox\n            isRounded={true}\n            label={`[${isRequired ? '필수' : '선택'}] ${title}`}\n            checked={isChecked}\n            onClick={(e) => handleTermCheckboxClick(e, termsType)}\n          />\n          {contents && <Button label=\"보기\" onClick={() => showDetailBtnClick(title, contents)} />}\n        </div>\n      ))}\n      {Boolean(isTermContentsModalOpen && clickedTerm) && (\n        <FullModal title={clickedTerm.title} onClose={handleTermContentModalClose}>\n          <Sanitized html={clickedTerm.contents} style={{ padding: '20px' }} />\n        </FullModal>\n      )}\n    </section>\n  );\n};\n\nexport default TermsChecker;\n","import OrderSheet from './OrderSheet';\n\nexport default OrderSheet;\n","import { useTranslation } from 'react-i18next';\n\nconst useDeliveryMemoOptions = () => {\n  const { t } = useTranslation('order');\n\n  const deliveryMemos = [\n    t('Please deliver it quickly.'),\n    t('Please contact me before delivery.'),\n    t(\"If I'm out, please put it in front of the door.\"),\n    t(\"If I'm out, please call me on your cell phone\"),\n    t('Leave it to the security office, please.'),\n    t('Please put it in the delivery box.'),\n  ];\n\n  const options = [\n    { label: t('requests for delivery'), value: '' },\n    { label: t('direct input(up to 30 characters)'), value: 'DIRECT_INPUT' },\n    ...deliveryMemos.map((memo) => ({\n      label: memo,\n      value: memo,\n    })),\n  ];\n\n  return { options };\n};\n\nexport default useDeliveryMemoOptions;\n","import { useModalActionContext } from '@shopby/react-components';\nimport {\n  checkPassword,\n  POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS,\n  POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS,\n  REG_EX_FOR_CHECK_FORMAT,\n} from '@shopby/shared';\n\nconst INVALID_PASSWORD_MESSAGE_MAP = {\n  MUST_CONTAIN_THREE_TYPES_IN_LENGTH_LESS_THAN_10:\n    '비밀번호는 영문, 숫자, 특수문자를 3종류 모두 조합하여 8~20자로 입력해주세요.',\n  MUST_CONTAIN_TWO_TYPES_IN_LENGTH_MORE_THAN_10:\n    '비밀번호는 영문, 숫자, 특수문자를 2종류 이상 조합하여 10~20자로 입력해주세요.',\n  LENGTH_IS_INVALID: '비밀번호는 영문, 숫자, 특수문자를 3종류 모두 조합하여 8~20자로 입력해주세요.',\n  INVALID_SPECIAL: '비밀번호 특수문자는 !@#$%^&*+=-_.()만 사용 가능합니다.',\n};\n\nconst useValidateFormMaker = (ref) => {\n  const { openAlert } = useModalActionContext();\n\n  const {\n    ordererInfoFormRef: {\n      ordererNameInputRef,\n      emailInputRef,\n      phoneNumberInputRef,\n      passwordInputRef,\n      passwordForConfirmationInputRef,\n    },\n    shippingAddressInfoFormRef: {\n      receiverNameInputRef,\n      addressFormRef,\n      mobilePhoneNumberInputRef: receiverMobilePhoneNumberInputRef,\n    },\n    depositBankFormRef: { bankAccountSelectRef, remitterNameInputRef },\n  } = ref;\n\n  const validateForm = ({\n    ordererInfo: { ordererName, emailId, emailDomain, phoneNumber: ordererMobilePhoneNumber, guestInfo },\n    shippingAddressInfo: {\n      receiverName,\n      zipCode,\n      roadAddress,\n      mobilePhoneNumber: receiverMobilePhoneNumber,\n      addressDetail,\n    },\n    needsDepositBankForm,\n    bankAccountToDeposit,\n    remitterName,\n    termsStatus,\n  }) => {\n    const ordererInfoValidation = {\n      isOrdererNameEmpty: () => {\n        if (ordererName) return false;\n\n        openAlert({\n          message: '주문자 명을 입력해주세요.',\n          onClose: () => {\n            ordererNameInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isEmailIdEmpty: () => {\n        if (emailId) return false;\n\n        openAlert({\n          message: '이메일 아이디를 입력해주세요.',\n          onClose: () => {\n            emailInputRef?.current?.focusId();\n          },\n        });\n\n        return true;\n      },\n      isEmailDomainEmpty: () => {\n        if (emailDomain) return false;\n\n        openAlert({\n          message: '이메일 도메인을 입력해주세요.',\n          onClose: () => {\n            emailInputRef?.current?.focusDomain();\n          },\n        });\n\n        return true;\n      },\n      isEmailInvalid: () => {\n        const email = `${emailId}@${emailDomain}`;\n\n        if (email.match(REG_EX_FOR_CHECK_FORMAT.EMAIL)) return false;\n\n        openAlert({\n          message: '올바른 형식의 이메일을 입력해주세요.',\n          onClose: () => {\n            emailInputRef?.current?.focusDomain();\n          },\n        });\n\n        return true;\n      },\n      isPhoneCarrierNumberEmpty: () => {\n        if (ordererMobilePhoneNumber.carrierNumber) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            phoneNumberInputRef?.current?.focusCarrierNumber();\n          },\n        });\n\n        return true;\n      },\n      isPhoneNumberFirstSerialInvalid: () => {\n        if (POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS.includes(ordererMobilePhoneNumber.firstSerial.length)) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            phoneNumberInputRef?.current?.focusFirstSerial();\n          },\n        });\n\n        return true;\n      },\n      isPhoneNumberSecondSerialInvalid: () => {\n        if (POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS.includes(ordererMobilePhoneNumber.secondSerial.length)) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            phoneNumberInputRef?.current?.focusSecondSerial();\n          },\n        });\n\n        return true;\n      },\n      isPasswordEmpty: () => {\n        if (!guestInfo || guestInfo.password) return false;\n\n        openAlert({\n          message: '구매 비밀번호를 입력해주세요.',\n          onClose: () => {\n            passwordInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isPasswordInvalid: () => {\n        if (!guestInfo) return false;\n\n        const { password } = guestInfo;\n        const { isValid, message } = checkPassword(password);\n\n        if (isValid) return false;\n\n        openAlert({\n          message: INVALID_PASSWORD_MESSAGE_MAP[message],\n          onClose: () => {\n            passwordInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isPasswordForConfirmationEmpty: () => {\n        if (!guestInfo || guestInfo.passwordForConfirmation) return false;\n\n        openAlert({\n          message: '구매 비밀번호 확인을 입력해주세요.',\n          onClose: () => {\n            passwordForConfirmationInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isFailedToConfirmPassword: () => {\n        if (!guestInfo || guestInfo.password === guestInfo.passwordForConfirmation) return false;\n\n        openAlert({\n          message: '구매 비밀번호 확인에 실패하였습니다. 비밀번호 확인 입력값을 확인해주세요.',\n          onClose: () => {\n            passwordForConfirmationInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n    };\n\n    const shippingAddressInfoValidation = {\n      isReceiverNameEmpty: () => {\n        if (receiverName) return false;\n\n        openAlert({\n          message: '받는 사람을 입력해주세요.',\n          onClose: () => {\n            receiverNameInputRef?.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isReceiverAddressEmpty: () => {\n        if (zipCode && roadAddress) return false;\n\n        openAlert({\n          message: '배송지 주소를 입력해주세요.',\n          onClose: () => {\n            addressFormRef.current?.focusSearchButton();\n          },\n        });\n\n        return true;\n      },\n      isAddressDetailEmpty: () => {\n        if (addressDetail) return false;\n\n        openAlert({\n          message: '상세 주소를 입력해주세요.',\n          onClose: () => {\n            addressFormRef.current?.focusDetailAddressInput();\n          },\n        });\n\n        return true;\n      },\n      isReceiverPhoneCarrierNumberEmpty: () => {\n        if (receiverMobilePhoneNumber.carrierNumber) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            receiverMobilePhoneNumberInputRef?.current?.focusCarrierNumber();\n          },\n        });\n\n        return true;\n      },\n      isReceiverMobilePhoneNumberFirstSerialInvalid: () => {\n        if (POSSIBLE_PHONE_FIRST_SERIAL_LENGTHS.includes(receiverMobilePhoneNumber.firstSerial.length)) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            receiverMobilePhoneNumberInputRef?.current?.focusFirstSerial();\n          },\n        });\n\n        return true;\n      },\n      isReceiverMobilePhoneNumberSecondSerialInvalid: () => {\n        if (POSSIBLE_PHONE_SECOND_SERIAL_LENGTHS.includes(receiverMobilePhoneNumber.secondSerial.length)) return false;\n\n        openAlert({\n          message: '올바른 형식의 휴대폰 번호를 입력해주세요.',\n          onClose: () => {\n            receiverMobilePhoneNumberInputRef?.current?.focusSecondSerial();\n          },\n        });\n\n        return true;\n      },\n    };\n\n    const depositBankFormValidation = {\n      isBankAccountToDepositNotSelected: () => {\n        if (!needsDepositBankForm || (bankAccountToDeposit?.bankAccount && bankAccountToDeposit?.bankCode))\n          return false;\n\n        openAlert({\n          message: '입금할 계좌를 선택해주세요.',\n          onClose: () => {\n            bankAccountSelectRef.current?.focus();\n          },\n        });\n\n        return true;\n      },\n      isRemitterNameEmpty: () => {\n        if (!needsDepositBankForm || remitterName) return false;\n\n        openAlert({\n          message: '입금자명을 입력해주세요.',\n          onClose: () => {\n            remitterNameInputRef.current?.focus();\n          },\n        });\n\n        return true;\n      },\n    };\n\n    const termsStatusValidation = {\n      isSomeRequiredTermNotChecked: () => {\n        const requiredTermsStatusValues = Object.values(termsStatus).filter(({ isRequired }) => isRequired);\n        if (requiredTermsStatusValues.every(({ isChecked }) => isChecked)) return false;\n\n        openAlert({\n          message: '약관 동의 필수 항목에 체크하여야 결제를 진행할 수 있습니다.',\n        });\n\n        return true;\n      },\n    };\n\n    const validations = [\n      ...Object.values(ordererInfoValidation),\n      ...Object.values(shippingAddressInfoValidation),\n      ...Object.values(depositBankFormValidation),\n      ...Object.values(termsStatusValidation),\n    ];\n\n    return validations.every((validation) => !validation());\n  };\n\n  return {\n    validateForm,\n  };\n};\n\nexport default useValidateFormMaker;\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n"],"names":[],"sourceRoot":""}