{"version":3,"file":"src_pages_MyPage_Coupon_index_js.9601cc0c761ac64f230c.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;ACFA;;;;;;;;;;;;;;;;ACAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AADA;AAEA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;AC/MA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AAGA;AAAA;AAEA;AAAA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1FA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7CA;AAEA;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AClBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/constants/common.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/MyPage/Coupon/Coupon.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Coupon/CouponItem.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Coupon/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/CouponRegistration/CouponRegistration.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/CouponRegistration/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/TotalCount.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/index.js"],"sourcesContent":["import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","export const INFINITY_SCROLL_PAGE_SIZE = 6;\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useState, useEffect, forwardRef, useImperativeHandle, useRef } from 'react';\n\nimport { bool, number, func } from 'prop-types';\n\nimport {\n  Button,\n  CouponProvider,\n  VisibleComponent,\n  useCouponActionContext,\n  useModalActionContext,\n  useInfiniteScroll,\n  useCouponStateContext,\n  InfiniteScrollLoader,\n  TabsProvider,\n  useTabsStateContext,\n  Tabs,\n} from '@shopby/react-components';\n\nimport ListSkeleton from '../../../components/ListSkeleton/ListSkeleton';\nimport TitleModal from '../../../components/TitleModal';\nimport { INFINITY_SCROLL_PAGE_SIZE } from '../../../constants/common';\nimport useLayoutChanger from '../../../hooks/useLayoutChanger';\nimport CouponRegistration from '../CouponRegistration';\nimport TotalCount from '../TotalCount';\n\nimport CouponItem from './CouponItem';\n\nconst Coupons = forwardRef(({ canUse, totalCount }, ref) => {\n  const { fetchCoupons } = useCouponActionContext();\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (requestOption) => {\n      const { data } = await fetchCoupons(requestOption);\n\n      return data.items;\n    },\n    requestOption: {\n      pageNumber: 1,\n      pageSize: INFINITY_SCROLL_PAGE_SIZE,\n      canUse,\n      sortDirection: 'DESC',\n    },\n  });\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount,\n    });\n  };\n\n  useEffect(() => {\n    fetchInitialItems({\n      requestOption: {\n        canUse,\n      },\n    });\n  }, [canUse]);\n\n  useImperativeHandle(ref, () => ({\n    fetchCoupons: fetchInitialItems,\n  }));\n\n  if (totalCount === 0) {\n    return <EmptyCoupon />;\n  }\n\n  return (\n    <>\n      <ul className=\"my-page-coupon__list\">\n        {accumulativeItems.map((item) => (\n          <CouponItem key={item.couponIssueNo} coupon={item} unissuable={!canUse} />\n        ))}\n      </ul>\n      <VisibleComponent\n        shows={accumulativeItems.length > 0}\n        TruthyComponent={<InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />}\n      />\n      <ListSkeleton isLoading={isLoading} />\n    </>\n  );\n});\n\nCoupons.displayName = 'Coupons';\n\nCoupons.propTypes = {\n  canUse: bool,\n  totalCount: number,\n  onTotalCountChange: func,\n};\n\nconst EmptyCoupon = () => (\n  <div className=\"empty-list\">\n    <p>보유한 쿠폰이 없습니다.</p>\n  </div>\n);\n\nconst CouponContent = () => {\n  const issuableCouponRef = useRef();\n\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n\n  const { openAlert } = useModalActionContext();\n  const { fetchProfileCouponSummary } = useCouponActionContext();\n\n  const {\n    profileCouponSummary: { usableCouponCnt },\n  } = useCouponStateContext();\n  const { currentTab } = useTabsStateContext();\n  const {\n    coupon: { totalCount },\n  } = useCouponStateContext();\n  const isIssuable = currentTab === 'ISSUABLE';\n\n  const handleRegistrationButtonClick = () => {\n    setIsRegistrationModalOpen(true);\n  };\n\n  useEffect(() => {\n    fetchProfileCouponSummary();\n  }, []);\n\n  return (\n    <>\n      <div className=\"my-page-coupon__wrap\">\n        <VisibleComponent\n          shows={isIssuable}\n          TruthyComponent={\n            <>\n              <TotalCount title=\"사용가능 쿠폰 수\" count={usableCouponCnt} />\n              <Button\n                className=\"my-page-coupon__registration-button\"\n                theme=\"dark\"\n                label=\"쿠폰 번호 등록\"\n                onClick={handleRegistrationButtonClick}\n              />\n            </>\n          }\n        />\n        <p className=\"my-page-coupon__list-title\">보유 쿠폰 리스트</p>\n        <Coupons ref={issuableCouponRef} canUse={isIssuable} totalCount={totalCount} />\n      </div>\n\n      <VisibleComponent\n        shows={isRegistrationModalOpen}\n        TruthyComponent={\n          <TitleModal\n            className=\"coupon-registration-modal\"\n            title=\"쿠폰 번호 입력\"\n            onClose={() => setIsRegistrationModalOpen(false)}\n          >\n            <CouponRegistration\n              onCancel={() => setIsRegistrationModalOpen(false)}\n              onRegister={async () => {\n                await openAlert({\n                  message: '쿠폰이 등록됐습니다.',\n                  onClose: async () => {\n                    await fetchProfileCouponSummary();\n                    await issuableCouponRef.current.fetchCoupons();\n                    await setIsRegistrationModalOpen(false);\n                  },\n                });\n              }}\n            />\n          </TitleModal>\n        }\n      />\n    </>\n  );\n};\n\nconst DEFAULT_TABS = [\n  {\n    value: 'ISSUABLE',\n    label: '사용 가능 쿠폰',\n  },\n  {\n    value: 'UNISSUABLE',\n    label: '사용 불가 쿠폰',\n  },\n];\n\nconst Coupon = () => {\n  useLayoutChanger({\n    title: '쿠폰',\n    hasBackBtnOnHeader: true,\n    hasCartBtnOnHeader: true,\n    hasBottomNav: true,\n  });\n\n  return (\n    <CouponProvider>\n      <TabsProvider\n        initialState={{\n          currentTab: 'ISSUABLE',\n          tabs: DEFAULT_TABS,\n        }}\n      >\n        <div className=\"my-page-coupon\">\n          <Tabs className=\"my-page-coupon__tabs\" />\n          <CouponContent />\n        </div>\n      </TabsProvider>\n    </CouponProvider>\n  );\n};\n\nexport default Coupon;\n","import { object, bool, shape, string, number, oneOf } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst COUPON_TYPE_LABEL = {\n  PRODUCT: '상품',\n  CART: '주문',\n  CART_DELIVERY: '장바구니 배송비',\n};\n\n// 쿠폰 할인 정보\nconst getDiscountInfo = (coupon) => {\n  const limitSalePrice = coupon.minSalePrice;\n\n  if (coupon.discountRate) {\n    return {\n      amount: coupon.discountRate,\n      unit: '%',\n      maxAmount: coupon.maxDiscountAmt,\n      limitSalePrice,\n    };\n  }\n\n  return {\n    amount: convertToKoreanCurrency(coupon.discountAmt),\n    unit: '원',\n    maxAmount: 0,\n    limitSalePrice,\n  };\n};\n\nconst CouponItem = ({ coupon, unissuable, customElement = <></> }) => {\n  const { amount, unit, maxAmount, limitSalePrice } = getDiscountInfo(coupon);\n  const couponTypeLabel = COUPON_TYPE_LABEL[coupon.couponType];\n  const issueDate = coupon.issueYmdt?.slice(0, 10);\n  const expireDate = coupon.expireYmdt?.slice(0, 10);\n\n  return (\n    <li className={`my-page-coupon__list-item my-page-coupon__list-item--${unissuable ? 'unissuable' : 'issuable'}`}>\n      <div className=\"my-page-coupon__box\">\n        <div className=\"my-page-coupon__box--left\">\n          <p className=\"my-page-coupon__discounted-price\">\n            {convertToKoreanCurrency(amount)}\n            <span className=\"my-page-coupon__unit\">{unit}</span>\n            <span className=\"my-page-coupon__discount-label\">{couponTypeLabel} 할인</span>\n          </p>\n          <div className=\"my-page-coupon__content\">\n            <p className=\"my-page-coupon__name\">{coupon.couponName}</p>\n            <VisibleComponent\n              shows={maxAmount > 0}\n              TruthyComponent={\n                <p className=\"my-page-coupon__max-amount\">최대 {convertToKoreanCurrency(maxAmount)} 원 할인</p>\n              }\n            />\n            <VisibleComponent\n              shows={limitSalePrice > 0}\n              TruthyComponent={\n                <p className=\"my-page-coupon__limit-sale-price\">\n                  {convertToKoreanCurrency(limitSalePrice)} 원 이상 구매 시 사용가능\n                </p>\n              }\n            />\n          </div>\n          <p className=\"my-page-coupon__date\">{issueDate ? `${issueDate} ~ ${expireDate}` : `${expireDate}`}</p>\n        </div>\n        <div className=\"my-page-coupon__box--right\">\n          <p>COUPON</p>\n        </div>\n        {customElement}\n      </div>\n    </li>\n  );\n};\n\nexport default CouponItem;\n\nCouponItem.propTypes = {\n  coupon: shape({\n    couponName: string,\n  }),\n  unissuable: bool,\n  discountRate: number,\n  discountAmt: number,\n  issueYmdt: string,\n  expireYmdt: string,\n  maxDiscountAmt: number,\n  minSalePrice: number,\n  couponType: oneOf(['PRODUCT', 'CART', 'CART_DELIVERY']),\n  customElement: object,\n};\n","import Coupon from './Coupon';\n\nexport default Coupon;\n","import { useState } from 'react';\n\nimport { func } from 'prop-types';\n\nimport { Button, CouponIssuanceByCodeButton, TextField } from '@shopby/react-components';\n\nconst CouponRegistration = ({ onCancel, onRegister, onChange }) => {\n  const [code, setCode] = useState('');\n\n  const handleCodeChange = (event) => {\n    setCode(event.currentTarget.value?.trim());\n\n    onChange?.(event);\n  };\n\n  const handleCancel = () => {\n    setCode('');\n\n    onCancel?.();\n  };\n\n  const handleRegister = () => {\n    setCode('');\n\n    onRegister?.();\n  };\n\n  return (\n    <div className=\"my-page-coupon-registration\">\n      <div className=\"my-page-coupon-registration__title\">발급 받으신 쿠폰 인증 번호를 아래에 입력해주세요.</div>\n      <TextField value={code} onChange={handleCodeChange} placeholder=\"쿠폰 번호를 입력하세요.\" />\n      <div className=\"my-page-coupon-registration__buttons\">\n        <Button theme=\"dark\" label=\"취소\" onClick={handleCancel} />\n        <CouponIssuanceByCodeButton onClick={handleRegister} code={code} />\n      </div>\n    </div>\n  );\n};\n\nexport default CouponRegistration;\n\nCouponRegistration.propTypes = {\n  onCancel: func,\n  onRegister: func,\n  onChange: func,\n};\n","import CouponRegistration from './CouponRegistration';\n\nexport default CouponRegistration;\n","import { string, number } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCount = ({ title, count }) => (\n  <p className=\"my-page__total-count\">\n    {title}\n    <span className=\"my-page__count\">\n      <span>{convertToKoreanCurrency(count)}</span> 건\n    </span>\n  </p>\n);\n\nTotalCount.propTypes = {\n  title: string,\n  count: number,\n};\n\nexport default TotalCount;\n","import TotalCount from './TotalCount';\n\nexport default TotalCount;\n"],"names":[],"sourceRoot":""}