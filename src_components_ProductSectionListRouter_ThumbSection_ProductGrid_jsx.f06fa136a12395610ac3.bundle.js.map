{"version":3,"file":"src_components_ProductSectionListRouter_ThumbSection_ProductGrid_jsx.f06fa136a12395610ac3.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAEA;AAYA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAtCA;AAAA;AAAA;AAwCA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxLA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjCA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChCA;AACA","sources":["webpack://@shopby/react-skin/./src/components/ProductSectionListRouter/ThumbSection/ProductGrid.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbBadge/ProductThumbBadge.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbBadge/index.js","webpack://@shopby/react-skin/./src/components/ProductThumbInfo/ProductThumbInfo.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbInfo/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { bool, number, object, string, oneOf, array } from 'prop-types';\n\nimport {\n  IconSVG,\n  ThumbItem,\n  ThumbList,\n  LikeBtn,\n  OptionProvider,\n  useOptionActionContext,\n  useModalActionContext,\n  CartProvider,\n  ProductOptionProvider,\n  useCartActionContext,\n} from '@shopby/react-components';\nimport { calculateDiscountedPrice, THUMB_LIST_TYPE } from '@shopby/shared';\n\nimport { useErrorBoundaryActionContext } from '../../ErrorBoundary';\nimport ProductThumbBadge from '../../ProductThumbBadge';\nimport ProductThumbInfo from '../../ProductThumbInfo';\n\nconst LikeAddCart = ({ productNo, productName, isSoldOut, liked }) => {\n  const { fetchProductOption } = useOptionActionContext();\n  const { addCart } = useCartActionContext();\n  const { openConfirm, openAlert } = useModalActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const navigate = useNavigate();\n  const [isActive, setIsActive] = useState(false);\n\n  const handleCartBtnClick = async () => {\n    try {\n      const {\n        data: { type, flatOptions },\n      } = await fetchProductOption({ productNo });\n\n      if (type !== 'DEFAULT') {\n        openAlert({\n          label: '확인',\n          message: (\n            <>\n              이 상품은 옵션이 있는 상품입니다. <br /> 상품상세에서 옵션을 선택 후 <br /> 장바구니에 담아주세요\n            </>\n          ),\n          onClose: () => navigate(`/product-detail?productNo=${productNo}`),\n        });\n\n        return;\n      }\n\n      await addCart([\n        {\n          orderCnt: 1,\n          channelType: null,\n          optionInputs: [],\n          optionNo: flatOptions[0].optionNo,\n          productNo,\n        },\n      ]);\n      // TODO: ProductOption에서 전달하는 방법 확인 후 수정 하기\n      openConfirm({\n        message: '장바구니에 담았습니다.',\n        onConfirm: () => navigate('/cart'),\n        confirmLabel: '장바구니 가기',\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    setIsActive(liked);\n  }, [liked]);\n\n  return (\n    <>\n      <LikeBtn\n        className=\"thumb-fab thumb-fab--like\"\n        productNo={Number(productNo)}\n        isActive={isActive}\n        onClick={(data) => {\n          setIsActive(data.isActive);\n        }}\n      >\n        <span className=\"a11y\">\n          {productName} {!isActive ? '좋아요' : '좋아요 취소하기'}\n        </span>\n        <IconSVG fill={isActive ? '#f92626' : '#fff'} strokeWidth={0} size={40} name=\"fill-heart\" />\n      </LikeBtn>\n\n      <button\n        type=\"button\"\n        disabled={isSoldOut}\n        className=\"thumb-fab thumb-fab--cart sc-cart-button\"\n        onClick={handleCartBtnClick}\n      >\n        <span className=\"a11y\">{productName} 장바구니 담기</span>\n        <IconSVG size={40} name=\"shopping-bag\" />\n      </button>\n    </>\n  );\n};\n\nconst ProductGrid = ({ className, style, displayType, products }) => (\n  <ThumbList style={style} displayType={displayType} className={className}>\n    {products.map(\n      ({\n        productNo,\n        adult,\n        listImageUrls,\n        isSoldOut,\n        saleStatusType,\n        salePrice,\n        promotionText,\n        productName,\n        immediateDiscountAmt,\n        additionalDiscountAmt,\n        frontDisplayYn,\n        liked,\n      }) =>\n        frontDisplayYn && (\n          <ThumbItem\n            key={productNo}\n            resize=\"220x220\"\n            className={className}\n            href={`/product-detail?productNo=${productNo}`}\n            src={listImageUrls[0]}\n            adult={adult}\n            alt={productName}\n            HoverViewComponent={\n              <ProductOptionProvider>\n                <CartProvider>\n                  <OptionProvider>\n                    {displayType === THUMB_LIST_TYPE.CART && (\n                      <LikeAddCart\n                        productNo={Number(productNo)}\n                        productName={productName}\n                        isSoldOut={isSoldOut}\n                        liked={liked}\n                      />\n                    )}\n                  </OptionProvider>\n                </CartProvider>\n              </ProductOptionProvider>\n            }\n          >\n            <ProductThumbBadge isSoldOut={isSoldOut} saleStatusType={saleStatusType} />\n            {displayType === THUMB_LIST_TYPE.SIMPLE_IMAGE ? (\n              <a href={`/product-detail?productNo=${productNo}`}>\n                <ProductThumbInfo\n                  promotionText={promotionText}\n                  productName={productName}\n                  salePrice={calculateDiscountedPrice({ salePrice, immediateDiscountAmt, additionalDiscountAmt })}\n                />\n              </a>\n            ) : (\n              <ProductThumbInfo\n                promotionText={promotionText}\n                productName={productName}\n                salePrice={calculateDiscountedPrice({ salePrice, immediateDiscountAmt, additionalDiscountAmt })}\n              />\n            )}\n          </ThumbItem>\n        )\n    )}\n  </ThumbList>\n);\n\nexport default ProductGrid;\n\nProductGrid.propTypes = {\n  style: object,\n  className: string,\n  products: array,\n  displayType: oneOf(['SWIPE', 'GALLERY', 'LIST', 'PRODUCT_MOVE', 'SIMPLE_IMAGE', 'CART']),\n};\n\nLikeAddCart.propTypes = {\n  productNo: number,\n  isSoldOut: bool,\n  liked: bool,\n  productName: string,\n};\n","import { useMemo } from 'react';\n\nimport { oneOf, bool } from 'prop-types';\n\nimport { Badge } from '@shopby/react-components';\nimport { PURCHASE_OPTION_SALE_LABEL, SALE_STATUS_TYPE } from '@shopby/shared';\n\nconst ProductThumbBadge = ({ saleStatusType, isSoldOut }) => {\n  const badgeColorType = useMemo(() => (saleStatusType === 'FINISHED' ? 'primary' : 'caution'), []);\n\n  if (saleStatusType === 'ONSALE' && !isSoldOut) return <></>;\n\n  return (\n    <span className=\"thumb-item-badges\">\n      {(saleStatusType === 'FINISHED' || saleStatusType === 'READY') && (\n        <Badge\n          className=\"product-card__badge product-card__badge-sale-status\"\n          colorType={badgeColorType}\n          label={SALE_STATUS_TYPE[saleStatusType]}\n        />\n      )}\n      {isSoldOut && (\n        <Badge label={PURCHASE_OPTION_SALE_LABEL.SOLD_OUT} colorType=\"primary\" className=\"product-card__badge\" />\n      )}\n    </span>\n  );\n};\n\nexport default ProductThumbBadge;\n\nProductThumbBadge.propTypes = {\n  saleStatusType: oneOf(['READY', 'ONSALE', 'FINISHED', 'STOP', 'PROHIBITION']),\n  isSoldOut: bool,\n};\n","import ProductThumbBadge from './ProductThumbBadge';\nexport default ProductThumbBadge;\n","import { useTranslation } from 'react-i18next';\n\nimport { number, string } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\n// ===========================\n// 상품 아이템 정보\n// ===========================\nconst ProductThumbInfo = ({ promotionText, productName, salePrice }) => {\n  const { t } = useTranslation('unit');\n  return (\n    <>\n      <p className=\"product-thumb-title\">\n        {promotionText} {productName}\n      </p>\n      <p className=\"product-thumb-price-info\">\n        <span>\n          <em className=\"product-thumb-price\">{convertToKoreanCurrency(salePrice)}</em>\n          <span className=\"product-thumb-unit\">{t('WON')}</span>\n        </span>\n      </p>\n    </>\n  );\n};\n\nexport default ProductThumbInfo;\n\nProductThumbInfo.propTypes = {\n  promotionText: string,\n  productName: string,\n  salePrice: number,\n};\n","import ProductThumbInfo from './ProductThumbInfo';\nexport default ProductThumbInfo;\n"],"names":[],"sourceRoot":""}