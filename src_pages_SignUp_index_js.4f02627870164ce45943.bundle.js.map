{"version":3,"file":"src_pages_SignUp_index_js.4f02627870164ce45943.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACxDA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACxBA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAqBA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;ACxCA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AADA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAjBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AALA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKA;AAEA;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAHA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AAEA;AAYA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AALA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;ACvKA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAKA;AAAA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9FA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACnCA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjBA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/Sanitized.jsx","webpack://@shopby/react-skin/./src/components/Sanitized/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/constants/form.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/SignUp/SignUp.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/SignUpButton.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/SignUpEmailForm.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/SignUpForm.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/SignUpSmsForm.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/TermsForm.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/TermsModal.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/ValidationStatus.jsx","webpack://@shopby/react-skin/./src/pages/SignUp/index.js"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { string, object } from 'prop-types';\n\nconst { sanitize } = require('dompurify');\n\nconst Sanitized = ({ html, style, className = '' }) => (\n  <div\n    className={`editor ${className}`}\n    dangerouslySetInnerHTML={{\n      __html: sanitize(html ?? '', {\n        USE_PROFILES: { html: true },\n        ADD_TAGS: ['iframe', 'a'],\n        ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'scrolling', 'target', 'rel', 'type'],\n      }),\n    }}\n    style={style}\n  />\n);\n\nSanitized.propTypes = {\n  className: string,\n  style: object,\n  html: string,\n};\n\nexport default Sanitized;\n","import Sanitized from './Sanitized';\n\nexport default Sanitized;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { BANK_MAP, DELIVERY_COMPANY_TYPE_MAP, RETURN_WAY_TYPE_MAP } from '@shopby/shared';\n\nexport const EMAIL_DOMAINS = ['naver.com', 'hanmail.net', 'daum.net', 'nate.com', 'gmail.com'];\nexport const EMAIL_DOMAIN_OPTIONS = EMAIL_DOMAINS.map((domain) => ({ value: domain, label: domain }));\n\nexport const PHONE_CARRIER_NUMBERS_BY_STRING = [\n  '02',\n  '031',\n  '032',\n  '033',\n  '041',\n  '042',\n  '043',\n  '044',\n  '051',\n  '052',\n  '053',\n  '054',\n  '055',\n  '061',\n  '062',\n  '063',\n  '064',\n  '070',\n];\n\nexport const PHONE_NUMBER_INPUT_SECTIONS = ['carrierNumber', 'firstSerial', 'secondSerial'];\n\nexport const NAME_INPUT_MAX_LENGTH = 15;\nexport const INVOICE_NO_MAX_LENGTH = 20;\nexport const DELIVERY_MEMO_MAX_LENGTH = 20;\nexport const CLAIM_REASON_DETAIL_MAX_LENGTH = 300;\n\nexport const RETURN_WAY_OPTIONS = Object.entries(RETURN_WAY_TYPE_MAP).map(([value, label]) => ({ label, value }));\nexport const DELIVERY_COMPANY_OPTIONS = Object.entries(DELIVERY_COMPANY_TYPE_MAP).map(([value, label]) => ({\n  label,\n  value,\n}));\nexport const BANK_OPTIONS = Object.entries(BANK_MAP)\n  .map(([value, label]) => ({ label, value }))\n  .filter(({ value }) => value !== 'ANONYMOUS');\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SignUpProvider, IdentificationVerificationProvider, AgeVerificationProvider } from '@shopby/react-components';\n\nimport useLayoutChanger from '../../hooks/useLayoutChanger';\n\nimport SignUpButton from './SignUpButton';\nimport SignUpForm from './SignUpForm';\nimport TermsForm from './TermsForm';\nimport TermsModal from './TermsModal';\n\nconst SignUp = () => {\n  const { t } = useTranslation('title');\n  useLayoutChanger({\n    hasBackBtnOnHeader: true,\n    title: t('signUp'),\n  });\n\n  const [isTermsFullModalOpen, setIsTermsFullModalOpen] = useState(false);\n\n  return (\n    <SignUpProvider>\n      <AgeVerificationProvider>\n        <IdentificationVerificationProvider>\n          <div className=\"sign-up-form\">\n            <SignUpForm />\n            <TermsForm setIsTermsFullModalOpen={() => setIsTermsFullModalOpen(true)} />\n            <SignUpButton />\n          </div>\n          {isTermsFullModalOpen && <TermsModal onClose={() => setIsTermsFullModalOpen(false)} />}\n        </IdentificationVerificationProvider>\n      </AgeVerificationProvider>\n    </SignUpProvider>\n  );\n};\n\nexport default SignUp;\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useSignUpActionContext, useSignUpStateContext, useModalActionContext } from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../components/ErrorBoundary';\n\nconst SignUpButton = () => {\n  const { postProfile } = useSignUpActionContext();\n  const { openAlert } = useModalActionContext();\n  const { isSignedUp } = useSignUpStateContext();\n\n  const { verifyUserId, verifyUserPassword, confirmUserPassword, verifyUserName, validateMobile, validateEmail } =\n    useSignUpActionContext();\n  const { validationStatus, signUpMemberInfo } = useSignUpStateContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const navigate = useNavigate();\n\n  const validate = () => {\n    verifyUserId();\n    verifyUserPassword();\n    confirmUserPassword();\n    validateMobile();\n    verifyUserName();\n    validateEmail();\n  };\n\n  // eslint-disable-next-line complexity\n  const hasEmpty = () =>\n    !signUpMemberInfo.emailId ||\n    !signUpMemberInfo.emailDomain ||\n    !signUpMemberInfo.firstSerial ||\n    !signUpMemberInfo.memberId ||\n    !signUpMemberInfo.memberName ||\n    !signUpMemberInfo.password ||\n    !signUpMemberInfo.passwordCheck ||\n    !signUpMemberInfo.secondSerial;\n\n  const handleSignUp = async () => {\n    validate();\n\n    const isInvalidMemberInfo = Object.values(validationStatus).some(({ result }) => !result);\n    if (hasEmpty() || isInvalidMemberInfo) {\n      openAlert({\n        message: '필수 입력 사항을 확인 바랍니다.',\n      });\n\n      return;\n    }\n\n    try {\n      await postProfile();\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    if (isSignedUp === true) {\n      openAlert({\n        message: '회원가입이 완료되었습니다.',\n        onClose: () => {\n          navigate('/', {\n            replace: true,\n          });\n        },\n      });\n    }\n  }, [isSignedUp]);\n\n  return (\n    <div className=\"sign-up-form__confirm\">\n      <button className=\"\" onClick={handleSignUp}>\n        회원가입\n      </button>\n    </div>\n  );\n};\n\nexport default SignUpButton;\n","import { useRef } from 'react';\n\nimport {\n  useMallStateContext,\n  useSignUpActionContext,\n  useSignUpStateContext,\n  TextField,\n  EmailInput,\n  Checkbox,\n  Button,\n  SelectBox,\n} from '@shopby/react-components';\n\nimport { EMAIL_DOMAIN_OPTIONS } from '../../constants/form';\n\nimport ValidationStatus from './ValidationStatus';\n// eslint-disable-next-line complexity\nconst SignUpEmailForm = () => {\n  const { mallJoinConfig } = useMallStateContext();\n  const {\n    verifyUserEmail,\n    validateEmail,\n    postAuthenticationsEmail,\n    getAuthenticationsEmail,\n    setSignUpMemberInfo,\n    setEmailReceiveInfo,\n  } = useSignUpActionContext();\n\n  const {\n    signUpMemberInfo: { emailId, emailDomain, domainSelectorValue, certificatedNumber },\n    timerTime,\n    authenticationsRemainTimeBySeconds,\n    authenticationReSend,\n    emailReceiveInfo,\n  } = useSignUpStateContext();\n\n  const handleFormValueChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, [event.target.name]: event.target.value }));\n  };\n\n  const handleEmailIdInputChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, emailId: event.target.value }));\n  };\n\n  const handleEmailDomainInputChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, emailDomain: event.target.value, domainSelectorValue: '직접 입력' }));\n  };\n\n  const handleEmailDomainSelect = ({ currentTarget }) => {\n    setSignUpMemberInfo((prev) => ({\n      ...prev,\n      emailDomain: currentTarget.value,\n      domainSelectorValue: currentTarget.value,\n    }));\n\n    if (!emailId && !validateEmail()) {\n      return;\n    }\n\n    verifyUserEmail();\n  };\n\n  const emailRef = useRef(null);\n\n  const handleDomainBlur = () => {\n    if (!validateEmail()) {\n      return;\n    }\n    verifyUserEmail();\n  };\n  const handleVerifyEmail = () => {\n    postAuthenticationsEmail();\n  };\n  const handleConfirmEmailAuthentication = () => getAuthenticationsEmail();\n  const handleEmailCheck = (event) => {\n    event.target.checked\n      ? setEmailReceiveInfo((prev) => ({ ...prev, checked: true }))\n      : setEmailReceiveInfo((prev) => ({ ...prev, checked: false }));\n  };\n\n  return (\n    <>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"email\" className=\"sign-up-form__tit\">\n          이메일 주소\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <EmailInput\n            ref={emailRef}\n            id={emailId}\n            domain={emailDomain}\n            onIdChange={handleEmailIdInputChange}\n            onIdBlur={handleDomainBlur}\n            onDomainChange={handleEmailDomainInputChange}\n            onDomainBlur={handleDomainBlur}\n          />\n          <SelectBox\n            hasEmptyOption={true}\n            emptyOptionLabel={domainSelectorValue}\n            onSelect={handleEmailDomainSelect}\n            options={EMAIL_DOMAIN_OPTIONS}\n          />\n          <ValidationStatus name=\"email\" />\n\n          {mallJoinConfig.authenticationTimeType === 'JOIN_TIME' &&\n          mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_EMAIL' ? (\n            <Button\n              className=\"authentication-btn\"\n              label={authenticationReSend ? `재인증` : `인증번호 발송`}\n              onClick={() => {\n                handleVerifyEmail();\n              }}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n      <ul className=\"sign-up-form__agree-list\">\n        <li key={emailReceiveInfo.id}>\n          <div className=\"sign-up-form__checkbox--partial\">\n            <Checkbox onChange={handleEmailCheck} checked={emailReceiveInfo.checked} label={emailReceiveInfo.title} />\n          </div>\n        </li>\n      </ul>\n      {mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_EMAIL' && authenticationsRemainTimeBySeconds ? (\n        <div className=\"sign-up-form__item\">\n          <label htmlFor=\"certificatedNumber\" className=\"sign-up-form__tit\">\n            인증번호\n          </label>\n          <div className=\"sign-up-form__input-wrap\">\n            <TextField\n              name=\"certificatedNumber\"\n              id=\"certificatedNumber\"\n              value={certificatedNumber}\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleFormValueChange}\n              maxLength={6}\n              valid=\"NO_SPACE\"\n            />\n            <Button label={'확인'} onClick={handleConfirmEmailAuthentication} />\n          </div>\n          {timerTime ? (\n            <span className=\"timer\">\n              <span className=\"timer__text\">유효시간</span>\n              <span className=\"timer__number\">{timerTime.minute}</span>\n              <span className=\"timer__middle-sign\">:</span>\n              <span className=\"timer__number\">{timerTime.second}</span>\n            </span>\n          ) : (\n            ''\n          )}\n          <ValidationStatus name=\"certificatedNumber\" />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default SignUpEmailForm;\n","import { useEffect } from 'react';\n\nimport {\n  useSignUpActionContext,\n  useSignUpStateContext,\n  TextField,\n  useMallStateContext,\n} from '@shopby/react-components';\n\nimport SignUpEmailForm from './SignUpEmailForm';\nimport SignUpSmsForm from './SignUpSmsForm';\nimport ValidationStatus from './ValidationStatus';\n\n// eslint-disable-next-line complexity\nconst SignUpForm = () => {\n  const {\n    verifyUserId,\n    verifyUserPassword,\n    confirmUserPassword,\n    verifyUserName,\n    setSignUpMemberInfo,\n    setValidationStatus,\n    setTimerTime,\n    setAuthenticationReSend,\n  } = useSignUpActionContext();\n\n  const {\n    signUpMemberInfo: { memberId, password, passwordCheck, memberName },\n    timerTime,\n    authenticationsRemainTimeBySeconds,\n  } = useSignUpStateContext();\n\n  const { mallJoinConfig } = useMallStateContext();\n\n  useEffect(() => {\n    if (\n      mallJoinConfig.authenticationTimeType !== 'JOIN_TIME' ||\n      mallJoinConfig.authenticationType !== 'SMS_AUTHENTICATION'\n    ) {\n      setValidationStatus((prev) => ({\n        ...prev,\n        certificatedNumber: { result: true, message: '' },\n      }));\n    }\n  }, [mallJoinConfig]);\n\n  const handleFormValueChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, [event.target.name]: event.target.value }));\n  };\n\n  const handleVerifyUserId = () => verifyUserId();\n  const handleVerifyUserPassword = () => verifyUserPassword();\n  const handleConfirmUserPassword = () => confirmUserPassword();\n  const handleVerifyUserName = () => verifyUserName();\n\n  const startTimer = () => {\n    const timeFormat = () => {\n      let minute = Math.floor(authenticationsRemainTimeBySeconds / 60).toString();\n      let second = (authenticationsRemainTimeBySeconds % 60).toString();\n\n      if (minute.length === 1) minute = `0${minute}`;\n      if (second.length === 1) second = `0${second}`;\n\n      setTimerTime({ minute, second });\n    };\n    timeFormat();\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (Number(timerTime.second) > 0) {\n        setTimerTime((prev) => ({\n          ...prev,\n          second: String(Number(timerTime.second) - 1),\n        }));\n      }\n      if (Number(timerTime.second) === 0) {\n        if (Number(timerTime.minute) === 0) {\n          clearInterval(timer);\n          if (authenticationsRemainTimeBySeconds !== 0) {\n            setAuthenticationReSend(true);\n            setValidationStatus((prev) => ({\n              ...prev,\n              certificatedNumber: { result: false, message: '유효시간이 만료되었습니다.' },\n            }));\n          }\n        } else {\n          setTimerTime((prev) => ({\n            ...prev,\n            minute: String(Number(timerTime.minute) - 1),\n            second: '59',\n          }));\n        }\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [timerTime]);\n  useEffect(() => {\n    if (authenticationsRemainTimeBySeconds === 0) {\n      return;\n    }\n    startTimer();\n  }, [authenticationsRemainTimeBySeconds]);\n\n  useEffect(() => {\n    if (['NOT_USED', 'AUTHENTICATION_BY_PHONE'].includes(mallJoinConfig.authenticationType)) {\n      setValidationStatus((prev) => ({\n        ...prev,\n        certificatedNumber: { result: true, message: '' },\n      }));\n      setSignUpMemberInfo((prev) => ({ ...prev, certificatedNumber: 'NOT_USED' }));\n    }\n  }, [password]);\n\n  return (\n    <>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"id\" className=\"sign-up-form__tit\">\n          아이디\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <TextField\n            name=\"memberId\"\n            id=\"id\"\n            value={memberId}\n            placeholder=\"아이디\"\n            onChange={handleFormValueChange}\n            onBlur={() => {\n              handleVerifyUserId();\n            }}\n            minLength={5}\n            valid=\"ENGLISH_NUMBER\"\n          />\n        </div>\n        <ValidationStatus name=\"memberId\" />\n      </div>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"password\" className=\"sign-up-form__tit\">\n          비밀번호\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <TextField\n            name=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"비밀번호 (영문, 숫자, 특수문자 8-15자)\"\n            type=\"password\"\n            onChange={handleFormValueChange}\n            onBlur={handleVerifyUserPassword}\n            minLength={8}\n            maxLength={20}\n            valid=\"ENGLISH_NUMBER_SPECIAL\"\n          />\n        </div>\n        <ValidationStatus name=\"password\" />\n      </div>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"passwordCheck\" className=\"sign-up-form__tit\">\n          비밀번호 재입력\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <TextField\n            name=\"passwordCheck\"\n            id=\"passwordCheck\"\n            value={passwordCheck}\n            placeholder=\"비밀번호 재입력\"\n            type=\"password\"\n            onChange={handleFormValueChange}\n            onBlur={handleConfirmUserPassword}\n            minLength={8}\n            maxLength={20}\n            valid=\"NO_SPACE\"\n          />\n        </div>\n        <ValidationStatus name=\"passwordCheck\" />\n      </div>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"memberName\" className=\"sign-up-form__tit\">\n          이름\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <TextField\n            name=\"memberName\"\n            id=\"memberName\"\n            value={memberName}\n            placeholder=\"이름\"\n            onChange={handleFormValueChange}\n            onBlur={handleVerifyUserName}\n          />\n        </div>\n        <ValidationStatus name=\"memberName\" />\n      </div>\n      <SignUpEmailForm />\n      <SignUpSmsForm />\n    </>\n  );\n};\n\nexport default SignUpForm;\n","import { useEffect } from 'react';\n\nimport {\n  useMallStateContext,\n  useSignUpActionContext,\n  useSignUpStateContext,\n  useIdentificationVerificationStateContext,\n  TextField,\n  Checkbox,\n  Button,\n  PhoneNumberInput,\n  VisibleComponent,\n} from '@shopby/react-components';\n\nimport IdentificationVerificationBtn from '../../components/IdentificationVerificationBtn/IdentificationVerificationBtn';\n\nimport ValidationStatus from './ValidationStatus';\n// eslint-disable-next-line complexity\nconst SignUpSmsForm = () => {\n  const { mallJoinConfig } = useMallStateContext();\n  const { isIdentificationVerificationReSend, isCiExist, ci } = useIdentificationVerificationStateContext();\n  const {\n    validateMobile,\n    postAuthenticationsMobile,\n    confirmAuthentication,\n    setSignUpMemberInfo,\n    setSmsReceiveInfo,\n    setValidationStatus,\n    setCi,\n  } = useSignUpActionContext();\n\n  const {\n    signUpMemberInfo: { carrierNumber, firstSerial, secondSerial, certificatedNumber },\n    timerTime,\n    smsReceiveInfo,\n    authenticationsRemainTimeBySeconds,\n    authenticationReSend,\n  } = useSignUpStateContext();\n\n  const handleFormValueChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, [event.target.name]: event.target.value }));\n  };\n\n  const handlePhoneCarrierNumberSelect = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, carrierNumber: event.target.value }));\n  };\n\n  const handlePhoneFirstSerialNumberChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, firstSerial: event.target.value }));\n  };\n\n  const handlePhoneSecondSerialNumberChange = (event) => {\n    setSignUpMemberInfo((prev) => ({ ...prev, secondSerial: event.target.value }));\n  };\n\n  const handleSecondSerialBlur = () => {\n    validateMobile();\n  };\n\n  const handleConfirmAuthentication = () => confirmAuthentication();\n  const handleVerifyMobile = () => postAuthenticationsMobile();\n  const handleSmsCheck = (event) => {\n    event.target.checked\n      ? setSmsReceiveInfo((prev) => ({ ...prev, checked: true }))\n      : setSmsReceiveInfo((prev) => ({ ...prev, checked: false }));\n  };\n\n  useEffect(() => {\n    if (isCiExist) {\n      setValidationStatus((prev) => ({\n        ...prev,\n        mobileNo: { result: false, message: '휴대폰번호가 이미 사용중입니다.' },\n      }));\n    } else {\n      setValidationStatus((prev) => ({\n        ...prev,\n        mobileNo: { result: true, message: '' },\n      }));\n    }\n  }, [isCiExist]);\n\n  useEffect(() => {\n    if (ci) setCi(ci);\n  }, [ci]);\n\n  return (\n    <>\n      <div className=\"sign-up-form__item\">\n        <label htmlFor=\"mobileNo\" className=\"sign-up-form__tit\">\n          휴대폰 번호\n        </label>\n        <div className=\"sign-up-form__input-wrap\">\n          <PhoneNumberInput\n            name=\"mobileNo\"\n            id=\"mobileNo\"\n            carrierNumber={carrierNumber}\n            firstSerial={firstSerial}\n            secondSerial={secondSerial}\n            onCarrierNumberSelect={handlePhoneCarrierNumberSelect}\n            onFirstSerialChange={handlePhoneFirstSerialNumberChange}\n            onSecondSerialChange={handlePhoneSecondSerialNumberChange}\n            onSecondSerialBlur={handleSecondSerialBlur}\n          />\n          <VisibleComponent\n            shows={\n              mallJoinConfig.authenticationTimeType === 'JOIN_TIME' &&\n              mallJoinConfig.authenticationType === 'SMS_AUTHENTICATION'\n            }\n            TruthyComponent={\n              <Button label={authenticationReSend ? '재인증' : '인증번호 발송'} onClick={handleVerifyMobile} />\n            }\n          />\n\n          {mallJoinConfig.authenticationTimeType === 'JOIN_TIME' &&\n            mallJoinConfig.authenticationType === 'AUTHENTICATION_BY_PHONE' && (\n              <IdentificationVerificationBtn\n                label={isIdentificationVerificationReSend ? '재인증' : '휴대폰 본인인증'}\n                type=\"signUp\"\n              />\n            )}\n\n          <ValidationStatus name=\"mobileNo\" />\n        </div>\n      </div>\n      <ul className=\"sign-up-form__agree-list\">\n        <li key={smsReceiveInfo.id}>\n          <div className=\"sign-up-form__checkbox--partial\">\n            <Checkbox onChange={handleSmsCheck} checked={smsReceiveInfo.checked} label={smsReceiveInfo.title} />\n          </div>\n        </li>\n      </ul>\n      {mallJoinConfig.authenticationType === 'SMS_AUTHENTICATION' && authenticationsRemainTimeBySeconds ? (\n        <div className=\"sign-up-form__item\">\n          <label htmlFor=\"certificatedNumber\" className=\"sign-up-form__tit\">\n            인증번호\n          </label>\n          <div className=\"sign-up-form__input-wrap\">\n            <TextField\n              name=\"certificatedNumber\"\n              id=\"certificatedNumber\"\n              value={certificatedNumber}\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleFormValueChange}\n              maxLength={6}\n              valid=\"NO_SPACE\"\n            />\n            <Button label={'확인'} onClick={handleConfirmAuthentication} />\n          </div>\n          {timerTime ? (\n            <span className=\"timer\">\n              <span className=\"timer__text\">유효시간</span>\n              <span className=\"timer__number\">{timerTime.minute}</span>\n              <span className=\"timer__middle-sign\">:</span>\n              <span className=\"timer__number\">{timerTime.second}</span>\n            </span>\n          ) : (\n            ''\n          )}\n          <ValidationStatus name=\"certificatedNumber\" />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default SignUpSmsForm;\n","import { useEffect } from 'react';\n\nimport { func } from 'prop-types';\n\nimport { useSignUpActionContext, useSignUpStateContext, Checkbox, Button } from '@shopby/react-components';\n\nconst TermsForm = ({ setIsTermsFullModalOpen }) => {\n  const { checkboxModalToggle, checkboxSingleCheck, checkboxAllCheck, setTermStatus } = useSignUpActionContext();\n  const { termStatus } = useSignUpStateContext();\n\n  const initialTermStatus = [\n    {\n      id: 'use',\n      title: '[필수] 이용약관',\n      checked: false,\n      require: true,\n      hasDetailView: true,\n      termsType: 'USE',\n      isFullModalOpen: false,\n    },\n    {\n      id: 'ci',\n      title: '[필수] 개인정보 수집 / 이용동의',\n      checked: false,\n      require: true,\n      hasDetailView: true,\n      termsType: 'PI_COLLECTION_AND_USE_REQUIRED',\n      isFullModalOpen: false,\n    },\n    { id: 'age', title: '[필수] 만 14세 이상입니다', checked: false, require: true },\n  ];\n\n  const handleModalToggle = (id) => checkboxModalToggle(id);\n  const handleSingleCheck = (checked, id) => checkboxSingleCheck(checked, id);\n  const handleAllCheck = (checked) => checkboxAllCheck(checked);\n\n  useEffect(() => {\n    setTermStatus(initialTermStatus);\n  }, []);\n\n  return (\n    <>\n      <div className=\"sign-up-form__item sign-up-form__agree-wrap\">\n        <p className=\"sign-up-form__tit\">약관동의</p>\n        <div className=\"sign-up-form__input-wrap\">\n          <div className=\"sign-up-form__checkbox--all\">\n            <Checkbox\n              onChange={(e) => {\n                handleAllCheck(e.target.checked);\n              }}\n              checked={termStatus.every((el) => el.checked)}\n              name=\"checkAll\"\n              label={'아래 약관에 모두 동의합니다.'}\n            />\n          </div>\n          <ul className=\"sign-up-form__agree-list\">\n            {termStatus?.map((item) => (\n              <li key={item.id}>\n                <div className=\"sign-up-form__checkbox--partial\">\n                  <Checkbox\n                    onChange={(e) => {\n                      handleSingleCheck(e.target.checked, item.id);\n                    }}\n                    checked={item.checked}\n                    label={item.title}\n                  />\n                  {item.hasDetailView && (\n                    <Button\n                      label={'보기'}\n                      onClick={() => {\n                        handleModalToggle(item.id);\n                        setIsTermsFullModalOpen();\n                      }}\n                    />\n                  )}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className=\"notice-list\">\n        <p className=\"notice-list__item\">\n          주문, 결제, 고객 상담 등 원활한 정보 제공을 위해 이메일 주소 및 휴대폰 번호는 정확히 기입하셔야 합니다.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default TermsForm;\n\nTermsForm.propTypes = {\n  setIsTermsFullModalOpen: func,\n};\n","import { useEffect } from 'react';\n\nimport { func } from 'prop-types';\n\nimport { useSignUpStateContext, useSignUpActionContext } from '@shopby/react-components';\n\nimport FullModal from '../../components/FullModal';\nimport Sanitized from '../../components/Sanitized';\n\nconst TermsModal = ({ onClose }) => {\n  const { getTerms, setTermsModalInfo } = useSignUpActionContext();\n  const { termsModalInfo } = useSignUpStateContext();\n  useEffect(() => {\n    getTerms({\n      termsTypes: termsModalInfo.termsType,\n    });\n\n    return () => {\n      setTermsModalInfo(null);\n    };\n  }, []);\n\n  if (!termsModalInfo.contents) return <></>;\n\n  return (\n    <FullModal className=\"agreement\" title={termsModalInfo.title} onClose={onClose}>\n      <Sanitized html={termsModalInfo.contents} />\n    </FullModal>\n  );\n};\n\nexport default TermsModal;\n\nTermsModal.propTypes = {\n  onClose: func,\n};\n","import { string } from 'prop-types';\n\nimport { useSignUpStateContext } from '@shopby/react-components';\n\nconst ValidationStatus = ({ name }) => {\n  const { validationStatus } = useSignUpStateContext();\n\n  return (\n    <p className={`description ${validationStatus[name]?.message && validationStatus[name]?.result ? '' : 'alert'}`}>\n      {validationStatus[name].message}\n    </p>\n  );\n};\n\nexport default ValidationStatus;\nValidationStatus.propTypes = {\n  name: string,\n};\n","import SignUp from './SignUp';\n\nexport default SignUp;\n"],"names":[],"sourceRoot":""}