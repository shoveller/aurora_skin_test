{"version":3,"file":"default-src_pages_SignIn_SignInForm_jsx.e0c2be731834fb9c3241.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvDA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAEA;AASA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA9BA;AAAA;AAAA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAfA;AAAA;AAAA;AAiBA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvJA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAEA;AAEA;AAaA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAQA;AAPA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AATA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAXA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AAGA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAIA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAQA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/OpenIdSignIn/OpenIdSignIn.jsx","webpack://@shopby/react-skin/./src/components/OpenIdSignIn/index.js","webpack://@shopby/react-skin/./src/components/PasswordChanger/PasswordChanger.jsx","webpack://@shopby/react-skin/./src/components/PasswordChanger/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/hooks/useChangePassword.js","webpack://@shopby/react-skin/./src/pages/SignIn/SignInForm.jsx"],"sourcesContent":["import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useLocation } from 'react-router-dom';\n\nimport { string, array } from 'prop-types';\n\nimport { VisibleComponent, useOpenIdSignInActionContext } from '@shopby/react-components';\n\nconst OpenIdSignIn = ({ label, orderSheetNo, providers }) => {\n  const { openIdSignIn, setPathToLocalStorage } = useOpenIdSignInActionContext();\n\n  const location = useLocation();\n  const previousPath = location.state?.from; // 로그인 화면 전 페이지\n  const nextPath = location.state?.to; // 로그인 후 이동할 페이지\n  const orderSheetPath = orderSheetNo ? orderSheetNo : '';\n  const redirectUri = `${window.location.origin}/callback/auth-callback`;\n\n  return (\n    <VisibleComponent\n      shows={providers?.length > 0}\n      TruthyComponent={\n        <div className=\"open-id-sign-in\">\n          <p className=\"open-id-sign-in__title\">\n            <span>간편로그인</span>\n          </p>\n          <ul className=\"open-id-sign-in__list\">\n            {providers\n              ?.sort((a, b) => b.charCodeAt(0) - a.charCodeAt(0))\n              .map((provider, idx) => (\n                <li className={`open-id-sign-in__item type-${provider}`} key={`${idx}_${provider}`}>\n                  <button\n                    className=\"open-id-sign-in__link\"\n                    data-provider={provider}\n                    data-action=\"oauth\"\n                    onClick={() => {\n                      setPathToLocalStorage({ previousPath, nextPath, orderSheetPath });\n                      openIdSignIn({ provider, redirectUri });\n                    }}\n                  >\n                    <span>{`${provider?.toUpperCase()} `}</span>\n                    {` 아이디로 ${label}`}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      }\n    />\n  );\n};\n\nexport default OpenIdSignIn;\n\nOpenIdSignIn.propTypes = {\n  label: string,\n  providers: array,\n  orderSheetNo: string,\n};\n","import OpenIdSignIn from './OpenIdSignIn';\n\nexport default OpenIdSignIn;\n","import { useState, useEffect } from 'react';\n\nimport { bool, func } from 'prop-types';\n\nimport {\n  VisibleComponent,\n  Button,\n  TextField,\n  useModalActionContext,\n  useCheckMemberPasswordActionContext,\n  useSignInActionContext,\n} from '@shopby/react-components';\n\nimport useChangePassword from '../../hooks/useChangePassword';\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst PasswordChanger = ({ useNextChanger = false, onSubmit, onNext }) => {\n  const { changePassword } = useSignInActionContext();\n  const { openAlert } = useModalActionContext();\n\n  const { checkPassword } = useCheckMemberPasswordActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const currentPasswordChanger = useChangePassword();\n  const newPasswordChanger = useChangePassword();\n  const newPasswordCheckChanger = useChangePassword();\n\n  const [isInvalidPasswordCheck, setIsInvalidPasswordCheck] = useState(false);\n\n  const getInvalidMessage = () => {\n    if (!currentPasswordChanger.password) return '현재 비밀번호를 입력해주세요.';\n\n    if (!newPasswordChanger.password) return '새로운 비밀번호를 입력해주세요.';\n\n    if (newPasswordChanger.password !== newPasswordCheckChanger.password)\n      return '비밀번호와 비밀번호 확인 값이 일치하지 않습니다.';\n\n    if (!newPasswordChanger.isValid) return newPasswordChanger.message;\n\n    return '';\n  };\n\n  const handleSubmit = async () => {\n    newPasswordChanger.validatePassword();\n\n    const invalidMessage = getInvalidMessage();\n\n    if (invalidMessage) {\n      openAlert({\n        message: invalidMessage,\n      });\n\n      return;\n    }\n\n    try {\n      await checkPassword(currentPasswordChanger.password);\n      await changePassword({\n        currentPassword: currentPasswordChanger.password,\n        newPassword: newPasswordChanger.password,\n        willChangeNextTime: false,\n      });\n\n      openAlert({\n        message: '회원님의 비밀번호가 안전하게 변경되었습니다.',\n        onClose: () => {\n          onSubmit?.();\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const handleNext = async () => {\n    try {\n      await changePassword({\n        willChangeNextTime: true,\n      });\n\n      openAlert({\n        message: '해당 안내는 90일 뒤에 다시 안내됩니다.',\n        onClose: () => {\n          onNext?.();\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    setIsInvalidPasswordCheck(newPasswordChanger.password !== newPasswordCheckChanger.password);\n  }, [newPasswordChanger.password, newPasswordCheckChanger.password]);\n\n  return (\n    <>\n      <div className=\"password-changer\">\n        <TextField\n          className=\"password-changer__current\"\n          placeholder=\"현재 비밀번호\"\n          type=\"password\"\n          value={currentPasswordChanger.password}\n          onChange={currentPasswordChanger.handleChangePassword}\n        />\n        <hr />\n        <TextField\n          className=\"password-changer__new\"\n          placeholder=\"새 비밀번호\"\n          value={newPasswordChanger.password}\n          type=\"password\"\n          onChange={newPasswordChanger.handleChangePassword}\n          onBlur={newPasswordChanger.validatePassword}\n          valid=\"NO_SPACE\"\n        />\n        <VisibleComponent\n          shows={!newPasswordChanger.isValid}\n          TruthyComponent={<p className=\"password-changer__caution\">{newPasswordChanger.message}</p>}\n        />\n        <TextField\n          className=\"password-changer__new-check\"\n          placeholder=\"새 비밀번호 확인\"\n          value={newPasswordCheckChanger.password}\n          type=\"password\"\n          onChange={newPasswordCheckChanger.handleChangePassword}\n          valid=\"NO_SPACE\"\n        />\n        <VisibleComponent\n          shows={isInvalidPasswordCheck}\n          TruthyComponent={\n            <p className=\"password-changer__caution\">비밀번호와 비밀번호 확인 값이 일치하지 않습니다.</p>\n          }\n        />\n      </div>\n      <div className=\"password-changer__buttons\">\n        <VisibleComponent\n          shows={useNextChanger}\n          TruthyComponent={<Button theme=\"dark\" label=\"다음에 변경\" onClick={handleNext} />}\n        />\n        <Button theme=\"caution\" label=\"비밀번호 변경\" onClick={handleSubmit} />\n      </div>\n    </>\n  );\n};\n\nexport default PasswordChanger;\n\nPasswordChanger.propTypes = {\n  useNextChanger: bool,\n  onSubmit: func,\n  onNext: func,\n};\n","import PasswordChanger from './PasswordChanger';\n\nexport default PasswordChanger;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { useState } from 'react';\n\nimport { checkPassword } from '@shopby/shared';\n\nconst INVALID_PASSWORD_MESSAGE_MAP = {\n  MUST_CONTAIN_THREE_TYPES_IN_LENGTH_LESS_THAN_10:\n    '비밀번호는 영문, 숫자, 특수문자를 3종류 모두 조합하여 8~20자로 입력해주세요.',\n  MUST_CONTAIN_TWO_TYPES_IN_LENGTH_MORE_THAN_10:\n    '비밀번호는 영문, 숫자, 특수문자를 2종류 이상 조합하여 10~20자로 입력해주세요.',\n  LENGTH_IS_INVALID: '비밀번호는 영문, 숫자, 특수문자를 3종류 모두 조합하여 8~20자로 입력해주세요.',\n  INVALID_SPECIAL: '비밀번호 특수문자는 !@#$%^&*+=-_.()만 사용 가능합니다.',\n};\n\nconst useChangePassword = () => {\n  const [password, setPassword] = useState('');\n  const [isValid, setIsValid] = useState(true);\n  const [message, setMessage] = useState('');\n\n  const handleChangePassword = ({ currentTarget: { value } }) => {\n    setPassword(value);\n  };\n\n  const validatePassword = () => {\n    const { isValid, message } = checkPassword(password);\n\n    setIsValid(isValid);\n    setMessage(INVALID_PASSWORD_MESSAGE_MAP[message]);\n  };\n\n  return {\n    password,\n    handleChangePassword,\n    validatePassword,\n    isValid,\n    message,\n  };\n};\n\nexport default useChangePassword;\n","import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport { bool, func } from 'prop-types';\n\nimport {\n  SignInButton,\n  useSignInActionContext,\n  useSignInValueContext,\n  TextField,\n  Button,\n  VisibleComponent,\n  useMallStateContext,\n  useModalActionContext,\n  useAuthActionContext,\n  CheckMemberPasswordProvider,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../../components/ErrorBoundary';\nimport FullModal from '../../components/FullModal';\nimport OpenIdSignIn from '../../components/OpenIdSignIn';\nimport PasswordChanger from '../../components/PasswordChanger';\n\nconst SignInForm = ({ usesOnlySignIn = false, onSignIn }) => {\n  const { state } = useLocation();\n\n  const { t } = useTranslation('auth');\n  const {\n    updateSignInInfo,\n    updateGuestOrderInfo,\n    signIn,\n    updateHasGuestOrderSheetUrl,\n    searchGuestOrders,\n    reactivateDormantAccount,\n  } = useSignInActionContext();\n  const { signOut } = useAuthActionContext();\n  const { openConfirm, openAlert } = useModalActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n  const {\n    signInInfo: { memberId, password },\n    guestOrderInfo: { orderNo, orderPassword },\n    hasGuestOrderSheetUrl,\n    isSignedIn,\n    dormantMemberResponse,\n    daysFromLastPasswordChange,\n    // TODO: 스킨에서 비밀번호 변경 및 휴면회원 페이지 이동전에 안내 할것인지 확인 필요\n  } = useSignInValueContext();\n  const { openIdJoinConfig, mallName } = useMallStateContext();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleMemberIdChange = ({ currentTarget: { value } }) => {\n    updateSignInInfo({ memberId: value });\n  };\n\n  const handlePasswordChange = ({ currentTarget: { value } }) => {\n    updateSignInInfo({ password: value });\n  };\n\n  const handlePasswordKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      signIn({ memberId, password });\n    }\n  };\n\n  const handleOrderNoChange = ({ currentTarget: { value } }) => {\n    updateGuestOrderInfo({ orderNo: value });\n  };\n\n  const handleOrderPasswordChange = ({ currentTarget: { value } }) => {\n    updateGuestOrderInfo({ orderPassword: value });\n  };\n\n  const handleOrderPasswordKeyDown = async (e) => {\n    try {\n      if (e.key === 'Enter') {\n        await searchGuestOrders({ orderNo, password: orderPassword, orderRequestType: 'ALL' });\n        location.href = `/orders/${orderNo}`;\n      }\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const handleSearchGuestOrdersBtnClick = async () => {\n    try {\n      await searchGuestOrders({ orderNo, password: orderPassword, orderRequestType: 'ALL' });\n      location.href = `/orders/${orderNo}`;\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const [params] = useSearchParams();\n  const orderSheetNo = params.get('orderSheetNo');\n\n  useEffect(() => {\n    if (orderSheetNo) {\n      updateHasGuestOrderSheetUrl(true);\n    }\n  }, [orderSheetNo]);\n\n  const locationPage = () => {\n    location.state = {\n      from: `${location.pathname}${location.search}`,\n      to: state?.to,\n    };\n\n    if (onSignIn) {\n      onSignIn();\n    } else if (orderSheetNo) {\n      location.href = `/order/${orderSheetNo}`;\n    } else {\n      const from = location.state?.from?.includes('sign-in') ? '/' : location.state?.from;\n\n      location.href = from ?? '/';\n    }\n  };\n\n  const reactivate = async () => {\n    try {\n      await reactivateDormantAccount({ authType: 'NONE' });\n\n      openAlert({\n        message: '휴면해제 되었습니다.',\n        onClose: locationPage,\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  const passwordHandler = () => {\n    if (daysFromLastPasswordChange > 90) {\n      setIsOpen(true);\n    } else {\n      locationPage();\n    }\n  };\n\n  const dormantMemberHandler = () => {\n    const isDormantMember =\n      dormantMemberResponse?.memberName || dormantMemberResponse?.mobileNo || dormantMemberResponse?.email;\n\n    if (!isDormantMember) {\n      passwordHandler();\n\n      return;\n    }\n\n    openConfirm({\n      message: (\n        <>\n          장기 미접속으로 인해 휴면회원 전환 상태입니다. <br />\n          휴면해제 하시겠습니까?\n        </>\n      ),\n      confirmLabel: '확인',\n      onConfirm: () => reactivate(),\n      onCancel: async () => {\n        try {\n          await signOut();\n\n          window.location.href = '/';\n        } catch (e) {\n          catchError(e);\n        }\n      },\n    });\n  };\n\n  const closePasswordChangerModal = () => {\n    setIsOpen(false);\n    locationPage();\n  };\n\n  useEffect(() => {\n    if (!isSignedIn) return;\n\n    dormantMemberHandler();\n  }, [isSignedIn]);\n\n  return (\n    <>\n      <section className=\"sign-in\">\n        <h2 className=\"a11y\">로그인</h2>\n        <div className=\"normal-sign-in\">\n          <div className=\"normal-sign-in__input-wrap\">\n            <TextField\n              name=\"memberId\"\n              placeholder=\"아이디\"\n              onChange={handleMemberIdChange}\n              value={memberId}\n              valid=\"NO_SPACE\"\n            />\n          </div>\n          <div className=\"normal-sign-in__input-wrap\">\n            <TextField\n              name=\"password\"\n              placeholder=\"비밀번호\"\n              onChange={handlePasswordChange}\n              onKeyDown={handlePasswordKeyDown}\n              value={password}\n              type=\"password\"\n              valid=\"NO_SPACE\"\n            />\n          </div>\n          <SignInButton label={t('SIGNIN')} onError={(e) => catchError(e)} />\n        </div>\n\n        <div className=\"sign-in-link\">\n          <Link className=\"sign-in-link__item\" to=\"/find-id\">\n            아이디찾기\n          </Link>\n          <Link className=\"sign-in-link__item\" to=\"/find-password\">\n            비밀번호찾기\n          </Link>\n          <Link className=\"sign-in-link__item\" to=\"/sign-up\">\n            회원가입\n          </Link>\n        </div>\n\n        <VisibleComponent\n          shows={!usesOnlySignIn}\n          TruthyComponent={\n            <>\n              {hasGuestOrderSheetUrl && (\n                <Link className=\"guest-order-link\" to={`/order/${orderSheetNo}`}>\n                  비회원 주문하기\n                </Link>\n              )}\n\n              {!hasGuestOrderSheetUrl && (\n                <div className=\"guest-order\">\n                  <p className=\"guest-order__title\">비회원 주문조회 하기</p>\n                  <div className=\"guest-order__input-wrap\">\n                    <TextField\n                      name=\"orderNo\"\n                      placeholder=\"주문번호 입력\"\n                      onChange={handleOrderNoChange}\n                      value={orderNo}\n                    />\n                  </div>\n                  <div className=\"guest-order__input-wrap\">\n                    <TextField\n                      name=\"orderPassword\"\n                      type=\"password\"\n                      placeholder=\"주문번호 비밀번호 입력\"\n                      onChange={handleOrderPasswordChange}\n                      onKeyDown={handleOrderPasswordKeyDown}\n                      value={orderPassword}\n                    />\n                  </div>\n                  <Button label=\"조회하기\" onClick={handleSearchGuestOrdersBtnClick} />\n                </div>\n              )}\n            </>\n          }\n        />\n        {openIdJoinConfig.providers && (\n          <div className=\"sign-in-open-id\">\n            <OpenIdSignIn label=\"로그인\" orderSheetNo={orderSheetNo} providers={openIdJoinConfig.providers} />\n          </div>\n        )}\n      </section>\n      <VisibleComponent\n        shows={isOpen}\n        TruthyComponent={\n          <FullModal title=\"비밀번호 변경\">\n            <div className=\"long-term-notice\">\n              <div className=\"long-term-notice__content\">\n                <h3 className=\"long-term-notice__title\">회원님의 비밀번호를 변경해 주세요.</h3>\n                <p className=\"long-term-notice__text\">\n                  회원님께서는 장기간 비밀번호를 변경하지 않고, 동일한 비밀번호를 사용 중이십니다.\n                </p>\n                <span className=\"long-term-notice__description\">\n                  {mallName}에서는 회워님의 소중한 개인정보를 보호하기 위하여 비밀번호 변경을 안내해드리고 있습니다.\n                  <br />\n                  정기적인 비밀번호 변경으로 회원님의 개인정보를 보호해 주세요.\n                </span>\n              </div>\n              <CheckMemberPasswordProvider>\n                <PasswordChanger\n                  useNextChanger={true}\n                  onSubmit={closePasswordChangerModal}\n                  onNext={closePasswordChangerModal}\n                />\n              </CheckMemberPasswordProvider>\n            </div>\n          </FullModal>\n        }\n      />\n    </>\n  );\n};\nexport default SignInForm;\nSignInForm.propTypes = {\n  usesOnlySignIn: bool,\n  onSignIn: func,\n};\n"],"names":[],"sourceRoot":""}