{"version":3,"file":"default-src_components_AddressForm_index_js-src_constants_form_js-src_hooks_useLayoutChanger_js.864fd6353d86832686cc.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACzEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAEA;AASA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAbA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AASA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAcA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAqBA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;ACxCA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://@shopby/react-skin/./src/components/AddressForm/AddressForm.jsx","webpack://@shopby/react-skin/./src/components/AddressForm/index.js","webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/SearchZipCodeForm/SearchZipCodeForm.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/constants/form.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js"],"sourcesContent":["import { forwardRef, useState, useImperativeHandle, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { func, string } from 'prop-types';\n\nimport { Button, TextField } from '@shopby/react-components';\n\nimport FullModal from '../FullModal';\nimport SearchZipCodeForm from '../SearchZipCodeForm/SearchZipCodeForm';\n\nconst AddressForm = forwardRef(\n  ({ zipCode, address, onAddressItemClick, addressDetail, onAddressDetailChange, jibunAddress }, ref) => {\n    const { t } = useTranslation('common');\n    const buttonRef = useRef();\n    const detailAddressInputRef = useRef();\n    const [isSearchFullModalOpen, setIsSearchFullModalOpen] = useState(false);\n\n    const handleAddressItemClick = ({ zipCode, roadAddress, jibunAddress }) => {\n      onAddressItemClick?.({ zipCode, roadAddress, jibunAddress });\n      setIsSearchFullModalOpen(false);\n    };\n\n    const handleAddressDetailChange = (e) => {\n      const { value } = e.currentTarget;\n      onAddressDetailChange?.({ addressDetail: value });\n    };\n\n    useImperativeHandle(ref, () => ({\n      get addressForm() {\n        return {\n          zipCode,\n          address,\n          addressDetail,\n          jibunAddress,\n        };\n      },\n      focusSearchButton() {\n        buttonRef.current.focus();\n      },\n      focusDetailAddressInput() {\n        detailAddressInputRef.current.focus();\n      },\n    }));\n\n    return (\n      <form className=\"address-form\">\n        <p className=\"address-form__zip-code\">\n          <TextField value={zipCode} readOnly />\n          <Button ref={buttonRef} label={t('searchAddress')} onClick={() => setIsSearchFullModalOpen(true)} />\n        </p>\n        <TextField value={address} readOnly />\n        <TextField ref={detailAddressInputRef} value={addressDetail} onChange={handleAddressDetailChange} />\n        {isSearchFullModalOpen && (\n          <FullModal id=\"search-zip\" title={t('searchAddress')} onClose={() => setIsSearchFullModalOpen(false)}>\n            <SearchZipCodeForm onAddressItemClick={handleAddressItemClick} />\n          </FullModal>\n        )}\n      </form>\n    );\n  }\n);\n\nexport default AddressForm;\n\nAddressForm.propTypes = {\n  onAddressItemClick: func,\n  zipCode: string,\n  address: string,\n  addressDetail: string,\n  jibunAddress: string,\n  onAddressDetailChange: func,\n};\n\nAddressForm.displayName = 'AddressForm';\n","import AddressForm from './AddressForm';\n\nexport default AddressForm;\n","import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { func } from 'prop-types';\n\nimport {\n  AddressItem,\n  InfiniteScrollLoader,\n  SearchAddressForm,\n  SearchAddressProvider,\n  useSearchAddressActionContext,\n  useSearchAddressStateContext,\n} from '@shopby/react-components';\n\nimport { useErrorBoundaryActionContext } from '../ErrorBoundary';\n\nconst INFINITY_SCROLL_LOADER_OPTION = {\n  rootMargin: '100px',\n  threshold: 0.1,\n};\n\n/* eslint-disable-next-line */ // TODO: 타입스크립트 전환 시 수정\nconst SearchZipCodeFormConsumer = ({ onAddressItemClick }) => {\n  const { pageNumber, keyword, searchResult } = useSearchAddressStateContext();\n  const [isInfiniteScrollDisabled, setIsInfiniteScrollDisabled] = useState(false);\n  const { searchAddresses } = useSearchAddressActionContext();\n  const { t } = useTranslation(['manage', 'common']);\n  const itemsWrapperRef = useRef();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  useEffect(() => {\n    if (!searchResult) {\n      setIsInfiniteScrollDisabled(false);\n    }\n  }, [searchResult]);\n\n  const handleOnIntersect = async () => {\n    setIsInfiniteScrollDisabled(true);\n\n    if (searchResult && searchResult.itemsLength === searchResult.totalCount) {\n      return;\n    }\n\n    try {\n      await searchAddresses({ pageNumber: pageNumber + 1, keyword });\n      setIsInfiniteScrollDisabled(false);\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  return (\n    <div className=\"search-zip-code-form\">\n      <div className=\"search-zip-code-form__search\">\n        <SearchAddressForm placeholder={t('roadName + buildingNumber, buildingName, lotNumber')} />\n        <p className=\"search-zip-code-form__search-tip\">\n          {t('Integrated search is possible for road name, building name, and lot number.')}\n        </p>\n      </div>\n      <p className=\"search-zip-code-form__tip-tit\">\n        {searchResult ? (\n          <>\n            {t('allSearchResult', { ns: 'common' })}&nbsp;&nbsp;<em>{searchResult.totalCount}</em>\n          </>\n        ) : (\n          <>\n            <em>TIP!</em>&nbsp;&nbsp;{t('Search like this.')}\n          </>\n        )}\n      </p>\n      {searchResult?.totalCount === 0 && (\n        <p className=\"search-zip-code-form__tip-empty\">\n          {t('No results were found for your search. Please search again.', { ns: 'common' })}\n        </p>\n      )}\n      {searchResult ? (\n        <div className=\"search-zip-code-form__items\" ref={itemsWrapperRef}>\n          {searchResult.items.map(({ zipCode, jibunAddress, roadAddress }, idx) => (\n            <AddressItem\n              key={zipCode + idx}\n              zipCode={zipCode}\n              roadAddress={roadAddress}\n              jibunAddress={jibunAddress}\n              onClick={onAddressItemClick}\n            />\n          ))}\n          <InfiniteScrollLoader\n            rootRef={itemsWrapperRef}\n            onIntersect={handleOnIntersect}\n            disabled={isInfiniteScrollDisabled}\n            option={INFINITY_SCROLL_LOADER_OPTION}\n          />\n        </div>\n      ) : (\n        <ul className=\"search-zip-code-form__tip-list\">\n          <li>\n            {t('roadName + buildingNumber')} <span>({t('example: 9, World Cup-ro 10-gil')})</span>\n          </li>\n          <li>\n            {t('areaName + affix + lotNumber')} <span>({t('example: Seogyo-dong 476-25')})</span>{' '}\n          </li>\n          <li>\n            {t('buildingName(apartmentName)')} <span>({t('example: Banpo Xi Apartment')})</span>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst SearchZipCodeForm = ({ onAddressItemClick }) => (\n  <SearchAddressProvider usesAccumulation>\n    <SearchZipCodeFormConsumer onAddressItemClick={onAddressItemClick} />\n  </SearchAddressProvider>\n);\n\nexport default SearchZipCodeForm;\n\nSearchZipCodeForm.propTypes = {\n  onAddressItemClick: func,\n};\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","import { BANK_MAP, DELIVERY_COMPANY_TYPE_MAP, RETURN_WAY_TYPE_MAP } from '@shopby/shared';\n\nexport const EMAIL_DOMAINS = ['naver.com', 'hanmail.net', 'daum.net', 'nate.com', 'gmail.com'];\nexport const EMAIL_DOMAIN_OPTIONS = EMAIL_DOMAINS.map((domain) => ({ value: domain, label: domain }));\n\nexport const PHONE_CARRIER_NUMBERS_BY_STRING = [\n  '02',\n  '031',\n  '032',\n  '033',\n  '041',\n  '042',\n  '043',\n  '044',\n  '051',\n  '052',\n  '053',\n  '054',\n  '055',\n  '061',\n  '062',\n  '063',\n  '064',\n  '070',\n];\n\nexport const PHONE_NUMBER_INPUT_SECTIONS = ['carrierNumber', 'firstSerial', 'secondSerial'];\n\nexport const NAME_INPUT_MAX_LENGTH = 15;\nexport const INVOICE_NO_MAX_LENGTH = 20;\nexport const DELIVERY_MEMO_MAX_LENGTH = 20;\nexport const CLAIM_REASON_DETAIL_MAX_LENGTH = 300;\n\nexport const RETURN_WAY_OPTIONS = Object.entries(RETURN_WAY_TYPE_MAP).map(([value, label]) => ({ label, value }));\nexport const DELIVERY_COMPANY_OPTIONS = Object.entries(DELIVERY_COMPANY_TYPE_MAP).map(([value, label]) => ({\n  label,\n  value,\n}));\nexport const BANK_OPTIONS = Object.entries(BANK_MAP)\n  .map(([value, label]) => ({ label, value }))\n  .filter(({ value }) => value !== 'ANONYMOUS');\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n"],"names":[],"sourceRoot":""}