{"version":3,"file":"src_pages_MyPage_Like_index_js.7e9b8716e2b8cc3be0ee.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;AAEA;AAEA;AAQA;AANA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5DA;AAEA;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACZA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3BA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;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","sources":["webpack://@shopby/react-skin/./src/components/BoardNoticeList/BoardNoticeList.jsx","webpack://@shopby/react-skin/./src/components/BoardProductItem/BoardProductItem.jsx","webpack://@shopby/react-skin/./src/components/BoardProductItem/index.js","webpack://@shopby/react-skin/./src/components/FullModal/FullModal.jsx","webpack://@shopby/react-skin/./src/components/FullModal/index.js","webpack://@shopby/react-skin/./src/components/Layout/LayoutProvider.jsx","webpack://@shopby/react-skin/./src/components/ListSkeleton/ListSkeleton.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/OptionLabel.jsx","webpack://@shopby/react-skin/./src/components/OptionLabel/index.js","webpack://@shopby/react-skin/./src/components/ProductInquiryForm/ProductInquiryForm.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/ProductThumbItem.jsx","webpack://@shopby/react-skin/./src/components/ProductThumbItem/index.js","webpack://@shopby/react-skin/./src/components/TitleModal/TitleModal.jsx","webpack://@shopby/react-skin/./src/components/TitleModal/index.js","webpack://@shopby/react-skin/./src/constants/common.js","webpack://@shopby/react-skin/./src/constants/image.js","webpack://@shopby/react-skin/./src/hooks/useLayoutChanger.js","webpack://@shopby/react-skin/./src/pages/MyPage/Like/Like.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Like/LikeList.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/Like/index.js","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/TotalCount.jsx","webpack://@shopby/react-skin/./src/pages/MyPage/TotalCount/index.js","webpack://@shopby/react-skin/./src/utils/claim.js","webpack://@shopby/react-skin/./src/utils/index.js","webpack://@shopby/react-skin/./src/utils/product.js"],"sourcesContent":["import { arrayOf, string } from 'prop-types';\n\nimport { VisibleComponent } from '@shopby/react-components';\n\nconst BoardNoticeList = ({ texts = [], title = '유의사항' }) => (\n  <VisibleComponent\n    shows={texts.length > 0}\n    TruthyComponent={\n      <div className=\"board-form__notes\">\n        <dl className=\"board-form__note\">\n          <dt className=\"board-form__note-title\">{title}</dt>\n          {texts.map((text, index) => (\n            <dd key={index} className=\"board-form__note-text\">\n              {text}\n            </dd>\n          ))}\n        </dl>\n      </div>\n    }\n  />\n);\n\nexport default BoardNoticeList;\n\nBoardNoticeList.propTypes = {\n  texts: arrayOf(string).isRequired,\n  title: string,\n};\n","import { string, arrayOf, shape, func, oneOf, number } from 'prop-types';\n\nimport { VisibleComponent, SelectBox } from '@shopby/react-components';\n\nimport { BOARD_IMAGE } from '../../constants/image';\n\nconst BoardProductItem = ({\n  productName,\n  productImageUrl,\n  options = [],\n  onSelect,\n  optionDisplayLabel,\n  optionNo,\n  className = '',\n}) => {\n  const handleOptionSelect = ({ currentTarget: { value } }) => {\n    const selectedOptionNo = Number(value);\n\n    selectedOptionNo > 0 && onSelect?.(selectedOptionNo);\n  };\n\n  return (\n    <div className={`l-panel board-product-item__description ${className}`}>\n      <div className=\"board-product-item__image\">\n        <img src={`${productImageUrl}?${BOARD_IMAGE.THUMB_NAIL_SIZE}`} alt={productName} loading=\"lazy\" />\n      </div>\n      <div className=\"board-product-item__product\">\n        <em className=\"board-product-item__product-name\">{productName}</em>\n        <VisibleComponent\n          shows={options?.length > 1}\n          TruthyComponent={\n            <SelectBox\n              onSelect={handleOptionSelect}\n              options={options}\n              value={optionNo}\n              className=\"board-product-item__option-selector\"\n            />\n          }\n          FalsyComponent={<p className={`board-product-item__option-value`}>{optionDisplayLabel}</p>}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BoardProductItem;\n\nBoardProductItem.propTypes = {\n  productName: string.isRequired,\n  productImageUrl: string.isRequired,\n  options: arrayOf(\n    shape({\n      value: oneOf(['string', 'number']),\n      label: string,\n    })\n  ),\n  onSelect: func,\n  optionDisplayLabel: string,\n  optionNo: number,\n  className: string,\n};\n","import BoardProductItem from './BoardProductItem';\n\nexport default BoardProductItem;\n","import { string } from 'prop-types';\n\nimport TitleModal from '../TitleModal';\n\nconst FullModal = ({ className, ...props }) => (\n  <TitleModal className={`full-modal ${className ?? ''}`} {...props} isFull={true} />\n);\n\nFullModal.propTypes = {\n  className: string,\n};\n\nexport default FullModal;\n","import FullModal from './FullModal';\n\nexport default FullModal;\n","import { useContext, useMemo, useState, createContext } from 'react';\n\nimport { oneOfType, node, element } from 'prop-types';\n\nexport const LAYOUT_DEFAULT_STATE = {\n  isMain: false,\n  hasBackBtnOnHeader: false,\n  hasHomeBtnOnHeader: false,\n  hasCartBtnOnHeader: false,\n  hasSearchKeywordHeader: false,\n  hasCancelBtnOnHeader: false,\n  hasBottomNav: false,\n  title: '',\n};\n\nconst LayoutActionContext = createContext(null);\nconst LayoutValueContext = createContext(null);\n\nconst LayoutProvider = ({ children }) => {\n  const [layoutStatus, setLayoutStatus] = useState(LAYOUT_DEFAULT_STATE);\n  const action = useMemo(\n    () => ({\n      changeLayoutStatus: (layoutStatus) =>\n        setLayoutStatus({\n          ...LAYOUT_DEFAULT_STATE,\n          ...layoutStatus,\n        }),\n    }),\n    [setLayoutStatus]\n  );\n\n  return (\n    <LayoutActionContext.Provider value={action}>\n      <LayoutValueContext.Provider value={layoutStatus}>{children}</LayoutValueContext.Provider>\n    </LayoutActionContext.Provider>\n  );\n};\n\nexport const useLayoutActionContext = () => {\n  const context = useContext(LayoutActionContext);\n  if (!context) throw new Error('INVALID_LayoutActionContext');\n\n  return context;\n};\n\nexport const useLayoutValueContext = () => {\n  const context = useContext(LayoutValueContext);\n  if (!context) throw new Error('INVALID_LayoutValueContext');\n\n  return context;\n};\n\nexport default LayoutProvider;\n\nLayoutProvider.propTypes = {\n  children: oneOfType([node, element]).isRequired,\n};\n","import { number, node, oneOf, element, string, bool } from 'prop-types';\n\nimport { Skeleton } from '@shopby/react-components';\n\nconst ListSkeleton = ({ size = 4, children, className, isLoading }) => {\n  if (isLoading) {\n    return (\n      <div className={className}>\n        {Array(size)\n          .fill(null)\n          .map((_, idx) => (\n            <Skeleton key={idx} type=\"LIST\" />\n          ))}\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default ListSkeleton;\n\nListSkeleton.propTypes = {\n  className: string,\n  size: number,\n  children: oneOf([node, element]),\n  isLoading: bool,\n};\n","import { string, arrayOf } from 'prop-types';\n\nimport { getOptionLabels } from '../../utils';\n\nconst OptionLabel = ({ optionName, optionValue, optionInputs }) => {\n  const { normalOptionLabels, textOptionLabels } = getOptionLabels({ optionName, optionValue, optionInputs });\n\n  return (\n    <div className=\"option-label\">\n      <div className=\"option-label__normal-option\">\n        {normalOptionLabels.map((label) => (\n          <span key={label}>{label}</span>\n        ))}\n      </div>\n      <div>\n        {textOptionLabels.map((label) => (\n          <p key={label}>{label}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OptionLabel;\n\nOptionLabel.propTypes = {\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(string),\n};\n","import OptionLabel from './OptionLabel';\n\nexport default OptionLabel;\n","import { useState } from 'react';\n\nimport { string, bool, oneOf, func } from 'prop-types';\n\nimport {\n  Checkbox,\n  useMallStateContext,\n  SelectBox,\n  VisibleComponent,\n  useProductInquiryStateContext,\n  CharacterCounter,\n} from '@shopby/react-components';\n\nimport BoardNoticeList from '../BoardNoticeList/BoardNoticeList';\nimport BoardProductItem from '../BoardProductItem';\n\nconst ProductInquiryForm = ({\n  productName,\n  productImageUrl,\n  title = '',\n  content = '',\n  type = 'PRODUCT',\n  isSecreted = false,\n  ButtonGroup,\n}) => {\n  const [productInquiryTitle, setProductInquiryTitle] = useState(title);\n  const [productInquiryContent, setProductInquiryContent] = useState(content);\n  const [isSecret, setIsSecret] = useState(isSecreted);\n  const [currentType, setCurrentType] = useState(type);\n\n  const { productInquiryTypes: types } = useMallStateContext();\n  const { inquiryConfig } = useProductInquiryStateContext();\n\n  const handleInquiryTypeSelect = ({ currentTarget }) => {\n    setCurrentType(currentTarget.value);\n  };\n\n  const handleTitleChange = ({ character }) => {\n    setProductInquiryTitle(character.value);\n  };\n\n  const handleTextChange = ({ character }) => {\n    setProductInquiryContent(character.value);\n  };\n\n  const handleIsSecretChange = ({ currentTarget }) => {\n    setIsSecret(currentTarget.checked);\n  };\n\n  return (\n    <div className=\"board-form product-inquiry-form\">\n      <BoardProductItem productName={productName} productImageUrl={productImageUrl} />\n      <div className=\"l-panel product-inquiry-form__content\">\n        <SelectBox\n          className=\"product-inquiry-form__type\"\n          value={currentType}\n          options={types ?? []}\n          onSelect={handleInquiryTypeSelect}\n        />\n        <CharacterCounter\n          id=\"product-inquiry-form__title\"\n          placeholder=\"제목을 작성해주세요.\"\n          className=\"product-inquiry-form__title\"\n          onChange={handleTitleChange}\n          value={productInquiryTitle}\n          valid=\"NO_COMMON_SPECIAL\"\n          limitCount={{\n            character: 50,\n          }}\n        />\n        <CharacterCounter\n          id=\"product-inquiry-form__text\"\n          counterType=\"CHARACTER\"\n          textType=\"TEXT_AREA\"\n          placeholder=\"내용을 작성해주세요.\"\n          className=\"product-inquiry-form__text\"\n          onChange={handleTextChange}\n          value={productInquiryContent}\n          cols=\"30\"\n          rows=\"10\"\n          valid=\"NO_COMMON_SPECIAL\"\n          limitCount={{\n            character: 1000,\n          }}\n        />\n        <VisibleComponent\n          shows={inquiryConfig.secretUsable}\n          TruthyComponent={\n            <div className=\"product-inquiry-form__secret\">\n              <Checkbox label=\"비밀글 설정\" onChange={handleIsSecretChange} checked={isSecret} />\n            </div>\n          }\n        />\n        <ButtonGroup\n          type={currentType}\n          title={productInquiryTitle}\n          content={productInquiryContent}\n          isSecreted={isSecret}\n        />\n      </div>\n      <BoardNoticeList\n        texts={['성격에 맞지 않는 글, 비방성글, 음란글, 욕설 등은 통보 없이 이동 또는 삭제 될 수 있습니다.']}\n      />\n    </div>\n  );\n};\n\nProductInquiryForm.propTypes = {\n  productName: string.isRequired,\n  productImageUrl: string.isRequired,\n  type: oneOf(['PRODUCT', 'DELIVERY', 'CANCEL', 'RETURN', 'EXCHANGE', 'REFUND', 'OTHER']),\n  title: string,\n  content: string,\n  isSecreted: bool,\n  ButtonGroup: func,\n};\n\nexport default ProductInquiryForm;\n","import { string, number, arrayOf, shape, bool, func } from 'prop-types';\n\nimport { QuantityChanger, ThumbItem, VisibleComponent } from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport OptionLabel from '../OptionLabel';\n\nconst ProductThumbItem = ({\n  productNo = 0,\n  imageUrl = '',\n  brandName = '',\n  productName = '',\n  orderCnt,\n  buyAmt,\n  optionName = '',\n  optionValue = '',\n  optionInputs = [],\n  usesQuantityChanger,\n  quantityChangerValue,\n  onQuantityChange,\n  frontDisplayYn = 'Y',\n  OptionComponent = null,\n  AmountComponent = null,\n  isRedirectingDisabled = false,\n}) => {\n  if (!frontDisplayYn) return <></>;\n\n  return (\n    <ThumbItem\n      href={isRedirectingDisabled ? '#' : `/product-detail?productNo=${productNo}`}\n      src={imageUrl}\n      className=\"product-thumb-item\"\n      alt={productName}\n    >\n      <VisibleComponent shows={brandName} TruthyComponent={<p className=\"product-thumb-item__brand\">{brandName}</p>} />\n      <div>\n        <p className=\"product-thumb-item__name\">{productName}</p>\n        <VisibleComponent\n          shows={optionName || optionInputs.length > 0}\n          TruthyComponent={\n            <OptionLabel optionName={optionName} optionValue={optionValue} optionInputs={optionInputs} />\n          }\n        />\n        {OptionComponent && <OptionComponent />}\n      </div>\n      <div className=\"product-thumb-item__amount-wrap\">\n        <ul className=\"product-thumb-item__amount\">\n          {orderCnt >= 0 && <li>{orderCnt}개 </li>}\n          {buyAmt >= 0 && <li>{convertToKoreanCurrency(buyAmt)}원</li>}\n        </ul>\n        {AmountComponent && <AmountComponent />}\n        {usesQuantityChanger && <QuantityChanger value={quantityChangerValue} onChange={onQuantityChange} />}\n      </div>\n    </ThumbItem>\n  );\n};\nexport default ProductThumbItem;\n\nProductThumbItem.propTypes = {\n  frontDisplayYn: bool,\n  brandName: string,\n  productName: string.isRequired,\n  orderCnt: number,\n  buyAmt: number,\n  imageUrl: string,\n  optionName: string,\n  optionValue: string,\n  optionInputs: arrayOf(\n    shape({\n      inputLabel: string,\n      inputValue: string,\n    })\n  ),\n  productNo: number,\n  OptionComponent: func,\n  AmountComponent: func,\n  usesQuantityChanger: bool,\n  quantityChangerValue: number,\n  onQuantityChange: func,\n  isRedirectingDisabled: bool,\n};\n","import ProductThumbItem from './ProductThumbItem';\n\nexport default ProductThumbItem;\n","import { func, oneOfType, node, element, string, bool } from 'prop-types';\n\nimport { CustomModal, IconBtn } from '@shopby/react-components';\n\nconst TitleModal = ({ className, title, onClose, children, classModifier, isFull, ...props }) => (\n  <CustomModal className={className} {...props}>\n    <div\n      className={`title-modal${classModifier ? ` title-modal--${classModifier}` : ''}${\n        isFull ? ` title-modal--full` : ''\n      }`}\n    >\n      <div className=\"title-modal__header\">\n        <h2 className=\"title-modal__title\">{title}</h2>\n        {onClose && (\n          <IconBtn\n            className=\"title-modal__close-btn\"\n            iconType=\"x-black\"\n            onClick={() => onClose()}\n            hiddenLabel={true}\n            label=\"모달 닫기\"\n          />\n        )}\n      </div>\n      <div className=\"title-modal__content\">{children}</div>\n    </div>\n  </CustomModal>\n);\n\nexport default TitleModal;\n\nTitleModal.propTypes = {\n  id: string,\n  className: string,\n  title: string,\n  onClose: func,\n  children: oneOfType([node, element]),\n  classModifier: string,\n  isFull: bool,\n};\n","import TitleModal from './TitleModal';\n\nexport default TitleModal;\n","export const INFINITY_SCROLL_PAGE_SIZE = 6;\n","export const BOARD_IMAGE = {\n  THUMB_NAIL_SIZE: '100x100',\n};\n\nexport const REVIEW_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n\nexport const PERSONAL_INQUIRY_IMAGE = {\n  LIMIT_COUNT: 10,\n  LIMIT_MEGA_BYTES: 5,\n};\n","import { useEffect } from 'react';\n\nimport { LAYOUT_DEFAULT_STATE, useLayoutActionContext } from '../components/Layout/LayoutProvider';\n\n/**\n * 레이아웃의 헤더 및 푸터 형태 설정을 할 수 있는 커스텀 훅.\n * 인자 객체로 담지 않은 값들은 기본 값으로 설정됩니다.\n *\n * [기본 값]\n * isMain: false,\n * hasBackBtnOnHeader: false,\n * hasHomeBtnOnHeader: false,\n * hasCartBtnOnHeader: false,\n * hasBottomNav: false,\n * hasCancelBtnOnHeader: false,\n * title: '',\n * @param {{ isMain?: boolean, hasHomeBtnOnHeader?: boolean, hasBackBtnOnHeader?: boolean, hasCartBtnOnHeader?: boolean, hasCancelBtnOnHeader?: boolean, hasBottomNav?: boolean, title?: string }} layoutStatus\n */\n\nconst useLayoutChanger = (layoutStatus = LAYOUT_DEFAULT_STATE) => {\n  const { changeLayoutStatus } = useLayoutActionContext();\n\n  useEffect(() => {\n    if (changeLayoutStatus) {\n      changeLayoutStatus(layoutStatus);\n    }\n  }, [changeLayoutStatus, layoutStatus]);\n};\n\nexport default useLayoutChanger;\n","import {\n  ProfileLikeProvider,\n  useProfileLikeStateContext,\n  ProductInquiryProvider,\n  ProductInquiryFormProvider,\n  CartProvider,\n  ProductOptionProvider,\n} from '@shopby/react-components';\n\nimport useLayoutChanger from '../../../hooks/useLayoutChanger';\nimport TotalCount from '../TotalCount';\n\nimport LikeList from './LikeList';\n\nconst LikeTotalCount = () => {\n  const { profileLikeProduct } = useProfileLikeStateContext();\n\n  return <TotalCount title=\"좋아요\" count={profileLikeProduct.totalCount} />;\n};\n\nconst Like = () => {\n  useLayoutChanger({\n    title: '좋아요 관리',\n    hasBackBtnOnHeader: true,\n    hasCartBtnOnHeader: true,\n    hasBottomNav: true,\n  });\n\n  return (\n    <ProfileLikeProvider>\n      <ProductInquiryProvider>\n        <ProductInquiryFormProvider>\n          <ProductOptionProvider>\n            <CartProvider>\n              <div className=\"profile-like\">\n                <LikeTotalCount />\n                <LikeList />\n              </div>\n            </CartProvider>\n          </ProductOptionProvider>\n        </ProductInquiryFormProvider>\n      </ProductInquiryProvider>\n    </ProfileLikeProvider>\n  );\n};\n\nexport default Like;\n","import { useEffect, useState } from 'react';\n\nimport {\n  useProductInquiryFormActionContext,\n  useProductInquiryStateContext,\n  VisibleComponent,\n  useModalActionContext,\n  useProfileLikeStateContext,\n  useProfileLikeActionContext,\n  useInfiniteScroll,\n  Button,\n  ThumbList,\n  InfiniteScrollLoader,\n} from '@shopby/react-components';\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nimport { useErrorBoundaryActionContext } from '../../../components/ErrorBoundary';\nimport FullModal from '../../../components/FullModal';\nimport ListSkeleton from '../../../components/ListSkeleton/ListSkeleton';\nimport ProductInquiryForm from '../../../components/ProductInquiryForm/ProductInquiryForm';\nimport ProductThumbItem from '../../../components/ProductThumbItem';\nimport { INFINITY_SCROLL_PAGE_SIZE } from '../../../constants/common';\n\nconst DEFAULT_PRODUCT_INFORMATION = {\n  productName: '',\n  imageUrls: [''],\n};\n\nconst EmptyList = () => (\n  <div className=\"empty-list\">\n    <p>좋아요 내역이 없습니다.</p>\n  </div>\n);\n\nconst LikeList = () => {\n  const { inquiryConfig } = useProductInquiryStateContext();\n\n  const { openAlert } = useModalActionContext();\n  const { postProductInquiryBy } = useProductInquiryFormActionContext();\n  const { catchError } = useErrorBoundaryActionContext();\n\n  const { profileLikeProduct } = useProfileLikeStateContext();\n  const { fetchProfileLikeProduct, postProfileLikeByProductNos } = useProfileLikeActionContext();\n\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n  const [productInformation, setProductInformation] = useState({\n    ...DEFAULT_PRODUCT_INFORMATION,\n  });\n\n  // 인피니트\n  const { isLoading, accumulativeItems, fetchInitialItems, isInfiniteScrollDisabled, onIntersect } = useInfiniteScroll({\n    fetcher: async (requestOption) => {\n      const { data } = await fetchProfileLikeProduct(requestOption);\n\n      return data.items;\n    },\n    requestOption: {\n      pageNumber: 1,\n      pageSize: INFINITY_SCROLL_PAGE_SIZE,\n      hasTotalCount: true,\n    },\n  });\n\n  const handleIntersect = () => {\n    onIntersect({\n      totalCount: profileLikeProduct?.totalCount,\n    });\n  };\n\n  // 상품문의\n  const handleInquiryButtonClick = (productInformation) => {\n    setProductInformation(productInformation);\n    setIsRegistrationModalOpen(true);\n  };\n\n  const handleProductInquiryFormSubmit = async (productInquiryForm) => {\n    try {\n      await postProductInquiryBy({\n        productNo: productInformation.productNo,\n        ...productInquiryForm,\n      });\n\n      openAlert({\n        message: '상품문의가 등록됐습니다.',\n        onClose: () => {\n          setProductInformation({\n            ...DEFAULT_PRODUCT_INFORMATION,\n          });\n          setIsRegistrationModalOpen(false);\n        },\n      });\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  // 삭제\n  const handleDeleteButtonClick = async (productInformation) => {\n    try {\n      await postProfileLikeByProductNos({\n        productNos: [productInformation.productNo],\n      });\n\n      await fetchInitialItems();\n    } catch (e) {\n      catchError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchInitialItems();\n  }, []);\n\n  return (\n    <>\n      <VisibleComponent\n        shows={!(profileLikeProduct?.totalCount > 0)}\n        TruthyComponent={<EmptyList />}\n        FalsyComponent={\n          <>\n            <div className=\"profile-like__list\">\n              {accumulativeItems.map((item, index) => (\n                <ThumbList key={`${item.productNo}_${index}`} className=\"profile-like__list-item\">\n                  <ProductThumbItem\n                    productNo={item.productNo}\n                    productName={item.productName}\n                    optionNo={item.optionNo}\n                    brandName={item.brandName}\n                    imageUrl={item.imageUrls.at(0)}\n                    AmountComponent={() => {\n                      const discountAmount = item.immediateDiscountAmt + item.additionDiscountAmt;\n                      const originalPrice = discountAmount > 0 ? item.salePrice : 0;\n                      const salePrice = item.salePrice - discountAmount;\n\n                      return (\n                        <ul className=\"profile-like__amount-list\">\n                          <li className=\"profile-like__amount-item\">\n                            <span>{convertToKoreanCurrency(salePrice)} 원</span>\n                            {\n                              <VisibleComponent\n                                shows={discountAmount > 0}\n                                TruthyComponent={\n                                  <del className=\"profile-like__original-price\">\n                                    {convertToKoreanCurrency(originalPrice)} 원\n                                  </del>\n                                }\n                              />\n                            }\n                          </li>\n                        </ul>\n                      );\n                    }}\n                  />\n                  <div className=\"profile-like__buttons\">\n                    <Button\n                      className=\"profile-like__inquiry-button\"\n                      label=\"상품문의\"\n                      onClick={() => handleInquiryButtonClick(item)}\n                    />\n                    <Button\n                      className=\"profile-like__delete-button\"\n                      label=\"삭제\"\n                      onClick={() => handleDeleteButtonClick(item)}\n                    />\n                  </div>\n                </ThumbList>\n              ))}\n            </div>\n            <VisibleComponent\n              shows={accumulativeItems.length > 0}\n              TruthyComponent={\n                <InfiniteScrollLoader onIntersect={handleIntersect} disabled={isInfiniteScrollDisabled} />\n              }\n            />\n            <ListSkeleton isLoading={isLoading} />\n          </>\n        }\n      />\n\n      <VisibleComponent\n        shows={isRegistrationModalOpen}\n        TruthyComponent={\n          <FullModal title={inquiryConfig.name}>\n            <ProductInquiryForm\n              productName={productInformation?.productName}\n              productImageUrl={productInformation?.imageUrls[0]}\n              ButtonGroup={(props) => (\n                <>\n                  <Button\n                    className=\"review-form__submit-btn review-form__btn\"\n                    theme=\"dark\"\n                    label=\"취소\"\n                    onClick={() => setIsRegistrationModalOpen(false)}\n                  />\n                  <Button\n                    className=\"review-form__submit-btn review-form__btn\"\n                    theme=\"caution\"\n                    label=\"등록\"\n                    onClick={() => handleProductInquiryFormSubmit(props)}\n                  />\n                </>\n              )}\n            />\n          </FullModal>\n        }\n      />\n    </>\n  );\n};\n\nexport default LikeList;\n","import Like from './Like';\n\nexport default Like;\n","import { string, number } from 'prop-types';\n\nimport { convertToKoreanCurrency } from '@shopby/shared';\n\nconst TotalCount = ({ title, count }) => (\n  <p className=\"my-page__total-count\">\n    {title}\n    <span className=\"my-page__count\">\n      <span>{convertToKoreanCurrency(count)}</span> 건\n    </span>\n  </p>\n);\n\nTotalCount.propTypes = {\n  title: string,\n  count: number,\n};\n\nexport default TotalCount;\n","import TotalCount from './TotalCount';\n\nexport default TotalCount;\n","export const getCollectionComments = (returnWay, returnWarehouseLabel) => {\n  if (returnWay === 'SELLER_COLLECT')\n    return [\n      '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n      '반품신청이 완료되면 입력하신 수거지주소로 반품수거가 진행됩니다.',\n      'CJ대한통운택배기사가 1~2일 내에 직접 방문합니다.',\n      '반품등록일 오후 5시까지 접수분은 익일로 반품접수 됩니다.',\n      '단, 토/일/공휴일은 다음 근무일에 처리 됩니다.',\n    ];\n\n  return [\n    '반품상황에 따라 (반품)택배비를 차감할 수 있습니다.',\n    '반품신청이 완료되면 구매자가 반품할 상품을 반품주소로 직접 보내주셔야 합니다.(착불 불가)',\n    `반품주소: ${returnWarehouseLabel}`,\n  ];\n};\n","export * from './product';\nexport * from './claim';\n","export const getOptionLabels = ({ optionName, optionValue, optionInputs }) => {\n  const optionNameTokens = optionName?.split('|') ?? [];\n  const optionValueTokens = optionValue?.split('|') ?? [];\n  const normalOptionLabels = optionNameTokens.map(\n    (optionNameToken, idx) => `${idx + 1}) ${optionNameToken}: ${optionValueTokens[idx]}`\n  );\n  const textOptionLabels = optionInputs?.map(({ inputLabel, inputValue }) => `${inputLabel}: ${inputValue}`) ?? [];\n\n  return {\n    normalOptionLabels,\n    textOptionLabels,\n  };\n};\n"],"names":[],"sourceRoot":""}